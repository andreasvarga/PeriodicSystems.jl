var documenterSearchIndex = {"docs":
[{"location":"psconversions.html#Discretization-of-continuous-time-periodic-systems","page":"Discretization of continuous-time periodic systems","title":"Discretization of continuous-time periodic systems","text":"","category":"section"},{"location":"psconversions.html","page":"Discretization of continuous-time periodic systems","title":"Discretization of continuous-time periodic systems","text":"psc2d  Discretization of a continuous-time periodic system. ","category":"page"},{"location":"psconversions.html","page":"Discretization of continuous-time periodic systems","title":"Discretization of continuous-time periodic systems","text":"psc2d","category":"page"},{"location":"psconversions.html#PeriodicSystems.psc2d","page":"Discretization of continuous-time periodic systems","title":"PeriodicSystems.psc2d","text":" psc2d([PMT,] psysc, Ts; solver, reltol, abstol, dt) -> psys::PeriodicStateSpace{PMT}\n\nCompute for the continuous-time periodic system psysc = (A(t),B(t),C(t),D(t)) of period T and  for a sampling time Ts, the corresponding discretized periodic system psys = (Ad,Bd,Cd,Dd) using a zero-order hold based discretization method.  The resulting discretized system psys has the matrices of type PeriodicArray by default, or of type PMT, where PMT is one of the types PeriodicMatrix, PeriodicArray, SwitchingPeriodicMatrix or SwitchingPeriodicArray.    \n\nThe discretization is performed by determining the monodromy matrix as a product of  K = T/Ts state transition matrices of the extended state-space matrix [A(t) B(t); 0 0]  by integrating numerically the corresponding homogeneous linear ODE.   The ODE solver to be employed can be  specified using the keyword argument solver, together with the required relative accuracy reltol (default: reltol = 1.e-3),  absolute accuracy abstol (default: abstol = 1.e-7) and/or  the fixed step length dt (default: dt = Ts/10).  Depending on the desired relative accuracy reltol, lower order solvers are employed for reltol >= 1.e-4,  which are generally very efficient, but less accurate. If reltol < 1.e-4, higher order solvers are employed able to cope with high accuracy demands. \n\nThe following solvers from the OrdinaryDiffEq.jl package can be selected:\n\nsolver = \"non-stiff\" - use a solver for non-stiff problems (Tsit5() or Vern9());\n\nsolver = \"stiff\" - use a solver for stiff problems (Rodas4() or KenCarp58());\n\nsolver = \"linear\" - use a special solver for linear ODEs (MagnusGL6()) with fixed time step dt;\n\nsolver = \"symplectic\" - use a symplectic Hamiltonian structure preserving solver (IRKGL16());\n\nsolver = \"\" - use the default solver, which automatically detects stiff problems (AutoTsit5(Rosenbrock23()) or AutoVern9(Rodas5())). \n\nFor large values of K, parallel computation of factors can be alternatively performed  by starting Julia with several execution threads.  The number of execution threads is controlled either by using the -t/--threads command line argument  or by using the JULIA_NUM_THREADS environment variable.  \n\n\n\n\n\n","category":"function"},{"location":"psanalysis.html#Analysis-of-periodic-systems","page":"Analysis of periodic systems","title":"Analysis of periodic systems","text":"","category":"section"},{"location":"psanalysis.html","page":"Analysis of periodic systems","title":"Analysis of periodic systems","text":"pspole  Computation of the poles of a periodic system.\npszero  Computation of the zeros of a periodic system.\nisstable  Assessment of stability of a periodic system.\npshanorm  Evaluation of the Hankel-norm of a periodic system.\npsh2norm  Evaluation of the H2-norm of a periodic system.\npslinfnorm  Evaluation of the L∞/H∞-norm of a periodic system.\npstimeresp  Time response of a periodic system.\npsstepresp  Step response of a periodic system.\npseval  Evaluation of the value of the transfer function matrix of the lifted discrete-time periodic system.","category":"page"},{"location":"psanalysis.html","page":"Analysis of periodic systems","title":"Analysis of periodic systems","text":"pspole\npszero\nisstable\npshanorm\npsh2norm\npslinfnorm\npstimeresp\npsstepresp\npseval","category":"page"},{"location":"psanalysis.html#PeriodicSystems.pspole","page":"Analysis of periodic systems","title":"PeriodicSystems.pspole","text":"pspole(psys::PeriodicStateSpace{PM}[,K]; kwargs...) -> val\n\nReturn for the periodic system psys = (A(t),B(t),C(t),D(t)) the complex vector val containing  the characteristic exponents of the periodic matrix A(t) (also called the poles of the system psys). \n\nDepending on the underlying periodic matrix type PM, the optional argument K and keyword arguments kwargs may have the following values:\n\nif PM = PeriodicFunctionMatrix, or PM = PeriodicSymbolicMatrix, or PM = PeriodicTimeSeriesMatrix, then K is the number of factors used to express the monodromy matrix of A(t) (default: K = 1)  and kwargs are the keyword arguments of  PeriodicMatrices.pseig(::PeriodicFunctionMatrix); \nif PM = HarmonicArray, then K is the number of harmonic components used to represent the Fourier series of A(t) (default: K = max(10,nh-1), nh is the number of harmonics terms of A(t))  and kwargs are the keyword arguments of  PeriodicMatrices.psceig(::HarmonicArray); \nif PM = FourierFunctionMatrix, then K is the number of harmonic components used to represent the Fourier series of A(t) (default: K = max(10,nh-1), nh is the number of harmonics terms of A(t))  and kwargs are the keyword arguments of  PeriodicMatrices.psceig(::FourierFunctionMatrix); \nif PM = PeriodicMatrix or PM = PeriodicArray, then K is the starting sample time (default: K = 1)  and kwargs are the keyword arguments of  PeriodicMatrices.psceig(::PeriodicMatrix); \n\n\n\n\n\n","category":"function"},{"location":"psanalysis.html#PeriodicSystems.pszero","page":"Analysis of periodic systems","title":"PeriodicSystems.pszero","text":"pszero(psys::PeriodicStateSpace{HarmonicArray}[, N]; P, atol, rtol, fast) -> val\npszero(psys::PeriodicStateSpace{PeriodicFunctionMatrix}[, N]; P, atol, rtol, fast) -> val\npszero(psys::PeriodicStateSpace{PeriodicSymbolicMatrix}[, N]; P, atol, rtol, fast) -> val\n\nCompute the finite and infinite zeros of a continuous-time periodic system psys = (A(t), B(t), C(t), D(t)) in val,  where the periodic system matrices A(t), B(t), C(t), and D(t) are in a Harmonic Array, or  Periodic Function Matrix, or Periodic Symbolic Matrix representation  (the last two representation are automatically converted to a Harmonic Array representation).  N is the number of selected harmonic components in the Fourier series of the system matrices (default: N = max(20,nh-1),  where nh is the maximum number of harmonics terms) and the keyword parameter P is the number of full periods  to be considered (default: P = 1) to build  a frequency-lifted LTI representation based on truncated block Toeplitz matrices. \n\nThe computation of the zeros of the complex lifted system is performed by reducing the corresponding system pencil  to an appropriate Kronecker-like form which exhibits the finite and infinite eigenvalues.  The reduction is performed using orthonal similarity transformations and involves rank decisions based on rank revealing QR-decompositions with column pivoting,  if fast = true, or, the more reliable, SVD-decompositions, if fast = false. For a system psys of period T,  the finite zeros are determined as those eigenvalues which have imaginary parts in the interval [-ω/2, ω/2], where ω = 2π/(P*T). To eliminate possible spurious finite eigenvalues, the intersection of two finite eigenvalue sets is computed  for two lifted systems obtained for N and N+2 harmonic components.     The infinite zeros are determined as the infinite zeros of the LTI system (A(ti), B(ti), C(ti), D(ti))  resulting for a random time value ti. Warning: While this evaluation of the number of infinite zeros mostly  provides the correct result, there is no theoretical assessment of this approach (counterexamples are welcome!). \n\nThe keyword arguments atol  and rtol specify the absolute and relative tolerances for the nonzero elements of the underlying lifted system pencil, respectively.  The default relative tolerance is n*ϵ, where n is the size of the smallest dimension of the pencil, and ϵ is the  working machine epsilon. \n\n\n\n\n\n pszero(psys::PeriodicStateSpace{PeriodicMatrix}[, K]; atol, rtol, fast) -> val\n pszero(psys::PeriodicStateSpace{PeriodicArray}[, K]; atol, rtol, fast) -> val\n\nCompute the finite and infinite zeros of a discrete-time periodic system psys = (A(t), B(t), C(t), D(t)) in val,  where the periodic system matrices A(t), B(t), C(t), and D(t) are in either Periodic Matrix or Periodic Array representation.  The optional argument K specifies a desired time to start the sequence of periodic matrices (default: K = 1).\n\nThe computation of zeros relies on the fast structure exploiting reduction of singular periodic pencils as described in [1],  which separates a matrix pencil M-λN which contains the infinite and finite zeros  and the left and right Kronecker indices. The reduction is performed using orthonal similarity transformations and involves rank decisions based  on rank revealing QR-decompositions with column pivoting,  if fast = true, or, the more reliable, SVD-decompositions, if fast = false. \n\nThe keyword arguments atol and rtol specify the absolute and relative tolerances for the nonzero elements of the periodic system matrices, respectively.  The default relative tolerance is n*ϵ, where n is proportional with the largest dimension of the periodic matrices,  and ϵ is the working machine epsilon. \n\nReferences\n\n[1] A. Varga and P. Van Dooren. Computing the zeros of periodic descriptor systems.     Systems & Control Letters 50:371–381, 2003.\n\n\n\n\n\n","category":"function"},{"location":"psanalysis.html#DescriptorSystems.isstable","page":"Analysis of periodic systems","title":"DescriptorSystems.isstable","text":" isstable(psys[, K = 1]; smarg = 1, fast = false, offset = sqrt(ϵ), kwargs...) -> Bool\n\nReturn true if the continuous-time periodic system psys has only stable characteristic multipliers and false otherwise. \n\nTo assess the stability, the absolute values of the characteristic multipliers (i.e., the eigenvalues of the monodromy matrix) must be less than smarg-β, where smarg is the discrete-time stability margin (default: smarg = 1)  and  β is an offset specified via the keyword parameter offset = β to be used to numerically assess the stability of eigenvalues. The default value used for β is sqrt(ϵ), where ϵ is the working machine precision. \n\nThe monodromy matrix is determined as a product K state transition matrices (default: K = 1)  computed by integrating numerically a homogeneous linear ODE with periodic coefficients. If fast = false (default) then the characteristic multipliers are computed using an approach based on the periodic Schur decomposition [1], while if fast = true  the structure exploiting reduction [2] of an appropriate lifted pencil is employed.  This later option may occasionally lead to inaccurate results for large number of matrices. \n\nReferences\n\n[1] A. Bojanczyk, G. Golub, and P. Van Dooren,      The periodic Schur decomposition. Algorithms and applications, Proc. SPIE 1996.\n\n[2] A. Varga & P. Van Dooren. Computing the zeros of periodic descriptor systems.     Systems and Control Letters, 50:371-381, 2003.\n\n\n\n\n\nisstable(psys; smarg = 1, fast = false, offset = sqrt(ϵ)) -> Bool\n\nReturn true if the discrete-time periodic system psys has only stable characteristic multipliers and false otherwise. \n\nTo assess the stability, the absolute values of the characteristic multipliers (i.e., the eigenvalues of the monodromy matrix) must be less than smarg-β, where smarg is the discrete-time stability margin (default: smarg = 1)  and  β is an offset specified via the keyword parameter offset = β to be used to numerically assess the stability of eigenvalues. The default value used for β is sqrt(ϵ), where ϵ is the working machine precision. \n\nIf fast = false (default) then the characteristic multipliers are computed using an approach based on the periodic Schur decomposition [1], while if fast = true  the structure exploiting reduction [2] of an appropriate lifted pencil is employed.  This later option may occasionally lead to inaccurate results for large number of matrices. \n\nReferences\n\n[1] A. Bojanczyk, G. Golub, and P. Van Dooren,      The periodic Schur decomposition. Algorithms and applications, Proc. SPIE 1996.\n\n[2] A. Varga & P. Van Dooren. Computing the zeros of periodic descriptor systems.     Systems and Control Letters, 50:371-381, 2003.\n\n\n\n\n\n","category":"function"},{"location":"psanalysis.html#PeriodicSystems.pshanorm","page":"Analysis of periodic systems","title":"PeriodicSystems.pshanorm","text":"pshanorm(psys; smarg = 1, lifting = false, offset = sqrt(ϵ)) -> nrm\n\nCompute the Hankel-norm of a stable discrete-time periodic system psys = (A(t),B(t),C(t),D(t)).   For the computation of the norm, the formulas given in [1] are employed.  The Hankel norm is computed as\n\n nrm = maximum(sqrt(Λ(P(t)Q(t))),\n\nwhere P(t) is the controllability Gramian satisfying the periodic Lyapunov equation\n\n P(t+1) = A(t)P(t)A(t)' + B(t)B(t)',\n\nand Q(t) is the observability Gramian satisfying the periodic Lyapunov equation\n\nQ(t) = A(t)'Q(t+1)A(t) + C(t)'C(t) .\n\nTo assess the stability, the absolute values of the characteristic multipliers of A(t)  must be less than smarg-β, where smarg is the discrete-time stability margin (default: smarg = 1)  and  β is an offset specified via the keyword parameter offset = β to be used to numerically assess the stability of eigenvalues. The default value used for β is sqrt(ϵ), where ϵ is the working machine precision. \n\nIf lifting = false (default), then the norm is evaluated using an approach based on the periodic Schur decomposition of A(t),  while if lifting = true the norm of the lifted cyclic system is evaluated.   This later option may lead to excessive computational times for large matrices or large periods. \n\nReferences\n\n[1] S. Bittanti and P. Colaneri. Periodic Systems : Filtering and Control.     Springer-Verlag London, 2009. \n\n\n\n\n\npshanorm(psys, K; smarg = 1, offset = sqrt(ϵ), solver = \"auto\", reltol = 1.e-4, abstol = 1.e-7) -> nrm\n\nCompute the Hankel-norm of a stable continuous-time periodic system psys = (A(t),B(t),C(t),D(t)).   For the computation of the norm, the approach suggested in [1] is employed,  in conjunction with the multiple-shooting approach using K discretization points.   For a periodic system of period  T, the Hankel-norm is defined as\n\n nrm = sqrt(max(Λ(P(t)Q(t)))), for t ∈ [0,T]\n\nwhere P(t) is the controllability Gramian satisfying the periodic differential Lyapunov equation\n\n .\n P(t) = A(t)P(t)A(t)' + B(t)B(t)',\n\nand Q(t) is the observability Gramian satisfying the periodic differential Lyapunov equation\n\n .\n-Q(t) = A(t)'Q(t)A(t) + C(t)'C(t) .\n\nThe norm is evaluated from the K time values of P(t) and Q(t) in the interval [0,T] and  the precision is (usually) better for larger values of K.\n\nTo assess the stability, the absolute values of the characteristic multipliers of A(t)  must be less than smarg-β, where smarg is the discrete-time stability margin (default: smarg = 1)  and  β is an offset specified via the keyword parameter offset = β to be used to numerically assess the stability of eigenvalues. The default value used for β is sqrt(ϵ), where ϵ is the working machine precision. \n\nThe ODE solver to be employed to convert the continuous-time problem into a discrete-time problem can be specified using the keyword argument solver,  together with the required relative accuracy reltol (default: reltol = 1.e-4) and   absolute accuracy abstol (default: abstol = 1.e-7).  Depending on the desired relative accuracy reltol, lower order solvers are employed for reltol >= 1.e-4,  which are generally very efficient, but less accurate. If reltol < 1.e-4, higher order solvers are employed able to cope with high accuracy demands. \n\nThe following solvers from the OrdinaryDiffEq.jl package can be selected:\n\nsolver = \"non-stiff\" - use a solver for non-stiff problems (Tsit5() or Vern9());\n\nsolver = \"stiff\" - use a solver for stiff problems (Rodas4() or KenCarp58());\n\nsolver = \"auto\" - use the default solver, which automatically detects stiff problems (AutoTsit5(Rosenbrock23()) or AutoVern9(Rodas5())). \n\nReferences\n\n[1] A. Varga, On solving periodic differential matrix equations with applications to periodic system norms computation.     Proc. CDC/ECC, Seville, p.6545-6550, 2005.  \n\n\n\n\n\n","category":"function"},{"location":"psanalysis.html#PeriodicSystems.psh2norm","page":"Analysis of periodic systems","title":"PeriodicSystems.psh2norm","text":"psh2norm(psys; adj = false, smarg = 1, fast = false, offset = sqrt(ϵ)) -> nrm\n\nCompute the H2-norm of a discrete-time periodic system psys = (A(t),B(t),C(t),D(t)).   For the computation of the norm, the formulas given in [1] are employed.  For adj = false the norm is computed as\n\n nrm = sqrt(sum(tr(C(t)P(t)C(t)'+D(t)*D(t)'))),\n\nwhere P(t) is the controllability Gramian satisfying the periodic Lyapunov equation\n\n P(t+1) = A(t)P(t)A(t)' + B(t)B(t)',\n\nwhile for adj = true the norm is computed as\n\nnrm = sqrt(sum(tr(B(t)'Q(t+1)B(t)+D(t)'*D(t)))),\n\nwhere Q(t) is the observability Gramian satisfying the periodic Lyapunov equation\n\nQ(t) = A(t)'Q(t+1)A(t) + C(t)'C(t) .\n\nThe norm is set to infinity for an unstable system.\n\nTo assess the stability, the absolute values of the characteristic multipliers of A(t)  must be less than smarg-β, where smarg is the discrete-time stability margin (default: smarg = 1)  and  β is an offset specified via the keyword parameter offset = β to be used to numerically assess the stability of eigenvalues. The default value used for β is sqrt(ϵ), where ϵ is the working machine precision. \n\nIf fast = false (default) then the norm is evaluated using an approach based on the periodic Schur decomposition of A(t),  while if fast = true the norm of the lifted standard system is evaluated.   This later option may occasionally lead to inaccurate results for large number of matrices. \n\nReferences\n\n[1] S. Bittanti and P. Colaneri. Periodic Systems : Filtering and Control.     Springer-Verlag London, 2009. \n\n\n\n\n\npsh2norm(psys, K; adj = false, smarg = 1, fast = false, offset = sqrt(ϵ), solver = \"auto\", reltol = 1.e-4, abstol = 1.e-7, quad = false) -> nrm\n\nCompute the H2-norm of a continuous-time periodic system psys = (A(t),B(t),C(t),D(t)).   For the computation of the norm, the formulas given in [1] are employed,  in conjunction with the multiple-shooting approach of [2] using K discretization points.   For a periodic system of period  T, for adj = false the norm is computed as\n\n nrm = sqrt(Integral(tr(C(t)P(t)C(t)')))dt/T),\n\nwhere P(t) is the controllability Gramian satisfying the periodic differential Lyapunov equation\n\n .\n P(t) = A(t)P(t)A(t)' + B(t)B(t)',\n\nwhile for adj = true the norm is computed as\n\nnrm = sqrt(Integral(tr(B(t)'Q(t)B(t)))dt/T),\n\nwhere Q(t) is the observability Gramian satisfying the periodic differential Lyapunov equation\n\n .\n-Q(t) = A(t)'Q(t)A(t) + C(t)'C(t) .\n\nIf quad = true, a simple quadrature formula based on the sum of time values is employed (see [2]). This option ensures a faster evaluation, but is potentially less accurate then the exact evaluation employed if quad = false (default). \n\nThe norm is set to infinity for an unstable system or for a non-zero D(t).\n\nTo assess the stability, the absolute values of the characteristic multipliers of A(t)  must be less than smarg-β, where smarg is the discrete-time stability margin (default: smarg = 1)  and  β is an offset specified via the keyword parameter offset = β to be used to numerically assess the stability of eigenvalues. The default value used for β is sqrt(ϵ), where ϵ is the working machine precision.  If fast = false (default) then the stability is checked using an approach based on the periodic Schur decomposition of A(t),  while if fast = true the stability is checked using a lifting-based approach.  \n\nThe ODE solver to be employed to convert the continuous-time problem into a discrete-time problem can be specified using the keyword argument solver,  together with the required relative accuracy reltol (default: reltol = 1.e-4) and   absolute accuracy abstol (default: abstol = 1.e-7).  Depending on the desired relative accuracy reltol, lower order solvers are employed for reltol >= 1.e-4,  which are generally very efficient, but less accurate. If reltol < 1.e-4, higher order solvers are employed able to cope with high accuracy demands. \n\nThe following solvers from the OrdinaryDiffEq.jl package can be selected:\n\nsolver = \"non-stiff\" - use a solver for non-stiff problems (Tsit5() or Vern9());\n\nsolver = \"stiff\" - use a solver for stiff problems (Rodas4() or KenCarp58());\n\nsolver = \"auto\" - use the default solver, which automatically detects stiff problems (AutoTsit5(Rosenbrock23()) or AutoVern9(Rodas5())). \n\nReferences\n\n[1] P. Colaneri. Continuous-time periodic systems in H2 and H∞: Part I: Theoretical Aspects.     Kybernetika, 36:211-242, 2000. \n\n[2] A. Varga, On solving periodic differential matrix equations with applications to periodic system norms computation.     Proc. CDC/ECC, Seville, p.6545-6550, 2005.  \n\n\n\n\n\n","category":"function"},{"location":"psanalysis.html#PeriodicSystems.pslinfnorm","page":"Analysis of periodic systems","title":"PeriodicSystems.pslinfnorm","text":"pslinfnorm(psys, hinfnorm = false, rtolinf = 0.001, fast = true, offset = sqrt(ϵ)) -> (linfnorm, fpeak)\npshinfnorm(psys, rtolinf = 0.001, fast = true, offset = sqrt(ϵ)) -> (hinfnorm, fpeak)\n\nCompute for a discrete-time periodic system psys = (A(t),B(t),C(t),D(t) with the lifted transfer function  matrix G(λ)  the L∞ norm linfnorm with pslinfnorm or the H∞ norm hinfnorm with pshinfnorm (i.e.,  the peak gain of G(λ)) and  the corresponding peak frequency fpeak, where the peak gain is achieved. If hinfnorm = true, the H∞ norm is computed with pslinfnorm.\n\nThe L∞ norm is infinite if psys has poles on the stability domain boundary,  i.e., on the unit circle. The H∞ norm is infinite if psys has unstable poles. \n\nTo check the lack of poles on the stability domain boundary, the poles of psys  must not have moduli within the interval [1-β,1+β], where β is the stability domain boundary offset.   The offset  β to be used can be specified via the keyword parameter offset = β.  The default value used for β is sqrt(ϵ), where ϵ is the working machine precision. \n\nThe keyword argument rtolinf specifies the relative accuracy for the computed infinity norm.  The  default value used for rtolinf is 0.001.\n\nThe computation of the L∞ norm is based on the algorithm proposed in [1].  The involved computations of characteristic multipliers are performed either with the fast reduction method of [2],  if fast = true or if time-varying dimensions are present,  or the generalized periodic Schur decomposition based method of [3], if fast = false.  \n\nReferences\n\n[1] A. Varga. \"Computation of L∞-norm of linear discrete-time periodic systems.\" Proc. MTNS, Kyoto, 2007.\n\n[2] A. Varga and P. Van Dooren. Computing the zeros of periodic descriptor systems.     Systems & Control Letters 50:371–381, 2003.\n\n[3] Kressner, D.     An efficient and reliable implementation of the periodic QZ     algorithm. IFAC Workshop on Periodic Control Systems (PSYCO     2001), Como (Italy), August 27-28 2001. Periodic Control     Systems 2001 (IFAC Proceedings Volumes), Pergamon.\n\n\n\n\n\npslinfnorm(psys, K = 100; hinfnorm = false, rtolinf = 0.001, offset = sqrt(ϵ), reltol, abstol, dt) -> (linfnorm, fpeak)\npshinfnorm(psys, K = 100; rtolinf = 0.001, offset = sqrt(ϵ), reltol, abstol, dt) -> (linfnorm, fpeak)\n\nCompute for a continuous-time periodic system psys = (A(t),B(t),C(t),D(t) the L∞ norm linfnorm with pslinfnorm or the  H∞ norm hinfnorm with pshinfnorm as defined in [1].  If hinfnorm = true, the H∞ norm is computed with pslinfnorm. The corresponding peak frequency fpeak, where the peak gain is achieved, is usually not determined, excepting in some limiting cases.    The L∞ norm is infinite if psys has poles on the imaginary axis. \n\nTo check the lack of poles on the imaginary axis, the characteristic exponents of A(t)  must not have real parts in the interval [-β,β], where β is the stability domain boundary offset.   The offset  β to be used can be specified via the keyword parameter offset = β.  The default value used for β is sqrt(ϵ), where ϵ is the working machine precision. \n\nA bisection based algorith, as described in [2], is employed to approximate the L∞ norm, and the keyword argument rtolinf specifies the relative accuracy for the computed infinity norm.  The  default value used for rtolinf is 0.001.\n\nIf hinfnorm = true, the H∞ norm is computed.  In this case, the stability of the system is additionally checked and  the H∞ norm is infinite for an unstable system. To check the stability, the characteristic exponents of A(t) must have real parts less than -β.\n\nThe ODE solver to be employed to compute the characteristic multipliers of the system Hamiltonian can be specified using the keyword argument solver (default: solver = \"symplectic\")  together with the required relative accuracy reltol (default: reltol = 1.e-4),   absolute accuracy abstol (default: abstol = 1.e-7) and  stepsize dt (default: dt = 0). The value stepsize is relevant only if solver = \"symplectic\", in which case an adaptive stepsize strategy is used ifdt = 0and a fixed stepsize is used ifdt > 0. Depending on the desired relative accuracyreltol, lower order solvers are employed forreltol >= 1.e-4,  which are generally very efficient, but less accurate. Ifreltol < 1.e-4`, higher order solvers are employed able to cope with high accuracy demands. \n\nThe following solvers from the OrdinaryDiffEq.jl package can be selected:\n\nsolver = \"non-stiff\" - use a solver for non-stiff problems (Tsit5() or Vern9());\n\nsolver = \"stiff\" - use a solver for stiff problems (Rodas4() or KenCarp58());\n\nsolver = \"linear\" - use a special solver for linear ODEs (MagnusGL6()) with fixed time step dt;\n\nsolver = \"symplectic\" - use a symplectic Hamiltonian structure preserving solver (IRKGL16());\n\nsolver = \"auto\" - use the default solver, which automatically detects stiff problems (AutoTsit5(Rosenbrock23()) or AutoVern9(Rodas5())). \n\nReferences:    \n\n[1] P. Colaneri. Continuous-time periodic systems in H2 and H∞: Part I: Theoretical Aspects.     Kybernetika, 36:211-242, 2000. \n\n[2] A. Varga, On solving periodic differential matrix equations with applications to periodic system norms computation.     Proc. CDC/ECC, Seville, p.6545-6550, 2005.  \n\n\n\n\n\n","category":"function"},{"location":"psanalysis.html#PeriodicSystems.pstimeresp","page":"Analysis of periodic systems","title":"PeriodicSystems.pstimeresp","text":"pstimeresp(sys, u, t, x0 = zeros(sys.nx); state_history = false, solver, reltol, abstol) -> (y, tout, x)\n\nCompute the time response of a periodic system sys = (A(t),B(t),C(t),D(t)) to the input signals  described by u and t. The time vector t consists of regularly spaced time samples.  The input u can be specified as a matrix with as many columns as the number of inputs of sys,  in which case its i-th row specifies the input values at time t[i].  For a discrete-time system, u should be sampled at the same sampling rate Ts as sys and t must have all time steps equal to Ts or can be set to an empty vector.  For continuous-time models, the input values are interpolated between samples using   zero-order hold based interpolation.  The vector x0 specifies the initial state vector at time t[1] and is set to zero when omitted. \n\nThe matrix y contains the resulting time history of the outputs of sys and  the vector tout contains the corresponding values of the time samples. The i-th row of y contains the output values at time tout[i].   If the keyword parameter value state_history = true is used, then the matrix x contains  the resulting time history of the state vector and its i-th row x[i,:] contains  the state values at time tout[i].  The column dimension of the matrix x is n, the dimension of the state vector.  For a discrete-time periodic system with time-varying state dimensions, n is the maximum value of the  dimensions of the state vector over one period. The components of x[i,:] have trailing zero values if the  corresponding state vector dimension is less than n.   By default, the state history is not saved and x = nothing.\n\nFor a continuous-time model an equivalent discretized model is determined to be used for simulation. The discretization is performed by determining the monodromy matrix as a product of  state transition matrices of the extended state-space matrix [A(t) B(t); 0 0]  by integrating numerically the corresponding homogeneous linear ODE.   The ODE solver to be employed can be  specified using the keyword argument solver, together with the required relative accuracy reltol (default: reltol = 1.e-4),  absolute accuracy abstol (default: abstol = 1.e-7) and/or  the fixed step length dt (default: dt = Ts/10). Depending on the desired relative accuracy reltol, lower order solvers are employed for reltol >= 1.e-4,  which are generally very efficient, but less accurate. If reltol < 1.e-4, higher order solvers are employed able to cope with high accuracy demands. \n\nThe following solvers from the OrdinaryDiffEq.jl package can be selected:\n\nsolver = \"non-stiff\" - use a solver for non-stiff problems (Tsit5() or Vern9());\n\nsolver = \"stiff\" - use a solver for stiff problems (Rodas4() or KenCarp58());\n\nsolver = \"linear\" - use a special solver for linear ODEs (MagnusGL6()) with fixed time step dt;\n\nsolver = \"symplectic\" - use a symplectic Hamiltonian structure preserving solver (IRKGL16());\n\nsolver = \"auto\" - use the default solver, which automatically detects stiff problems (AutoTsit5(Rosenbrock23()) or AutoVern9(Rodas5())). \n\nFor large numbers of product terms, parallel computation of factors can be alternatively performed  by starting Julia with several execution threads.  The number of execution threads is controlled either by using the -t/--threads command line argument  or by using the JULIA_NUM_THREADS environment variable. \n\n\n\n\n\npstimeresp(sys, u, t, x0 = zeros(sys.nx); state_history = false, solver, reltol, abstol) -> (y, tout, x)\n\nCompute the time response of a continuous-time periodic system sys = (A(t),B(t),C(t),D(t)) to the input signals  described by u and t. The time vector t consists of regularly spaced time samples.  The input u is specified as a vector of time dependent signals  with as many components as the number of inputs of sys.  The vector x0 specifies the initial state vector at time t[1] and is set to zero when omitted. \n\nThe matrix y contains the resulting time history of the outputs of sys and  the vector tout contains the corresponding values of the time samples. The i-th row of y contains the output values at time tout[i].   If the keyword parameter value state_history = true is used, then the matrix x contains  the resulting time history of the state vector and its i-th row contains  the state values at time tout[i]. By default, the state history is not computed and x = nothing.\n\nThe ODE solver to be employed can be  specified using the keyword argument solver (see below), together with the required relative accuracy reltol (default: reltol = 1.e-4),  absolute accuracy abstol (default: abstol = 1.e-7) and  the fixed step length dt (default: dt = 0), only used if solver = \"symplectic\".  Depending on the desired relative accuracy reltol, lower order solvers are employed for reltol >= 1.e-4,  which are generally very efficient, but less accurate. If reltol < 1.e-4, higher order solvers are employed able to cope with high accuracy demands. \n\nThe following solvers from the OrdinaryDiffEq.jl package can be selected:\n\nsolver = \"non-stiff\" - use a solver for non-stiff problems (Tsit5() or Vern9());\n\nsolver = \"stiff\" - use a solver for stiff problems (Rodas4() or KenCarp58());\n\nsolver = \"linear\" - use a special solver for linear ODEs (MagnusGL6()) with fixed time step dt;\n\nsolver = \"symplectic\" - use a symplectic Hamiltonian structure preserving solver (IRKGL16());\n\nsolver = \"auto\" - use the default solver, which automatically detects stiff problems (AutoTsit5(Rosenbrock23()) or AutoVern9(Rodas5())). \n\n\n\n\n\n","category":"function"},{"location":"psanalysis.html#PeriodicSystems.psstepresp","page":"Analysis of periodic systems","title":"PeriodicSystems.psstepresp","text":"psstepresp(sys[, tfinal]; ustep = ones(psys.nu), x0 = zeros(psys.nx), timesteps = 100, \n         state_history = false, abstol, reltol) -> (y, tout, x)\n\nCompute the time response of a periodic system sys = (A(t),B(t),C(t),D(t)) to step input signals.  The final time tfinal, if not specified, is set equal to the period of the periodic system sys. For a discrete-time system, the final time tfinal must be commensurate with the system sampling time Ts (otherwise it is adjusted to the nearest smaller commensurate value).  The keyword argument ustep is a vector with as many components  as the inputs of sys and specifies the desired amplitudes of step inputs (default: all components are set to 1).    The keyword argument x0 is a vector, which specifies the initial state vector at time 0,  and is set to zero when omitted.  The keyword argument timesteps specifies the number of desired simulation time steps  (default: timesteps = 100). \n\nIf ns is the total number of simulation values, n the number of state components,  p the number of system outputs and m the number of system inputs, then the resulting ns×p×m array y contains the resulting time histories of the outputs of sys, such  that y[:,:,j] is the time response for the j-th input set to ustep[j] and the rest of inputs set to zero.   The vector tout contains the corresponding values of the time samples. The i-th row y[i,:,j] contains the output values at time tout[i] of the j-th step response.   If the keyword parameter value state_history = true is used, then the resulting ns×n×m arrayx contains  the resulting time histories of the state vector and  the i-th row x[i,:,j] contains the state values at time tout[i] of the j-th step response.   For a discrete-time periodic system with time-varying state dimensions, n is the maximum value of the  dimensions of the state vector over one period. The components of x[i,:,j] have trailing zero values if the  corresponding state vector dimension is less than n.   By default, the state history is not saved and x = nothing.\n\nThe total number of simulation values ns is set as follows: for a continuous-time system ns = timesteps+1  and for a discrete-time system ns = min(timesteps,tfinal/Ts)+1. \n\nFor a continuous-time model an equivalent discretized model is determined to be used for simulation, provided the time step Δ = tfinal/timesteps is commensurate with the system period T and tfinal >= T.  The discretization is performed by determining the monodromy matrix as a product of  state transition matrices of the extended state-space matrix [A(t) B(t); 0 0]  by integrating numerically the corresponding homogeneous linear ODE.   If the time step Δ is not commensurate with the period T or tfinal < T, then numerical integrations of the underlying ODE systems are performed.  The ODE solver to be employed can be  specified using the keyword argument solver, together with the required relative accuracy reltol (default: reltol = 1.e-4),  absolute accuracy abstol (default: abstol = 1.e-7) and/or  the fixed step length dt (default: dt = Ts/10).  Depending on the desired relative accuracy reltol, lower order solvers are employed for reltol >= 1.e-4,  which are generally very efficient, but less accurate. If reltol < 1.e-4, higher order solvers are employed able to cope with high accuracy demands. \n\nThe following solvers from the OrdinaryDiffEq.jl package can be selected:\n\nsolver = \"non-stiff\" - use a solver for non-stiff problems (Tsit5() or Vern9());\n\nsolver = \"stiff\" - use a solver for stiff problems (Rodas4() or KenCarp58());\n\nsolver = \"linear\" - use a special solver for linear ODEs (MagnusGL6()) with fixed time step dt;\n\nsolver = \"symplectic\" - use a symplectic Hamiltonian structure preserving solver (IRKGL16());\n\nsolver = \"auto\" - use the default solver, which automatically detects stiff problems (AutoTsit5(Rosenbrock23()) or AutoVern9(Rodas5())). \n\nFor large numbers of product terms, parallel computation of factors can be alternatively performed  by starting Julia with several execution threads.  The number of execution threads is controlled either by using the -t/--threads command line argument  or by using the JULIA_NUM_THREADS environment variable. \n\n\n\n\n\n","category":"function"},{"location":"psanalysis.html#PeriodicSystems.pseval","page":"Analysis of periodic systems","title":"PeriodicSystems.pseval","text":"pseval(psys, val) -> Gval\n\nEvaluate for a finite λ = val, the value Gval of the transfer function matrix G(λ) of the  lifted system of the discrete-time periodic system psys.  val must not be a pole of psys.\n\n\n\n\n\n","category":"function"},{"location":"pslifting.html#Conversions-to-LTI-representations","page":"Conversions to LTI representations","title":"Conversions to LTI representations","text":"","category":"section"},{"location":"pslifting.html","page":"Conversions to LTI representations","title":"Conversions to LTI representations","text":"psaverage  Computation of the averaged LTI system of a continuous-time periodic system.\npsteval  Computation of the time evaluated LTI system of a continuous-time periodic system.\nps2fls  Computation of a complex frequency-lifted LTI representation of a continuous-time periodic system. \nps2frls  Computation of a real frequency-lifted LTI representation of a continuous-time periodic system. \nps2ls  Computation of a time-lifted LTI representation of a discrete-time periodic system. \nps2spls  Computation of a sparse time-lifted LTI representation of a discrete-time periodic system. ","category":"page"},{"location":"pslifting.html","page":"Conversions to LTI representations","title":"Conversions to LTI representations","text":"psaverage\npsteval\nps2fls\nps2frls\nps2ls\nps2spls","category":"page"},{"location":"pslifting.html#PeriodicSystems.psaverage","page":"Conversions to LTI representations","title":"PeriodicSystems.psaverage","text":"psaverage(psysc) -> sys::DescriptorStateSpace\n\nCompute for the continuous-time periodic system psysc = (A(t),B(t),C(t),D(t))  the corresponding time averaged LTI system sys = (Am,Bm,Cm,Dm) over one period.  \n\n\n\n\n\n","category":"function"},{"location":"pslifting.html#PeriodicSystems.psteval","page":"Conversions to LTI representations","title":"PeriodicSystems.psteval","text":"psteval(psys,tval) -> sys::DescriptorStateSpace\n\nCompute for the periodic system psys = (A(t),B(t),C(t),D(t)) and a time value tval,  the LTI system sys = (A(tval),B(tval),C(tval),D(tval)). If A(tval) is not square, then  A(tval) is padded with zeros to form a square matrix and appropriate numbers of zero rows and zero columns are added to  B(tval) and C(tval), respectively. \n\n\n\n\n\n","category":"function"},{"location":"pslifting.html#PeriodicSystems.ps2fls","page":"Conversions to LTI representations","title":"PeriodicSystems.ps2fls","text":" ps2fls(psysc::PeriodicStateSpace, N; P) -> sys::DescriptorStateSpace\n\nBuild the frequency-lifted representation of a continuous-time periodic system.\n\nFor a continuos-time periodic system psysc = (A(t),B(t),C(t),D(t)), the (complex)  LTI state-space representation sys = (At-Nt,Bt,Ct,Dt) is built, where At, Bt, Ct and Dt  are truncated block Toeplitz matrices and Nt is a block diagonal matrix (see [1] or [2]).  N is the number of selected harmonic components in the Fourier series of system matrices  and the keyword parameter P is the number of full periods to be considered (default: P = 1). \n\nReferences\n\n[1] N. M. Wereley. Analysis and control of linear periodically time varying systems.      Ph.D. thesis, Department of Aeronautics and Astronautics, MIT, 1990.\n\n[2] S. Bittanti and P. Colaneri. Periodic Systems : Filtering and Control.     Springer-Verlag London, 2009. \n\n\n\n\n\n","category":"function"},{"location":"pslifting.html#PeriodicSystems.ps2frls","page":"Conversions to LTI representations","title":"PeriodicSystems.ps2frls","text":" ps2frls(psysc::PeriodicStateSpace, N) -> sys::DescriptorStateSpace\n\nBuild the real frequency-lifted representation of a continuous-time periodic system.\n\nFor a continuos-time periodic system psysc = (A(t),B(t),C(t),D(t)), the real  LTI state-space representation sys = (At-Nt,Bt,Ct,Dt) is built, where At, Bt, Ct and Dt  are truncated block Toeplitz matrices and Nt is a block diagonal matrix.  N is the number of selected harmonic components in the Fourier series of system matrices. \n\nNote: This is an experimental implementation based on the operator representation of periodic matrices in the ApproxFun.jl package. \n\n\n\n\n\n","category":"function"},{"location":"pslifting.html#PeriodicSystems.ps2ls","page":"Conversions to LTI representations","title":"PeriodicSystems.ps2ls","text":" ps2ls(psys::PeriodicStateSpace[, kstart]; ss = false, cyclic = false) -> sys::DescriptorStateSpace\n\nBuild the discrete-time lifted LTI system equivalent to a discrete-time periodic system. \n\nFor a discrete-time periodic system psys = (A(t),B(t),C(t),D(t)) with period T and sample time Ts,  the equivalent stacked (see [1]) LTI descriptor state-space representation  sys = (A-λE,B,C,D) is built, with the input, state and output vectors defined over time intervals of length T (instead Ts).   The optional argument kstart specifies a desired time to start the sequence of periodic matrices (default: kstart = 1).\n\nIf ss = true (default: ss = false), then all non-dynamic modes are elliminated and  a standard state-space realization (with E = I) is determined, which corresponds to the lifting techniques of [2], where only the input and output vectors are defined over time intervals of length T.  The determination of the standard lifted representation involves forming matrix products  (e.g., by explicitly forming the monodromy matrix) and therefore is potentially less suited for numerical computations.  \n\nIf cyclic = true, the cyclic reformulation of [3] is used to build a lifted standard system with  the input, state and output vectors defined over time intervals of length T.\n\nReferences\n\n[1] O. M. Grasselli and S. Longhi. Finite zero structure of linear periodic discrete-time systems.      Int. J. Systems Sci., 22:1785–1806,  1991.\n\n[2] R. A. Meyer and C. S. Burrus. A unified analysis of multirate and periodically time-varying     digital filters”, IEEE Transactions on Circuits and Systems, 22:162–167, 1975.\n\n[3] D. S. Flamm. A new shift-invariant representation for periodic systems,      Systems and Control Letters, 17:9–14, 1991.\n\n\n\n\n\n","category":"function"},{"location":"pslifting.html#PeriodicSystems.ps2spls","page":"Conversions to LTI representations","title":"PeriodicSystems.ps2spls","text":" ps2spls(psys::PeriodicStateSpace[, kstart]; cyclic = false) -> sys::DescriptorStateSpace\n\nBuild the discrete-time lifted LTI system equivalent to a discrete-time periodic system. \n\nFor a discrete-time periodic system psys = (A(t),B(t),C(t),D(t)) with period T and sample time Ts,  the equivalent stacked (see [1]) LTI descriptor state-space representation  sys = (As-λEs,Bs,Cs,Ds) is built, with the input, state and output vectors defined over time intervals of length T (instead Ts).   The optional argument kstart specifies a desired time to start the sequence of periodic matrices (default: kstart = 1). The matrices As, Es, Bs, Cs and Ds are sparce matrices as defined within the  SparseArrays.jl package. \n\nIf cyclic = true, the cyclic reformulation of [2] is used to build a lifted standard system with  the input, state and output vectors defined over time intervals of length T.\n\nReferences\n\n[1] O. M. Grasselli and S. Longhi. Finite zero structure of linear periodic discrete-time systems.      Int. J. Systems Sci., 22:1785–1806,  1991.\n\n[2] D. S. Flamm. A new shift-invariant representation for periodic systems,      Systems and Control Letters, 17:9–14, 1991.\n\n\n\n\n\n","category":"function"},{"location":"ps.html#Building-periodic-systems","page":"Building periodic systems","title":"Building periodic systems","text":"","category":"section"},{"location":"ps.html","page":"Building periodic systems","title":"Building periodic systems","text":"PeriodicStateSpace   Periodic state space system representation.\nps  Construction of periodic state-space models.\npsmrc2d  Discretization/resampling of a multirate LTI system. ","category":"page"},{"location":"ps.html","page":"Building periodic systems","title":"Building periodic systems","text":"PeriodicStateSpace\nps\npsmrc2d","category":"page"},{"location":"ps.html#PeriodicSystems.PeriodicStateSpace","page":"Building periodic systems","title":"PeriodicSystems.PeriodicStateSpace","text":"PeriodicStateSpace(A::PM, B::PM, C::PM, D::PM) -> psys::PeriodicStateSpace{PM}\n\nConstruct a PeriodicStateSpace object from a quadruple of periodic matrix objects. \n\nThe periodic matrix objects A, B, C, D specifies the periodic matrices A(t), B(t), C(t) and D(t) of a linear periodic time-varying state space model in the continuous-time form\n\n dx(t)/dt = A(t)x(t) + B(t)u(t) ,\n y(t)     = C(t)x(t) + D(t)u(t) ,\n\nor in the discrete-time form\n\n x(t+1)  = A(t)x(t) + B(t)u(t) ,\n y(t)    = C(t)x(t) + D(t)u(t) ,\n\nwhere x(t), u(t) and y(t) are the system state vector,  system input vector and system output vector, respectively,  and t is the continuous or discrete time variable.  The system matrices satisfy A(t) = A(t+T₁), B(t) = B(t+T₂), C(t) = C(t+T₃), D(t) = D(t+T₄),   i.e., are periodic with periods T₁, T₂, T₃ and T₄, respectively.  The different periods must be commensurate (i.e., their ratios must be rational numbers with numerators and denominators up to at most 4 decimal digits).  All periodic matrix objects must have the same type PM, where PM stays for one of the supported periodic matrix types, i.e.,  PeriodicMatrix, SwitchingPeriodicMatrix, PeriodicArray, SwitchingPeriodicArray,  PeriodicFunctionMatrix, PeriodicSymbolicMatrix, HarmonicArray, FourierFunctionMatrix, PeriodicTimeSeriesMatrix or PeriodicSwitchingMatrix. \n\n\n\n\n\n","category":"type"},{"location":"ps.html#PeriodicSystems.ps","page":"Building periodic systems","title":"PeriodicSystems.ps","text":"ps([PMT::Type,] A::PM1, B::PM2, C::PM3, D::PM4) -> psys::PeriodicStateSpace\n\nConstruct a PeriodicStateSpace object from a quadruple of periodic matrix objects. \n\nThe periodic matrix objects A, B, C, D specifies the periodic matrices A(t), B(t), C(t) and D(t) of a linear periodic time-varying state space model in the continuous-time form\n\n dx(t)/dt = A(t)x(t) + B(t)u(t) ,\n y(t)     = C(t)x(t) + D(t)u(t) ,\n\nor in the discrete-time form\n\n x(t+1)  = A(t)x(t) + B(t)u(t) ,\n y(t)    = C(t)x(t) + D(t)u(t) ,\n\nwhere x(t), u(t) and y(t) are the system state vector,  system input vector and system output vector, respectively,  and t is the continuous or discrete time variable.  The system matrices satisfy A(t) = A(t+T₁), B(t) = B(t+T₂), C(t) = C(t+T₃), D(t) = D(t+T₄),   i.e., are periodic with periods T₁, T₂, T₃ and T₄, respectively.  The different periods must be commensurate (i.e., their ratios must be rational numbers with numerators and denominators up to at most 4 decimal digits).  The periodic matrix objects A, B, C, D can have different types PM1, PM2, PM3, PM4, respectively, where for a contiuous-time system  PM1, PM2, PM3, PM4 must be one of the supported continuous-time periodic matrix types, i.e.,  PeriodicFunctionMatrix, PeriodicSymbolicMatrix, HarmonicArray, FourierFunctionMatrix or PeriodicTimeSeriesMatrix, while for a discrete-time system  PM1, PM2, PM3, PM4 must be one of the supported discrete-time periodic matrix types, i.e.,  PeriodicMatrix or PeriodicArray.   Any of the objects A, B, C, D can be also specified as a real matrix or vector of appropriate size. \n\nIf PMT is not specified, the resulting psys has periodic matrices of the same type PT, such that PT is either the common type of all matrix objects or PT = PeriodicFunctionMatrix for a continuous-time system or  PT = PeriodicMatrix for a discrete-time system.  If PMT is specified, the resulting psys has periodic matrices of the same type PMT. \n\nOther convenience constructors are implemented as follows: \n\nps([PMT::Type,] A, B, C) -> psys::PeriodicStateSpace\n\nto construct a PeriodicStateSpace object for a quadruple of the form (A,B,C,0);\n\nps(D) -> psys::PeriodicStateSpace\n\nto construct a PeriodicStateSpace object for a quadruple of the form ([],[],[],D);\n\nps([PMT::Type,] A, B, C, D, period) -> psys::PeriodicStateSpace\n\nto construct a PeriodicStateSpace object with a desired period for a quadruple (A,B,C,D); all objects A, B, C, D can be also specified as real matrices or vectors of appropriate sizes. \n\nps([PMT::Type,] A, B, C, period) -> psys::PeriodicStateSpace\n\nto construct a PeriodicStateSpace object with a desired period for a quadruple (A,B,C,0); all objects A, B, C can be also specified as real matrices or vectors of appropriate sizes. \n\nps(sys::DescriptorStateSpace, period) -> psys::PeriodicStateSpace\n\nto construct a PeriodicStateSpace object with a desired period for a quadruple (sys.A,sys.B,sys.C,sys.D) (sys.E = I is assumed).\n\n\n\n\n\n","category":"function"},{"location":"ps.html#PeriodicSystems.psmrc2d","page":"Building periodic systems","title":"PeriodicSystems.psmrc2d","text":" psmrc2d(sys, Ts; ki, ko) -> psys::PeriodicStateSpace{PeriodicMatrix}\n\nPerform the multirate discretization of a linear time-invariant system.\n\nFor a continuous-time state-space system sys = (A,B,C,D), a basic sampling time Ts,  and the integer vectors ki and ko containing, respectively, the numbers of  input and output sampling subperiods, the corresponding discretized  periodic system psys = (Ap,Bp,Cp,Dp) of period T = n*Ts is determined,  where n is the least common multiple of the integers contained in ki and ko. For a continuous-time system sys  a zero-order hold based discretization method is used, such that the i-th input  is constant during intervals of length ki[i]*Ts.  An output hold device is used to provide constant intersample outputs, such that the i-th output is constant during intervals of length ko[i]*Ts.  For a discrete-time system with a defined sample time Δ,  an input and output resampling is performed using Δ as basic   sample time and the value of Ts is ignored.  If the system sample time is not defined, then the value of Ts is used as the basic sample time. \n\n\n\n\n\n","category":"function"},{"location":"psstab.html#Stabilization-of-periodic-systems","page":"Stabilization of periodic systems","title":"Stabilization of periodic systems","text":"","category":"section"},{"location":"psstab.html","page":"Stabilization of periodic systems","title":"Stabilization of periodic systems","text":"Periodic state feedback controller and estimator design ","category":"page"},{"location":"psstab.html","page":"Stabilization of periodic systems","title":"Stabilization of periodic systems","text":"pclqr  LQ-optimal state feedack stabilization of continuous-time periodic systems \npclqry LQ-optimal state feedack stabilization with output weighting of continuous-time periodic systems \npdlqr  LQ-optimal state feedack stabilization of discrete-time periodic systems \npdlqry LQ-optimal state feedack stabilization with output weighting of discrete-time periodic systems \npckeg  Kalman estimator gain matrix for continuous-time periodic systems \npckegw  Kalman estimator gain matrix for continuous-time periodic systems with noise inputs\npdkeg  Kalman estimator gain matrix for periodic systems \npdkegw  Kalman estimator gain matrix for periodic systems with noise inputs","category":"page"},{"location":"psstab.html","page":"Stabilization of periodic systems","title":"Stabilization of periodic systems","text":"Periodic output feedback controller design ","category":"page"},{"location":"psstab.html","page":"Stabilization of periodic systems","title":"Stabilization of periodic systems","text":"pcpofstab_sw Stabilization of continuous-time periodic systems using switching periodic output feedback.\npcpofstab_hr Stabilization of continuous-time periodic systems using harmonic output feedback.\npdpofstab_sw Stabilization of discrete-time periodic systems using switching periodic output feedback.\npdpofstab_hr Stabilization of discrete-time periodic systems using discretized harmonic periodic output feedback.\npclqofc_sw LQ-optimal stabilization of continuous-time periodic systems using switching periodic output feedback.\npclqofc_hr LQ-optimal stabilization of continuous-time periodic systems using harmonic output feedback.\npdlqofc LQ-optimal stabilization of discrete-time periodic systems using periodic output feedback.\npdlqofc_sw LQ-optimal stabilization of discrete-time periodic systems using switching periodic output feedback.","category":"page"},{"location":"psstab.html","page":"Stabilization of periodic systems","title":"Stabilization of periodic systems","text":"pclqr\npclqry\npdlqr\npdlqry\npckeg\npckegw\npdkeg\npdkegw\npcpofstab_sw\npcpofstab_hr\npdpofstab_sw\npdpofstab_hr\npclqofc_sw\npclqofc_hr\npdlqofc\npdlqofc_sw","category":"page"},{"location":"psstab.html#PeriodicSystems.pclqr","page":"Stabilization of periodic systems","title":"PeriodicSystems.pclqr","text":" pclqr(psys, Q, R, S; intpol = true, kwargs...) -> (F, EVALS)\n\nCompute the optimal periodic stabilizing gain matrix F(t), such that for a continuous-time periodic state-space model  psys of the form\n\n  .\n  x(t) = A(t)x(t) + B(t)u(t) + Bw(t)w(t)\n  y(t) = C(t)x(t) + D(t)u(t) + Dw(t)w(t),\n\nthe state feedback control law\n\n u(t) = F(t)x(t)\n\nminimizes the quadratic index\n\n J = Integral {x'(t)Q(t)x(t) + u(t)'R(t)u(t) + 2*x'(t)S(t)u(t)} dt.\n\nFor a system of order n with m inputs, Q(t) and R(t) are n×n and m×m symmetric matrices, respectively, and S(t) is an n×m matrix.                 The matrix S is set to zero when omitted. The dimension of u(t) is deduced from the dimension of R(t).  R, Q and S can be alternatively provided as constant real matrices. \n\nAlso returned are the closed-loop characteristic exponents EVALS of A(t)+B(t)F(t).\n\nFor intpol = true (default), the resulting periodic gain F(t) is computed from the  stabilizing solution of a continuous-time periodic matrix differential Riccati equation using interpolation based formulas.  If intpol = false, the gain F(t) is computed from a multi-point solution of the Riccati differential equation  by the integration of the corresponding ODE using the nearest point value as initial condition.  This option is not recommended to be used jointly with symplectic integrators, which are used by default.   \n\nThe keyword arguments contained in kwargs are those used for the function PeriodicMatrixEquations.prcric (excepting intpol). \n\nNote: The pair (A(t),B(t)) must be stabilizable, R must be positive definite and [Q S;S' R] must be nonnegative definite .\n\n\n\n\n\n","category":"function"},{"location":"psstab.html#PeriodicSystems.pclqry","page":"Stabilization of periodic systems","title":"PeriodicSystems.pclqry","text":" pclqry(psys, Q, R, S; intpol = true, kwargs...) -> (F, EVALS)\n\nCompute the optimal periodic stabilizing gain matrix F(t), such that for a periodic  continuous-time state-space model psys of the form        .       x(t) = A(t)x(t) + B(t)u(t) + Bw(t)w(t)        y(t) = C(t)x(t) + D(t)u(t) + Dw(t)w(t) ,\n\nthe state feedback control law\n\n u(t) = F(t)x(t)\n\nminimizes the quadratic index\n\n J = Integral {y'(t)Q(t)y(t) + u'(t)R(t)u(t) + 2*y'(t)S(t)u(t)} dt\n\nFor a system with m control inputs u(t) and p outputs, Q(t) and R(t) are p×p and m×m symmetric matrices, respectively, and S(t) is an p×m matrix.  The dimension of u(t) is deduced from the dimension of R(t).  R, Q and S can be alternatively provided as constant real matrices.                              The matrix S is set to zero when omitted. \n\nAlso returned are the closed-loop characteristic exponents EVALS of A(t)+B(t)F(t).\n\nFor intpol = true (default), the resulting periodic gain F(t) is computed from the  stabilizing solution of a continuous-time periodic matrix differential Riccati equation using interpolation based formulas.  If intpol = false, the gain F(t) is computed from a multi-point solution of the Riccati differential equation  by the integration of the corresponding ODE using the nearest point value as initial condition.  This option is not recommended to be used jointly with symplectic integrators, which are used by default.   \n\nThe keyword arguments contained in kwargs are those used for the function PeriodicMatrixEquations.prcric (excepting intpol).  \n\nNote: The pair (A(t),B(t)) must be stabilizable and [Q S;S' R] must be nonnegative definite.\n\n\n\n\n\n","category":"function"},{"location":"psstab.html#PeriodicSystems.pdlqr","page":"Stabilization of periodic systems","title":"PeriodicSystems.pdlqr","text":" pdlqr(psys, Q, R, S; kwargs...) -> (F, EVALS)\n\nCompute the optimal periodic stabilizing gain matrix F(t), such that for a discrete-time periodic state-space model  psys of the form\n\nx(t+1) = A(t)x(t) + B(t)u(t) + Bw(t)w(t) \n  y(t) = C(t)x(t) + D(t)u(t) + Dw(t)w(t)\n\nthe state feedback control law\n\n u(t) = F(t)x(t)\n\nminimizes the quadratic index\n\n J = Sum {x'(t)Q(t)x(t) + u'(t)R(t)u(t) + 2*x'(t)S(t)u(t)}\n\nFor a system of order n(t) with m control inputs in u(t), Q(t) and R(t) are n(t)×n(t) and m×m symmetric matrices, respectively, and S(t) is an n(t)×m matrix.                 The matrix S is set to zero when omitted. The dimension of u(t) is deduced from the dimension of R(t).  R, Q and S can be alternatively provided as constant real matrices. \n\nAlso returned are the closed-loop characteristic exponents EVALS of A(t)+B(t)F(t).\n\nThe keyword arguments contained in kwargs are those used for the function  PeriodicMatrixEquations.prdric.\n\nNote: The pair (A(t),B(t)) must be stabilizable and [Q S;S' R] must be nonnegative definite.\n\n\n\n\n\n","category":"function"},{"location":"psstab.html#PeriodicSystems.pdlqry","page":"Stabilization of periodic systems","title":"PeriodicSystems.pdlqry","text":" pdlqry(psys, Q, R, S; kwargs...) -> (F, EVALS)\n\nCompute the optimal periodic stabilizing gain matrix F(t), such that for a periodic discrete-time  state-space model psys of the form\n\nx(t+1) = A(t)x(t) + B(t)u(t) + Bw(t)w(t)\n  y(t) = C(t)x(t) + D(t)u(t) + Dw(t)w(t),\n\nthe state feedback control law\n\n u(t) = F(t)x(t)\n\nminimizes the quadratic index\n\n J = Sum {y'(t)Q(t)y(t) + u'(t)R(t)u(t) + 2*y'(t)S(t)u(t)}\n\nFor a system with m control inputs u(t) and p outputs, Q(t) and R(t) are p×p and m×m symmetric matrices, respectively, and S(t) is a p×m matrix.   The dimension of u(t) is deduced from the dimension of R(t).  R, Q and S can be alternatively provided as constant real matrices.                The matrix S is set to zero when omitted. \n\nAlso returned are the closed-loop characteristic exponents EVALS of A(t)+B(t)F(t).\n\nThe keyword arguments contained in kwargs are those used for the function PeriodicMatrixEquations.prdric. \n\nNote: The pair (A(t),B(t)) must be stabilizable and [Q S;S' R] must be nonnegative definite.\n\n\n\n\n\n","category":"function"},{"location":"psstab.html#PeriodicSystems.pckeg","page":"Stabilization of periodic systems","title":"PeriodicSystems.pckeg","text":" pckeg(psys, Qw, Rv, Sn; intpol = true, kwargs...) -> (L, EVALS)\n\nCompute the Kalman estimator periodic gain matrix L(t) for a continuous-time periodic state-space model  psys of the form\n\n  .\n  x(t) = A(t)x(t) + B(t)u(t) + w(t)\n  y(t) = C(t)x(t) + D(t)u(t) + v(t)\n\nand the noise covariance data E{w(t)w(t)'} = Qw(t), E{v(t)v(t)'} = Rv(t), E{w(t)v(t)'} = Sn(t),  for a Kalman estimator \n\n   .\n  xe(t) = A(t)xe(t) + B(t)u(t) + L(t)(y(t)-C(t)xe(t)-D(t)u(t))\n\nFor a system of order n with p outputs, Qw and Rv are n×n and p×p symmetric matrices, respectively, and Sn is an n×p matrix.                 Qw, Rv and Sn can be alternatively provided as constant real matrices.  The matrix Sn is set to zero when omitted. \n\nAlso returned are the closed-loop characteristic exponents EVALS of A(t)-L(t)C(t).\n\nFor intpol = true (default), the resulting periodic gain L(t) is computed from the  stabilizing solution of a continuous-time periodic matrix differential Riccati equation using interpolation based formulas.  If intpol = false, the gain L(t) is computed from a multi-point solution of the Riccati differential equation  by the integration of the corresponding ODE using the nearest point value as initial condition.  This option is not recommended to be used jointly with symplectic integrators, which are used by default.   \n\nThe keyword arguments contained in kwargs are those used for the function PeriodicMatrixEquations.pfcric (excepting intpol). \n\nNote: The pair (A(t),C(t)) must be detectable and [Qw Sn;Sn' Rv] must be nonnegative definite.\n\n\n\n\n\n","category":"function"},{"location":"psstab.html#PeriodicSystems.pckegw","page":"Stabilization of periodic systems","title":"PeriodicSystems.pckegw","text":" pckegw(psys, Qw, Rv, Sn; intpol = true, kwargs...) -> (L, EVALS)\n\nCompute the Kalman estimator periodic gain matrix L(t) for a continuous-time periodic state-space model  psys of the form\n\n  .\n  x(t) = A(t)x(t) + B(t)u(t) + Bw(t)w(t)\n  y(t) = C(t)x(t) + D(t)u(t) + Dw(t)w(t) + v(t)\n\nand the noise covariance data E{w(t)w(t)'} = Qw(t), E{v(t)v(t)'} = Rv(t), E{w(t)v(t)'} = Sn(t),  for a Kalman estimator \n\n   .\n  xe(t) = A(t)xe(t) + B(t)u(t) + L(t)(y(t)-C(t)xe(t)-D(t)u(t))\n\nFor a system with mw disturbance inputs and p outputs, Qw and Rv are mw×mw and p×p symmetric matrices, respectively, and Sn is an mw×p matrix.                 Qw, Rv and Sn can be alternatively provided as constant real matrices.                The matrix Sn is set to zero when omitted. The number of disturbance inputs mw is defined by the order of matrix Qw.  Also returned are the closed-loop characteristic exponents EVALS of A(t)-L(t)C(t).\n\nFor intpol = true (default), the resulting periodic gain L(t) is computed from the  stabilizing solution of a continuous-time periodic matrix differential Riccati equation using interpolation based formulas.  If intpol = false, the gain L(t) is computed from a multi-point solution of the Riccati differential equation  by the integration of the corresponding ODE using the nearest point value as initial condition.  This option is not recommended to be used jointly with symplectic integrators, which are used by default.   \n\nThe keyword arguments contained in kwargs are those used for the function PeriodicMatrixEquations.pfcric (excepting intpol). \n\nNote: The pair (A(t),C(t)) must be detectable,  Qw must be non-negative definite,  Rv must be positive definite and [Qw Sn; Sn' Rv] must be nonnegative definite.\n\n\n\n\n\n","category":"function"},{"location":"psstab.html#PeriodicSystems.pdkeg","page":"Stabilization of periodic systems","title":"PeriodicSystems.pdkeg","text":" pdkeg(psys, Qw, Rv, Sn; kwargs...) -> (L, EVALS)\n\nCompute the Kalman estimator periodic gain matrix L(t) for a discrete-time periodic state-space model  psys of the form\n\nx(t+1) = A(t)x(t) + B(t)u(t) + w(t)\n  y(t) = C(t)x(t) + D(t)u(t) + v(t)\n\nand the noise covariance data E{w(t)w(t)'} = Qw(t), E{v(t)v(t)'} = Rv(t), E{w(t)v(t)'} = Sn(t),  for a Kalman estimator \n\n  xe(t+1) = A(t)xe(t) + B(t)u(t) + L(t)(y(t)-C(t)xe(t)-D(t)u(t))\n\nFor a system of order n with p outputs, Qw and Rv are n×n and p×p symmetric matrices, respectively, and Sn is an n×p matrix.                 Qw, Rv and Sn can be alternatively provided as constant real matrices.                The matrix Sn is set to zero when omitted. \n\nAlso returned are the closed-loop characteristic exponents EVALS of A(t)-L(t)C(t).\n\nThe keyword arguments contained in kwargs are those used for the function PeriodicMatrixEquations.pfdric. \n\nNote: The pair (A(t),C(t)) must be detectable and [Qw Sn;Sn' Rv] must be nonnegative definite.\n\n\n\n\n\n","category":"function"},{"location":"psstab.html#PeriodicSystems.pdkegw","page":"Stabilization of periodic systems","title":"PeriodicSystems.pdkegw","text":" pdkegw(psys, Qw, Rv, Sn; kwargs...) -> (L, EVALS)\n\nCompute the Kalman estimator periodic gain matrix L(t) for a discrete-time periodic state-space model  psys of the form\n\nx(t+1) = A(t)x(t) + B(t)u(t) + Bw(t)w(t)\n  y(t) = C(t)x(t) + D(t)u(t) + Dw(t)w(t) + v(t)\n\nand the noise covariance data E{w(t)w(t)'} = Qw(t), E{v(t)v(t)'} = Rv(t), E{w(t)v(t)'} = Sn(t),  for a Kalman estimator \n\n  xe(t+1) = A(t)xe(t) + B(t)u(t) + L(t)(y(t)-C(t)xe(t)-D(t)u(t))\n\nFor a system with mw disturbance inputs and p outputs, Qw and Rv are mw×mw and p×p symmetric matrices, respectively, and Sn is an mw×p matrix.   Qw, Rv and Sn can be alternatively provided as constant real matrices.                The matrix Sn is set to zero when omitted. The number of disturbance inputs mw is defined by the order of matrix Qw. \n\nAlso returned are the closed-loop characteristic exponents EVALS of A(t)-L(t)C(t).\n\nThe keyword arguments contained in kwargs are those used for the function PeriodicMatrixEquations.pfdric. \n\nNote: The pair (A(t),C(t)) must be detectable,  Qw must be non-negative definite,  Rv must be positive definite and [Qw Sn; Sn' Rv] must be nonnegative definite.\n\n\n\n\n\n","category":"function"},{"location":"psstab.html#PeriodicSystems.pcpofstab_sw","page":"Stabilization of periodic systems","title":"PeriodicSystems.pcpofstab_sw","text":"pcpofstab_sw(psys, ts = missing; K = 100, vinit, optimizer, maxit, vtol, Jtol, gtol, show_trace) -> (Fstab,info)\n\nFor a continuous-time periodic system psys = (A(t), B(t), C(t), D(t)) of period T determine a periodic output feedback gain matrix  Fstab(t) of the same period and switching times ts,   such that the characteristic exponents Λ of the closed-loop state-matrix A(t)+B(t)*Fstab(t)*inv(I-D(t)*Fstab(t))*C(t) are stable.  The matrices of the system psys are of type PeriodicFunctionMatrix.  The ns switching times contained in the vector ts must satisfy 0 = ts[1] < ts[2] < ... < ts[ns] < T.  If ts = missing, then ts = [0] is used by default (i.e., constant output feedback). \n\nThe output feedback gain Fstab(t) is computed as Fstab(t) = inv(I+F(t)D(t))*F(t), with F(t)  defined as \n\n F(t) = F_i  for t ∈ [ts[i],ts[i+1]) and i ∈ {1, ..., ns-1} or \n F(t) = F_ns for t ∈ [ts[ns],T)\n\nwhere F_i is the i-th gain.   The resulting periodic matrix Fstab(t) is of type PeriodicSwitchingMatrix. The corresponding closed-loop periodic system can be obtained using the function psfeedback.\n\nFor the determination of the optimal feedback gains F_i for i = 1, ...., ns an optimization-based approach is employed using  tools available in the optimization package Optim.jl.  By default, the gradient-free Nelder-Mead local search method for unconstrained minimizations  is employed using the keyword argument setting optimizer = Optim.NelderMead().    The alternative gradient-free Simulated Annealing global search method can be selected with optimizer = Optim.SimulatedAnnealing(). \n\nFor a system with m inputs and p outputs,  an internal optimization variable v is used, formed as an m×p×ns array with v[:,:,i] := F_i, for i = 1, ..., ns.  The performance index to be minimized is J := sdeg(v),  where sdeg(v) is the stability degree defined as the largest real part of the characteristic exponents  of Af(t) := A(t)+B(t)*F(t)*C(t). The keyword argument K is the number of factors used to express the monodromy matrix of Af(t) (default: K = 100),  when evaluating the characteristic exponents.    By default, v is initialized as v = 0 (i.e., a zero array of appropriate dimensions).  The keyword argument vinit = v0 can be used to initialize v with an arbitrary m×p×ns array v0.  \n\nThe optimization process is controlled using several keyword parameters.  The keyword parameter maxit can be used to specify the maximum number of iterations to be performed (default: maxit = 1000). The keyword argument vtol can be used to specify the absolute tolerance in  the changes of the optimization variable v (default: vtol = 0). The keyword argument Jtol can be used to specify the relative tolerance in the changes of the optimization criterion J (default: Jtol = 0),  while gtol is the method specific main convergence tolerance (default: gtol = 1e-3).  With the keyword argument show_trace = true,  a trace of the optimization algorithm's state is shown on stdout (default show_trace = false).    (see the documentation of the Optim.jl package for additional information). \n\nThe returned named tuple info contains (fopt, sdeg0, sdeg, vopt, optres), where:\n\ninfo.fopt is the resulting value of the optimal performance J;\n\ninfo.sdeg0 is the initial stability degree of the closed-loop characteristic exponents;\n\ninfo.sdeg is the resulting stability degree of the closed-loop characteristic exponents;\n\ninfo.vopt is the resulting value of the optimization variable v; \n\ninfo.optres is the result returned by the Optim.optimize(...) function of the  Optim.jl package;  several functions provided by this package can be used to inquire various information related to the optimization results (see the documention of this package). \n\n\n\n\n\n","category":"function"},{"location":"psstab.html#PeriodicSystems.pcpofstab_hr","page":"Stabilization of periodic systems","title":"PeriodicSystems.pcpofstab_hr","text":"pcpofstab_hr(psys,  nh = 0; K = 100, vinit, optimizer = \"local\", maxiter, vtol, Jtol, gtol, show_trace) -> (Fstab,info)\n\nFor a continuoous-time periodic system psys = (A(t), B(t), C(t), D(t)) of period T determine a periodic output feedback gain matrix  Fstab(t) of the same period,   such that the characteristic exponents Λ of the closed-loop state-matrix A(t)+B(t)*Fstab(t)*inv(I-D(t)*Fstab(t))*C(t) are stable.  The matrices of the system psys are of type HarmonicArray. \n\nThe resulting output feedback gain Fstab(t) is computed as Fstab(t) = inv(I+F(t)D(t))*F(t), with F(t) in the harmonic representation form \n\n              nh\n F(t) = F0 +  ∑ ( Fc_i*cos(i*t*2*π/T)+Fs_i*sin(i*2*π*t/T) ) ,\n             i=1\n\nwhere F0 is the constant term, Fc_i is the i-th cosinus coefficient matrix and Fs_i is the i-th sinus coefficient matrix.  By default, the number of harmonics is nh = 0 (i.e., constant output feedback is used). The resulting periodic matrix Fstab(t) is of type HarmonicArray. The corresponding closed-loop periodic system can be obtained using the function psfeedback.\n\nFor the determination of the optimal feedback gains F0, Fc_i and Fs_i for i = 1, ...., nh  an optimization-based approach is employed using using  tools available in the optimization package Optim.jl.  By default, the gradient-free Nelder-Mead local search method for unconstrained minimizations  is employed using the keyword argument setting optimizer = Optim.NelderMead().    The alternative gradient-free Simulated Annealing global search method can be selected with  optimizer = Optim.SimulatedAnnealing(). \n\nFor a system with m inputs and p outputs,  an internal optimization variable v is used, formed as an m*p*(2*nh+1) dimensional vector  v := [vec(F0); vec(Fc_1); vec(Fs_1), ... ; vec(Fc_nh); vec(Fs_nh)].  The performance index to be minimized is J := sdeg(v),  where sdeg(v) is the stability degree defined as the largest real part of the characteristic exponents  of Af(t) := A(t)+B(t)*F(t)*C(t). The keyword argument K is the number of factors used to express the monodromy matrix of Af(t) (default: K = 100),  when evaluating the characteristic exponents.    By default, v is initialized as v = 0 (i.e., a zero array of appropriate dimensions).  The keyword argument vinit = v0 can be used to initialize v with an arbitrary m*p*(2*nh+1) array v0.  \n\nThe optimization process is controlled using several keyword parameters.  The keyword parameter maxiter = maxit can be used to specify the maximum number of iterations to be performed (default: maxit = 1000). The keyword argument vtol can be used to specify the absolute tolerance in  the changes of the optimization variable v (default: vtol = 0). The keyword argument Jtol can be used to specify the relative tolerance in the changes of the optimization criterion J (default: Jtol = 0),  while gtol is the method specific main convergence tolerance (default: gtol = 1e-3).  With the keyword argument show_trace = true,  a trace of the optimization algorithm's state is shown on stdout (default show_trace = false).    (see the documentation of the Optim.jl package for additional information). \n\nThe returned named tuple info contains (fopt, sdeg0, sdeg, vopt, optres), where:\n\ninfo.fopt is the resulting value of the optimal performance J;\n\ninfo.sdeg0 is the initial stability degree of the closed-loop characteristic exponents;\n\ninfo.sdeg is the resulting stability degree of the closed-loop characteristic exponents;\n\ninfo.vopt is the resulting value of the optimization variable v; \n\ninfo.optres is the result returned by the Optim.optimize(...) function of the  Optim.jl package;  several functions provided by this package can be used to inquire various information related to the optimization results (see the documention of this package). \n\n\n\n\n\n","category":"function"},{"location":"psstab.html#PeriodicSystems.pdpofstab_sw","page":"Stabilization of periodic systems","title":"PeriodicSystems.pdpofstab_sw","text":"pdpofstab_sw(psys, ns = missing; vinit, optimizer, maxit, vtol, Jtol, gtol, show_trace) -> (Fstab,info)\n\nFor a discrete-time periodic system psys = (A(t), B(t), C(t), D(t)) determine a periodic output feedback gain matrix  Fstab(t) of the same period,   such that the characteristic exponents Λ of the closed-loop state-matrix A(t)+B(t)*Fstab(t)*inv(I-D(t)*Fstab(t))*C(t) are stable.  The matrices of the system psys are of type PeriodicArray.  The switching times for the resulting switching periodic gain Fstab(t) are specified by the  N-dimensional integer vector ns.  By default, ns = [N], where N is the maximal number of samples (i.e., N = psys.period/psys.Ts), which corresponds to a constant gain.  \n\nThe output feedback gain Fstab(t) is computed as Fstab(t) = inv(I+F(t)D(t))*F(t), with F(t)  defined as \n\nF(t) = F_i for t ∈ [ns[i]Δ,ns[i+1]Δ) and i ∈ {1, ..., N-1}, or\nF(t) = F_N for t ∈ [ns[N]Δ,T),\n\nwhere T is the system period (i.e., T = psys.period), Δ is the system sampling time (i.e., Δ = psys.Ts),   and F_i is the i-th gain.  The resulting periodic matrix Fstab(t) is of type SwitchingPeriodicArray. The corresponding closed-loop periodic system can be obtained using the function psfeedback.\n\nFor the determination of the optimal feedback gains F_i for i = 1, ...., N  an optimization-based approach is employed using using  tools available in the optimization package Optim.jl.  By default, the gradient-free Nelder-Mead local search method for unconstrained minimizations  is employed using the keyword argument setting optimizer = Optim.NelderMead().    The alternative gradient-free Simulated Annealing global search method can be selected with optimizer = Optim.SimulatedAnnealing(). \n\nFor a system with m inputs and p outputs,  an internal optimization variable v is used, defined as an m×p×N array.  By default, v is initialized as v = 0 (i.e., a zero array of appropriate dimensions).  The keyword argument vinit = v0 can be used to initialize v with an arbitrary m×p×N array v0.  \n\nThe performance index to be minimized is J := sdeg(v),  where sdeg(v) is the stability degree defined as the largest modulus of the characteristic exponents  of Af(t) := A(t)+B(t)*F(t)*C(t). The optimization process is controlled using several keyword parameters.  The keyword parameter maxit can be used to specify the maximum number of iterations to be performed (default: maxit = 1000). The keyword argument vtol can be used to specify the absolute tolerance in  the changes of the optimization variable v (default: vtol = 0). The keyword argument Jtol can be used to specify the relative tolerance in the changes of the optimization criterion J (default: Jtol = 0),  while gtol is the method specific main convergence tolerance (default: gtol = 1e-3).  With the keyword argument show_trace = true,  a trace of the optimization algorithm's state is shown on stdout (default show_trace = false).    (see the documentation of the Optim.jl package for additional information). \n\nThe returned named tuple info contains (fopt, sdeg0, sdeg, vopt, optres), where:\n\ninfo.fopt is the resulting value of the optimal performance J;\n\ninfo.sdeg0 is the initial stability degree of the closed-loop characteristic exponents;\n\ninfo.sdeg is the resulting stability degree of the closed-loop characteristic exponents;\n\ninfo.vopt is the resulting value of the optimization variable v; \n\ninfo.optres is the result returned by the Optim.optimize(...) function of the  Optim.jl package;  several functions provided by this package can be used to inquire various information related to the optimization results (see the documention of this package). \n\n\n\n\n\n","category":"function"},{"location":"psstab.html#PeriodicSystems.pdpofstab_hr","page":"Stabilization of periodic systems","title":"PeriodicSystems.pdpofstab_hr","text":"pdpofstab_hr(psys, nh = 0; vinit, optimizer, maxit, vtol, Jtol, gtol, show_trace) -> (Fstab,info)\n\nFor a discrete-time periodic system psys = (A(t), B(t), C(t), D(t)) of period T determine a periodic output feedback gain matrix  Fstab(t) of the same period,   such that the characteristic exponents Λ of the closed-loop state-matrix A(t)+B(t)*Fstab(t)*inv(I-D(t)*Fstab(t))*C(t) are stable.  The matrices of the system psys are of type HarmonicArray. \n\nThe resulting output feedback gain Fstab(t) is of type PeriodicMatrix and is computed as Fstab(t) = inv(I+F(t)D(t))*F(t), with F(t), of type PeriodicMatrix, built by sampling, with the sample time Δ = abs(psys.Ts), the harmonic representation form \n\n              nh\nFh(t) = F0 +  ∑ ( Fc_i*cos(i*t*2*π/T)+Fs_i*sin(i*2*π*t/T) ) ,\n             i=1\n\nwhere F0 is the constant term, Fc_i is the i-th cosinus coefficient matrix and Fs_i is the i-th sinus coefficient matrix.  F(t) is defined as  F(t) = Fh((Δ(i-1)))' for t ∈ [Δ(i-1), Δi), i = 1, ..., T/Δ.  By default, the number of harmonics is nh = 0 (i.e., constant output feedback is used).  The corresponding closed-loop periodic system can be obtained using the function psfeedback.\n\nFor the determination of the optimal feedback gains F0, Fc_i and Fs_i for i = 1, ...., nh  an optimization-based approach is employed using using  tools available in the optimization package Optim.jl.  By default, the gradient-free Nelder-Mead local search method for unconstrained minimizations  is employed using the keyword argument setting optimizer = Optim.NelderMead().    The alternative gradient-free Simulated Annealing global search method can be selected with  optimizer = Optim.SimulatedAnnealing(). \n\nFor a system with m inputs and p outputs,  an internal optimization variable v is used, formed as an m*p*(2*nh+1) dimensional vector  v := [vec(F0); vec(Fc_1); vec(Fs_1), ... ; vec(Fc_nh); vec(Fs_nh)]'.  The performance index to be minimized isJ := sdeg(v),  wheresdeg(v)is the stability degree defined as the largest modulus of the  characteristic exponents  ofAf(t) := A(t)+B(t)F(t)C(t).  By default,vis initialized asv = 0(i.e., a zero array of appropriate dimensions).  The keyword argumentvinit = v0can be used to initializevwith an arbitrarymp(2*nh+1)arrayv0`.  \n\nThe optimization process is controlled using several keyword parameters.  The keyword parameter maxiter = maxit can be used to specify the maximum number of iterations to be performed (default: maxit = 1000). The keyword argument vtol can be used to specify the absolute tolerance in  the changes of the optimization variable v (default: vtol = 0). The keyword argument Jtol can be used to specify the relative tolerance in the changes of the optimization criterion J (default: Jtol = 0),  while gtol is the method specific main convergence tolerance (default: gtol = 1e-3).  With the keyword argument show_trace = true,  a trace of the optimization algorithm's state is shown on stdout (default show_trace = false).    (see the documentation of the Optim.jl package for additional information). \n\nThe returned named tuple info contains (fopt, sdeg0, sdeg, vopt, optres), where:\n\ninfo.fopt is the resulting value of the optimal performance J;\n\ninfo.sdeg0 is the initial stability degree of the closed-loop characteristic exponents;\n\ninfo.sdeg is the resulting stability degree of the closed-loop characteristic exponents;\n\ninfo.vopt is the resulting value of the optimization variable v; \n\ninfo.optres is the result returned by the Optim.optimize(...) function of the  Optim.jl package;  several functions provided by this package can be used to inquire various information related to the optimization results (see the documention of this package). \n\n\n\n\n\n","category":"function"},{"location":"psstab.html#PeriodicSystems.pclqofc_sw","page":"Stabilization of periodic systems","title":"PeriodicSystems.pclqofc_sw","text":"pclqofc_sw(psys, Q, R, ts = missing; K = 1, sdeg = 0, G = I, vinit, optimizer, stabilizer,\n           maxiter, vtol, Jtol, gtol, show_trace, solver, reltol, abstol, \n           N = 128, quad = false ) -> (Fopt,info)\n\nCompute the optimal periodic stabilizing gain matrix Fopt(t), such that for a continuous-time periodic state-space model  psys of the form\n\n  .\n  x(t) = A(t)x(t) + B(t)u(t) + Bw(t)w(t)  \n  y(t) = C(t)x(t) + D(t)u(t) + Dw(t)w(t) ,\n\nthe output feedback control law\n\nu(t) = Fopt(t)*y(t),\n\nminimizes the expectation of the quadratic index\n\n         ∞\n J = E{ Int [x(t)'*Q(t)*x(t) + u(t)'*R(t)*u(t)]dt },\n        t=0\n\nwhere Q(t) and R(t) are periodic weighting matrices.  The matrices of the system psys are of type PeriodicFunctionMatrix.  For a system of order n with m control inputs in u(t) and p measurable outputs in y(t),  Q(t) and R(t) are n×n and m×m symmetric periodic matrices of type PeriodicFunctionMatrix, respectively.                 The dimension m of u(t) is deduced from the dimension of R(t).  Q and R can be alternatively provided as constant real matrices. \n\nThe resulting m×p periodic output feedback gain Fopt(t) is of type PeriodicSwitchingMatrix,  with the switching times defined by the vector ts.  The ns switching times contained in the vector ts must satisfy 0 = ts[1] < ts[2] < ... < ts[ns] < T, where T is the system period.  If ts = missing, then ts = [0] is used by default (i.e., constant output feedback).\n\nThe output feedback gain Fopt(t) is computed as Fopt(t) = inv(I+F(t)D(t))*F(t), with F(t)  defined as \n\n F(t) = F_i  for t ∈ [ts[i],ts[i+1]) and i ∈ {1, ..., ns-1} or \n F(t) = F_ns for t ∈ [ts[ns],T)\n\nwhere F_i is the i-th gain. \n\nThe covariance matrix of the initial state x(0) can be specified via the keyword argument G (default: G = I) and a desired stability degree of the closed-loop characteristic exponents can be specified using the keyword argument sdeg (default: sdeg = 0). \n\nFor the determination of the optimal feedback gains F_i for i = 1, ...., ns an optimization-based approach is employed using  tools available in the optimization package Optim.jl.  By default, the gradient-based limited-memory quasi-Newton method (also known as L-BFGS) for unconstrained minimizations  is employed using the keyword argument setting optimizer = LBFGS(;alphaguess = LineSearches.InitialStatic(;scaled=true)), where  an initial step length for the line search algorithm is chosen using the keyword argument alphaguess  (see the LineSearches.jl package for alternative options).  The employed default line search algorithm is HagerZhang() and an alternative method can be specified using the keyword argument linesearch  (e.g., linesearch = LineSearches.MoreThuente()).   Alternative gradient-based methods can be also selected, such as, for example,  the quasi-Newton method BFGS with optimizer = Optim.BFGS(), or  for small size optimization problems, the Nelder-Mead gradient-free method with optimizer = Optim.NelderMead().  For the computation of the function J and its gradient  ∇J, the formulas developed in [1] for stable systems are used. Each evaluation involves the solution of  of a pair of periodic Lyapunov differential equations using single or multiple shooting methods proposed in [2].   If the original system psys is unstable, the computation of a stabilizing feedback is performed using the same optimization techniques applied iteratively to systems  with modified the state matrices of the form  A(t)-αI, where α ≥ 0 is chosen such that A(t)-αI is stable, and the values of α are successively decreased until the stabilization is achieved. The optimization method for stabilization can be independently selected using the keyword argument stabilizer, with the default setting   stabilizer = LBFGS(;alphaguess = LineSearches.InitialStatic(;scaled=true)). If only stabilization is desired, then use  optimizer = nothing. \n\nAn internal optimization variable v is used, formed as an m×p×ns array with v[:,:,i] := F_i, for i = 1, ..., ns.  By default, v is initialized as v = 0 (i.e., a zero array of appropriate dimensions).  The keyword argument vinit = v0 can be used to initialize v with an arbitrary m×p×ns array v0.   \n\nThe optimization process is controlled using several keyword parameters.  The keyword parameter maxiter = maxit can be used to specify the maximum number of iterations to be performed (default: maxit = 1000). The keyword argument vtol can be used to specify the absolute tolerance in  the changes of the optimization variable v (default: vtol = 0). The keyword argument Jtol can be used to specify the relative tolerance in the changes of the optimization criterion J (default: Jtol = 0),  while gtol can be used to specify the absolute tolerance in the gradient  ∇J, in infinity norm (default: gtol = 1e-5).  With the keyword argument show_trace = true,  a trace of the optimization algorithm's state is shown on stdout (default show_trace = false).    For stabilization purposes,  the values Jtol = 1.e-3, gtol = 1.e-2, maxit = 20 are used to favor faster convergence. \n\nThe returned named tuple info contains (fopt, sdeg0, sdeg, vopt, optres), where:\n\ninfo.fopt is the resulting value of the optimal performance J;\n\ninfo.sdeg0 is the initial stability degree of the closed-loop characteristic exponents;\n\ninfo.sdeg is the resulting stability degree of the closed-loop characteristic exponents;\n\ninfo.vopt is the resulting value of the optimization variable v; \n\ninfo.optres is the result returned by the Optim.optimize(...) function of the  Optim.jl package;  several functions provided by this package can be used to inquire various information related to the optimization results (see the documention of this package). \n\nSeveral keyword arguments can be used to control the integration of the involved ODE's for the solution of  periodic differential Lyapunov equations for function and gradient evaluations. \n\nIf K = 1 (default), the single shooting method is employed to compute periodic generators [1].  If K > 1, the multiple-shooting method of [2] is employed, first, to convert the continuous-time periodic Lyapunov differential equations into discrete-time periodic Lyapunov equations satisfied by  the generator solution in K grid points and then to compute the solution by solving an appropriate discrete-time periodic Lyapunov  equation using the periodic Schur method of [3]. If quad = true, a quadrature-based evaluation of gradients is used, as proposed in [1], in conjunction with interpolation techniques. The number of sample values to be used for interpolation can be specified with the keyword parameter N (deafult: N = 128). \n\nThe ODE solver to be employed to convert the continuous-time problem into a discrete-time problem can be specified using the keyword argument solver,  together with the required relative accuracy reltol (default: reltol = 1.e-4),   absolute accuracy abstol (default: abstol = 1.e-7) and stepsize dt (default: dt = 0, only used if solver = \"symplectic\").  Depending on the desired relative accuracy reltol, lower order solvers are employed for reltol >= 1.e-4,  which are generally very efficient, but less accurate. If reltol < 1.e-4, higher order solvers are employed able to cope with high accuracy demands. \n\nThe following solvers from the OrdinaryDiffEq.jl package can be selected:\n\nsolver = \"non-stiff\" - use a solver for non-stiff problems (Tsit5() or Vern9());\n\nsolver = \"stiff\" - use a solver for stiff problems (Rodas4() or KenCarp58());\n\nsolver = \"auto\" - use the default solver, which automatically detects stiff problems (AutoTsit5(Rosenbrock23()) or AutoVern9(Rodas5())). \n\nParallel computation of the matrices of the discrete-time problem can be alternatively performed  by starting Julia with several execution threads.  The number of execution threads is controlled either by using the -t/--threads command line argument  or by using the JULIA_NUM_THREADS environment variable. \n\n[1] L. Vigano, M. Bergamasco, M. Lovera, and A. Varga. Optimal periodic output feedback control: a continuous-time approach and a case study.     Int. J. Control, Vol. 83, pp. 897–914, 2010.  \n\n[2] A. Varga. On solving periodic differential matrix equations with applications to periodic system norms computation.      Proc. IEEE CDC/ECC, Seville, 2005. \n\n[3] A. Varga. Periodic Lyapunov equations: some applications and new algorithms.      Int. J. Control, vol, 67, pp, 69-87, 1997.\n\n\n\n\n\n","category":"function"},{"location":"psstab.html#PeriodicSystems.pclqofc_hr","page":"Stabilization of periodic systems","title":"PeriodicSystems.pclqofc_hr","text":"pclqofc_hr(psys, Q, R, nh = 0; K = 1, sdeg = 0, G = I, vinit, optimizer, stabilizer,\n           maxiter, vtol, Jtol, gtol, show_trace, solver, reltol, abstol, \n           N = 128, quad = false ) -> (Fopt,info)\n\nCompute the optimal periodic stabilizing gain matrix Fopt(t), such that for a continuous-time periodic state-space model  psys of the form\n\n  .\n  x(t) = A(t)x(t) + B(t)u(t) + Bw(t)w(t)  \n  y(t) = C(t)x(t) + D(t)u(t) + Dw(t)w(t) ,\n\nthe output feedback control law\n\nu(t) = Fopt(t)*y(t),\n\nminimizes the expectation of the quadratic index\n\n         ∞\n J = E{ Int [x(t)'*Q(t)*x(t) + u(t)'*R(t)*u(t)]dt },\n        t=0\n\nwhere Q(t) and R(t) are periodic weighting matrices.  The matrices of the system psys are of type HarmonicArray.  For a system of order n with m control inputs in u(t) and p measurable outputs in y(t),  Q(t) and R(t) are n×n and m×m symmetric periodic matrices of type HarmonicArray, respectively.                 The dimension m of u(t) is deduced from the dimension of R(t).  Q and R can be alternatively provided as constant real matrices. \n\nThe resulting m×p periodic output feedback gain Fopt(t) is of type HarmonicArray and is computed as Fopt(t) = inv(I+F(t)D(t))*F(t), with F(t) in the harmonic representation form \n\n              nh\n F(t) = F0 +  ∑ ( Fc_i*cos(i*t*2*π/T)+Fs_i*sin(i*2*π*t/T) ) ,\n             i=1\n\nwhere T is the system period, F0 is the constant term, Fc_i is the i-th cosinus coefficient matrix and Fs_i is the i-th sinus coefficient matrix.  By default, the number of harmonics is nh = 0 (i.e., constant output feedback is used).\n\nThe covariance matrix of the initial state x(0) can be specified via the keyword argument G (default: G = I) and a desired stability degree of the closed-loop characteristic exponents can be specified using the keyword argument sdeg (default: sdeg = 0). \n\nFor the determination of the optimal feedback gains F0, Fc_i and Fs_i for i = 1, ...., nh an optimization-based approach is employed using  tools available in the optimization package Optim.jl.  By default, the gradient-based limited-memory quasi-Newton method (also known as L-BFGS) for unconstrained minimizations  is employed using the keyword argument setting optimizer = LBFGS(;alphaguess = LineSearches.InitialStatic(;scaled=true)), where  an initial step length for the line search algorithm is chosen using the keyword argument alphaguess  (see the LineSearches.jl package for alternative options).  The employed default line search algorithm is HagerZhang() and an alternative method can be specified using the keyword argument linesearch  (e.g., linesearch = LineSearches.MoreThuente()).   Alternative gradient-based methods can be also selected, such as, for example,  the quasi-Newton method BFGS with optimizer = Optim.BFGS(), or  for small size optimization problems, the Nelder-Mead gradient-free method with optimizer = Optim.NelderMead().  For the computation of the function J and its gradient  ∇J, the formulas developed in [1] for stable systems are used. Each evaluation involves the solution of  of a pair of periodic Lyapunov differential equations using single or multiple shooting methods proposed in [2].   If the original system psys is unstable, the computation of a stabilizing feedback is performed using the same optimization techniques applied iteratively to systems  with modified the state matrices of the form  A(t)-αI, where α ≥ 0 is chosen such that A(t)-αI is stable, and the values of α are successively decreased until the stabilization is achieved. The optimization method for stabilization can be independently selected using the keyword argument stabilizer, with the default setting   stabilizer = LBFGS(;alphaguess = LineSearches.InitialStatic(;scaled=true)). If only stabilization is desired, then use  optimizer = nothing. \n\nAn internal optimization variable v is used, formed as an m*p*(2*nh+1) dimensional vector v := [vec(F0); vec(Fc_1); vec(Fs_1), ... ; vec(Kc_nh); vec(Ks_nh)]'.  By default,vis initialized asv = 0(i.e., a zero vector of appropriate dimension).  The keyword argumentvinit = v0can be used to initializevwith an arbitrary vectorv0`.   \n\nThe optimization process is controlled using several keyword parameters.  The keyword parameter maxiter = maxit can be used to specify the maximum number of iterations to be performed (default: maxit = 1000). The keyword argument vtol can be used to specify the absolute tolerance in  the changes of the optimization variable v (default: vtol = 0). The keyword argument Jtol can be used to specify the relative tolerance in the changes of the optimization criterion J (default: Jtol = 0),  while gtol can be used to specify the absolute tolerance in the gradient  ∇J, in infinity norm (default: gtol = 1e-5).  With the keyword argument show_trace = true,  a trace of the optimization algorithm's state is shown on stdout (default show_trace = false).    For stabilization purposes,  the values Jtol = 1.e-3, gtol = 1.e-2, maxit = 20 are used to favor faster convergence. \n\nThe returned named tuple info contains (fopt, sdeg0, sdeg, vopt, optres), where:\n\ninfo.fopt is the resulting value of the optimal performance J;\n\ninfo.sdeg0 is the initial stability degree of the closed-loop characteristic exponents;\n\ninfo.sdeg is the resulting stability degree of the closed-loop characteristic exponents;\n\ninfo.vopt is the resulting value of the optimization variable v; \n\ninfo.optres is the result returned by the Optim.optimize(...) function of the  Optim.jl package;  several functions provided by this package can be used to inquire various information related to the optimization results (see the documention of this package). \n\nSeveral keyword arguments can be used to control the integration of the involved ODE's for the solution of  periodic differential Lyapunov equations for function and gradient evaluations. \n\nIf K = 1 (default), the single shooting method is employed to compute periodic generators [1].  If K > 1, the multiple-shooting method of [2] is employed, first, to convert the continuous-time periodic Lyapunov differential equations into discrete-time periodic Lyapunov equations satisfied by  the generator solution in K grid points and then to compute the solution by solving an appropriate discrete-time periodic Lyapunov  equation using the periodic Schur method of [3]. If quad = true, a quadrature-based evaluation of gradients is used, as proposed in [1], in conjunction with interpolation techniques. The number of sample values to be used for interpolation can be specified with the keyword parameter N (deafult: N = 128). \n\nThe ODE solver to be employed to convert the continuous-time problem into a discrete-time problem can be specified using the keyword argument solver,  together with the required relative accuracy reltol (default: reltol = 1.e-4),   absolute accuracy abstol (default: abstol = 1.e-7) and stepsize dt (default: dt = 0, only used if solver = \"symplectic\").  Depending on the desired relative accuracy reltol, lower order solvers are employed for reltol >= 1.e-4,  which are generally very efficient, but less accurate. If reltol < 1.e-4, higher order solvers are employed able to cope with high accuracy demands. \n\nThe following solvers from the OrdinaryDiffEq.jl package can be selected:\n\nsolver = \"non-stiff\" - use a solver for non-stiff problems (Tsit5() or Vern9());\n\nsolver = \"stiff\" - use a solver for stiff problems (Rodas4() or KenCarp58());\n\nsolver = \"auto\" - use the default solver, which automatically detects stiff problems (AutoTsit5(Rosenbrock23()) or AutoVern9(Rodas5())). \n\nParallel computation of the matrices of the discrete-time problem can be alternatively performed  by starting Julia with several execution threads.  The number of execution threads is controlled either by using the -t/--threads command line argument  or by using the JULIA_NUM_THREADS environment variable. \n\n[1] L. Vigano, M. Bergamasco, M. Lovera, and A. Varga. Optimal periodic output feedback control: a continuous-time approach and a case study.     Int. J. Control, Vol. 83, pp. 897–914, 2010.  \n\n[2] A. Varga. On solving periodic differential matrix equations with applications to periodic system norms computation.      Proc. IEEE CDC/ECC, Seville, 2005. \n\n[3] A. Varga. Periodic Lyapunov equations: some applications and new algorithms.      Int. J. Control, vol, 67, pp, 69-87, 1997.\n\n\n\n\n\n","category":"function"},{"location":"psstab.html#PeriodicSystems.pdlqofc","page":"Stabilization of periodic systems","title":"PeriodicSystems.pdlqofc","text":"pdlqofc(psys, Q, R; S, G = I, sdeg = 1, stabilizer, optimizer, vinit, maxiter, vtol, Jtol, gtol, show_trace) -> (Fopt, info)\n\nCompute for the discrete-time periodic state-space system psys = (A(t),B(t),C(t),D(t)) of the form\n\nx(t+1) = A(t)x(t) + B(t)u(t) + Bw(t)w(t) \n  y(t) = C(t)x(t) + D(t)u(t) + Dw(t)w(t) ,\n\nthe optimal periodic feedback gain Fopt(t) in the output feedback control law  \n\nu(t) = Fopt(t)*y(t),\n\nwhich minimizes the expectation of the quadratic index\n\n J = E{ Sum [x(t)'*Q(t)*x(t) + 2*x(t)'*S(t)*u(t) + u(t)'*R(t)*u(t)] },\n\nwhere Q(t), R(t) and S(t) are periodic weighting matrices.  For a system of order n with m control inputs in u(t) and p measurable outputs in y(t),  Q(t) and R(t) are n×n and m×m symmetric periodic matrices, respectively, and  S(t) is an n×m periodic matrix, which can be specified via the keyword argument S.  By default S = missing, in which case, S(t) = 0 is assumed.    The periodic matrices Q(t),R(t) and S(t) have the same type as the matrices of the state-space system, i.e., either of type PeriodicMatrix or PeriodicArray.   The dimension m of u(t) is deduced from the dimension of R(t).  Q, R and S can be alternatively provided as constant real matrices. \n\nThe resulting m×p periodic output feedback gain Fopt(t) has the same type as the state-space system matrices and is computed as Fopt(t) = inv(I+F(t)D(t))*F(t), with F(t)  defined as \n\n F(t) = F_i  for i ∈ {1, ..., ns}\n\nwhere ns is the number of sampling times in a period (i.e., ns = psys.period/psys.Ts) and F_i is the i-th gain. \n\nThe covariance of the initial state x(0) can be specified via the keyword argument G (default: G = I) and a desired stability degree of the closed-loop characteristic multipliers can be specified using the keyword argument sdeg (default: sdeg = 1). \n\nFor the determination of the optimal feedback gains F_i for i = 1, ...., ns an optimization-based approach is employed using  tools available in the optimization package Optim.jl.  By default, the gradient-based limited-memory quasi-Newton method (also known as L-BFGS) for unconstrained minimizations  is employed using the keyword argument setting optimizer = LBFGS(;alphaguess = LineSearches.InitialStatic(;scaled=true)), where  an initial step length for the line search algorithm is chosen using the keyword argument alphaguess  (see the LineSearches.jl package for alternative options).  The employed default line search algorithm is HagerZhang() and an alternative method can be specified using the keyword argument linesearch  (e.g., linesearch = LineSearches.MoreThuente()).   Alternative gradient-based methods can be also selected, such as, for example,  the quasi-Newton method BFGS with optimizer = Optim.BFGS(), or  for small size optimization problems, the Nelder-Mead gradient-free method with optimizer = Optim.NelderMead().  For the computation of the function J and its gradient  ∇J, the formulas developed in [1] for stable systems are used. Each evaluation involves the solution of  of a pair of periodic Lyapunov difference equations using the method proposed in [2].   If the original system psys is unstable, the computation of a stabilizing feedback is performed using the same optimization techniques applied iteratively to systems  with modified state matrices of the form  A(t)/α and control matrices B(t)/α, where α ≥ 1 is chosen such that A(t)/α is stable, and the values of α are successively decreased until the stabilization is achieved with α = 1. The optimization method for stabilization can be independently selected using the keyword argument stabilizer, with the default setting   stabilizer = LBFGS(;alphaguess = LineSearches.InitialStatic(;scaled=true)). If only stabilization is desired, then use  optimizer = nothing. \n\nAn internal optimization variable v is used, formed as an m×p×ns array with v[:,:,i] := F_i, for i = 1, ..., ns.  By default, v is initialized as v = 0 (i.e., a zero array of appropriate dimensions).  The keyword argument vinit = v0 can be used to initialize v with an arbitrary m×p×ns real array v0.   \n\nThe optimization process is controlled using several keyword parameters.  The keyword parameter maxiter = maxit can be used to specify the maximum number of iterations to be performed (default: maxit = 1000). The keyword argument vtol can be used to specify the absolute tolerance in  the changes of the optimization variable v (default: vtol = 0). The keyword argument Jtol can be used to specify the relative tolerance in the changes of the optimization criterion J (default: Jtol = 0),  while gtol can be used to specify the absolute tolerance in the gradient ∇J, in infinity norm (default: gtol = 1e-5).  With the keyword argument show_trace = true,  a trace of the optimization algorithm's state is shown on stdout (default show_trace = false).    For stabilization purposes, the values Jtol = 1.e-3, gtol = 1.e-2, maxit = 20 are used to favor faster convergence. \n\nThe returned named tuple info contains (fopt, sdeg0, sdeg, vopt, optres), where:\n\ninfo.fopt is the resulting value of the optimal performance J;\n\ninfo.sdeg0 is the initial stability degree of the closed-loop characteristic multipliers;\n\ninfo.sdeg is the resulting stability degree of the closed-loop characteristic multipliers;\n\ninfo.vopt is the resulting value of the optimization variable v; \n\ninfo.optres is the result returned by the Optim.optimize(...) function of the  Optim.jl package;  several functions provided by this package can be used to inquire various information related to the optimization results (see the documention of this package). \n\nA bound-constrained optimization can be performed using the keyword argument lub = (lb, ub), where lb is the lower bound and ub is the upper bound on the feedback gains.  By default,  lub = missing in which case the bounds lb = -Inf and ub = Inf are assumed. \n\nReferences     \n\n[1] A. Varga and S. Pieters. Gradient-based approach to solve optimal periodic output feedback problems.      Automatica, vol.34, pp. 477-481, 1998.\n\n[2] A. Varga. Periodic Lyapunov equations: some applications and new algorithms.                Int. J. Control, vol, 67, pp, 69-87, 1997.\n\n\n\n\n\n","category":"function"},{"location":"psstab.html#PeriodicSystems.pdlqofc_sw","page":"Stabilization of periodic systems","title":"PeriodicSystems.pdlqofc_sw","text":"pdlqofc_sw(psys, Q, R, ns; S, vinit, kwargs...) -> (Fopt, info)\n\nCompute for the discrete-time periodic state-space system psys = (A(t),B(t),C(t),D(t)) of the form\n\nx(t+1) = A(t)x(t) + B(t)u(t) + Bw(t)w(t)       y(t) = C(t)x(t) + D(t)u(t) + Dw(t)w(t) ,\n\nthe optimal switching periodic feedback gain Fopt(t) in the output feedback control law  \n\nu(t) = Fopt(t)*y(t),\n\nwhich minimizes the expectation of the quadratic index \n\n J = E{ Sum [x(t)'*Q(t)*x(t) + 2*x(t)'*S(t)*u(t) + u(t)'*R(t)*u(t)] },\n\nwhere Q(t), R(t) and S(t) are periodic weighting matrices.  For a system of order n with m control inputs in u(t) and p measurable outputs in y(t),  Q(t) and R(t) are n×n and m×m symmetric periodic matrices, respectively, and  S(t) is an n×m periodic matrix, which can be specified via the keyword argument S.  By default S = missing, in which case, S(t) = 0 is assumed.    The periodic matrices Q(t),R(t) and S(t) have the same type as the matrices of the state-space system, i.e., either of type PeriodicMatrix or PeriodicArray.   The dimension m of u(t) is deduced from the dimension of R(t).  Q, R and S can be alternatively provided as constant real matrices. \n\nThe switching times for the resulting switching periodic gain Fopt(t) are specified by the  N-dimensional integer vector ns.  By default, ns = 1:N, where N is the maximal number of samples (i.e., N = psys.period/psys.Ts). \n\nThe resulting m×p periodic output feedback gain Fopt(t) has the type SwitchingPeriodicArray and is computed as Fopt(t) = inv(I+F(t)D(t))*F(t), with F(t)  defined as \n\n F(t) = F_i for t ∈ [ns[i]Δ,ns[i+1]Δ) and i ∈ {1, ..., N-1}, or\n F(t) = F_N for t ∈ [ns[N]Δ,T),\n\nwhere T is the system period (i.e., T = psys.period), Δ is the system sampling time (i.e., Δ = psys.Ts)  and F_i is the i-th gain. \n\nIf an initial value for the optimization variable v is provided using the keyword argument vinit = gains, then gains must be an m×p×N array, where m and p are the numbers of system control inputs and outputs. By default, vinit = missing, in which case a zero matrix gains = 0 is assumed.  \n\nThe rest of keyword arguments contained in kwargs are the same as those used for the function pdlqofc.  See its documentation for the description of all keyword arguments. \n\nThe computation of gradient fully exploits the switching structure of the feedback gain, using formulas which generalize the case of constant feedback considered in [1].     \n\nReferences     \n\n[1] A. Varga and S. Pieters. Gradient-based approach to solve optimal periodic output feedback problems.      Automatica, vol.34, pp. 477-481, 1998.\n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"Home","title":"Home","text":"CurrentModule = PeriodicSystems\nDocTestSetup = quote\n    using PeriodicSystems\nend","category":"page"},{"location":"index.html#PeriodicSystems.jl","page":"Home","title":"PeriodicSystems.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"(Image: DocBuild) (Image: Code on Github.)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"PeriodicSystems.jl is intended to be a collection of Julia functions for numerical computations related to periodic system representations in the continuous-time form","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":" dx(t)/dt = A(t)x(t) + B(t)u(t) ,\n y(t)     = C(t)x(t) + D(t)u(t) ,","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"or in the discrete-time form","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":" x(t+1)  = A(t)x(t) + B(t)u(t) ,\n y(t)    = C(t)x(t) + D(t)u(t) ,","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"where x(t), u(t) and y(t) are the system state vector, system input vector and system output vector, respectively, and t is the continuous or discrete time variable. The system matrices satisfy A(t) = A(t+T), B(t) = B(t+T), C(t) = C(t+T), D(t) = D(t+T),  i.e., are periodic with period T. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Many control applications are formulated as genuine periodic control problems as for example, satellite attitude control, helicopter forward flight control, orbital stabilization of underactuated systems, etc. Besides that, periodic systems represent a general framework to analyze and design multi-rate sampled-data systems. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The targeted functionality of this package is described in [1] and will cover both continuous-time and discrete-time periodic systems. The following categories of functions are currently implemented:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Building periodic system state-space models","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"PeriodicStateSpace   Periodic state space system representation.\nps  Construction of periodic state-space models.\npsmrc2d  Discretization/resampling of a multirate LTI system. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Basic connections and operations","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"psparallel Parallel connection of periodic systems.\npsseries   Series connection of periodic systems.\npsappend   Appending of periodic systems.\npshorzcat  Horizontal concatenation of periodic systems.\npsvertcat  Vertical concatenation of periodic systems.\npsfeedback  Periodic output feedback connection.\npssfeedback  Periodic state feedback connection.\npssofeedback  Periodic state feedback with state estimator connection.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Discretization of continuous-time periodic systems","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"psc2d  Discretization of a continuous-time periodic system. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Conversions to LTI representations","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"psaverage  Computation of the averaged LTI system of a continuous-time periodic system.\npsteval  Computation of the time evaluated LTI system of a continuous-time periodic system.\nps2fls  Computation of a complex frequency-lifted LTI representation of a continuous-time periodic system. \nps2frls  Computation of a real frequency-lifted LTI representation of a continuous-time periodic system. \nps2ls  Computation of a time-lifted LTI representation of a discrete-time periodic system. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Periodic system analysis","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"pspole  Computation of the poles of a periodic system.\npszero  Computation of the zeros of a periodic system.\nisstable  Assessment of stability of a periodic system.\npshanorm  Evaluation of the Hankel-norm of a periodic system.\npsh2norm  Evaluation of the H2-norm of a periodic system.\npslinfnorm  Evaluation of the L∞/H∞-norm of a periodic system.\npstimeresp  Time response of a periodic system.\npsstepresp  Step response of a periodic system.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Simplification of periodic system models","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Periodic state feedback controller and estimator design ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"pclqr  LQ-optimal state feedack stabilization of continuous-time periodic systems. \npclqry LQ-optimal state feedack stabilization with output weighting of continuous-time periodic systems. \npdlqr  LQ-optimal state feedack stabilization of discrete-time periodic systems. \npdlqry LQ-optimal state feedack stabilization with output weighting of discrete-time periodic systems. \npckeg  Kalman estimator gain matrix for continuous-time periodic systems. \npckegw  Kalman estimator gain matrix for continuous-time periodic systems with noise inputs.\npdkeg  Kalman estimator gain matrix for periodic systems. \npdkegw  Kalman estimator gain matrix for periodic systems with noise inputs.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Periodic output feedback controller design ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"pcpofstab_sw Stabilization of continuous-time periodic systems using switching periodic output feedback.\npcpofstab_hr Stabilization of continuous-time periodic systems using harmonic output feedback.\npdpofstab_sw Stabilization of discrete-time periodic systems using switching periodic output feedback.\npdpofstab_hr Stabilization of discrete-time periodic systems using discretized harmonic periodic output feedback.\npclqofc_sw LQ-optimal stabilization of continuous-time periodic systems using switching periodic output feedback.\npclqofc_hr LQ-optimal stabilization of continuous-time periodic systems using harmonic output feedback.\npdlqofc LQ-optimal stabilization of discrete-time periodic systems using periodic output feedback.\npdlqofc_sw LQ-optimal stabilization of discrete-time periodic systems using switching periodic output feedback.","category":"page"},{"location":"index.html#[Release-Notes](https://github.com/andreasvarga/PeriodicSystems.jl/blob/master/ReleaseNotes.md)","page":"Home","title":"Release Notes","text":"","category":"section"},{"location":"index.html#Main-developer","page":"Home","title":"Main developer","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Andreas Varga","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"License: MIT (expat)","category":"page"},{"location":"index.html#References","page":"Home","title":"References","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"[1] A. Varga. A Periodic Systems Toolbox for Matlab. Proc. of IFAC 2005 World Congress, Prague, Czech Republic, 2005.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"[2] S. Bittanti and P. Colaneri. Periodic Systems - Filtering and Control, Springer Verlag, 2009.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"[3]  A. Varga, MatrixPencils.jl: Matrix pencil manipulation using Julia. Zenodo: https://doi.org/10.5281/zenodo.3894503.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"[4]  A. Varga, MatrixEquations.jl: Solution of Lyapunov, Sylvester and Riccati matrix equations using Julia. Zenodo: https://doi.org/10.5281/zenodo.3556867.","category":"page"},{"location":"makeindex.html#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"makeindex.html","page":"Index","title":"Index","text":"Pages = [ \"pstypes.md\", \"ps.md\", \"psconnect.md\", \"psconversions.md\", \"pslifting.md\", \"psanalysis.md\", \"psstab.md\" ]\nModules = [PeriodicSystems]\nOrder = [:type, :function]","category":"page"},{"location":"psconnect.html#Basic-periodic-system-connectios-and-operations","page":"Basic connections and operations","title":"Basic periodic system connectios and operations","text":"","category":"section"},{"location":"psconnect.html","page":"Basic connections and operations","title":"Basic connections and operations","text":"psparallel Parallel connection of periodic systems.\npsseries   Series connection of periodic systems.\npsappend   Appending of periodic systems.\npshorzcat  Horizontal concatenation of periodic systems.\npsvertcat  Vertical concatenation of periodic systems.\npsinv  Inversion of periodic systems.\npsfeedback  Periodic output feedback connections.\npssfeedback  Periodic state feedback connection.\npssofeedback  Periodic state feedback with state estimator connection.","category":"page"},{"location":"psconnect.html","page":"Basic connections and operations","title":"Basic connections and operations","text":"psparallel\npsseries\npsappend\npshorzcat\npsvertcat\npsinv\npsfeedback\npssfeedback\npssofeedback","category":"page"},{"location":"psconnect.html#PeriodicSystems.psparallel","page":"Basic connections and operations","title":"PeriodicSystems.psparallel","text":"psys = psparallel(psys1, psys2)\npsys = psys1 + psys2\n\nBuild the parallel connection psys of periodic systems psys1 and psys2. This coupling formally corresponds to the addition of their transfer maps as psys = psys1 + psys2.\n\n\n\n\n\n","category":"function"},{"location":"psconnect.html#PeriodicSystems.psseries","page":"Basic connections and operations","title":"PeriodicSystems.psseries","text":"psys = psseries(psys1, psys2)\npsys = psys2*psys1\n\nBuild the series connection psys of periodic systems psys1 and psys2. This coupling formally corresponds to the product of their transfer maps as psys = psys2*psys1.\n\n\n\n\n\n","category":"function"},{"location":"psconnect.html#PeriodicSystems.psappend","page":"Basic connections and operations","title":"PeriodicSystems.psappend","text":"psys = psappend(psys1, psys2)\n\nAppend the periodic systems psys1 and psys2 by concatenating their input and output vectors.  This corresponds to build psys as the block diagonal concatenation of their transfer maps. \n\n\n\n\n\n","category":"function"},{"location":"psconnect.html#PeriodicSystems.pshorzcat","page":"Basic connections and operations","title":"PeriodicSystems.pshorzcat","text":"psys = pshorzcat(psys1,psys2)\npsys = [psys1 psys2]\n\nConcatenate horizontally the two periodic systems psys1 and psys2  by concatenating their input vectors. This formally corresponds to the horizontal  concatenation of their transfer maps. \n\n\n\n\n\n","category":"function"},{"location":"psconnect.html#PeriodicSystems.psvertcat","page":"Basic connections and operations","title":"PeriodicSystems.psvertcat","text":"psys = psvertcat(psys1,psys2)\npsys = [psys1; psys2]\n\nConcatenate vertically the two periodic systems psys1 and psys2  by concatenating their output vectors. This formally corresponds to the vertical  concatenation of their transfer maps. \n\n\n\n\n\n","category":"function"},{"location":"psconnect.html#PeriodicSystems.psinv","page":"Basic connections and operations","title":"PeriodicSystems.psinv","text":"psysi = psinv(psys)\n\nCompute the inverse psysi of the square periodic system psys.   This operation formally corresponds to the inversion of the transfer map of psys such that psysi*psys is the identity mapping.\n\n\n\n\n\n","category":"function"},{"location":"psconnect.html#PeriodicSystems.psfeedback","page":"Basic connections and operations","title":"PeriodicSystems.psfeedback","text":" psyscl = psfeedback(psys, K, (inp, out); negative = false)\n\nBuild for a given periodic system psys with input vector u and output vector y and  a periodic output feedback gain K(t) the closed-loop periodic system psyscl corresponding to the memoryless output feedback u[inp] = K(t)*y[out] + v, where inp and out  are indices, vectors of indices, index ranges, : or any combinations of them. Only distinct indices  can be specified. If negative = true, a negative psfeedback u[inp] = -K(t)*y[out] + v is used.\n\n\n\n\n\n psyscl = psfeedback(sys, K, (inp, out); negative = false)\n\nBuild for a given standard  state-space system sys with input vector u and output vector y and  a periodic output feedback gain K(t) the closed-loop periodic system psyscl corresponding to the memoryless output feedback u[inp] = K(t)*y[out] + v, where inp and out are  are indices, vectors of indices, index ranges, : or any combinations of them. Only distinct indices  can be specified. If negative = true, a negative feedback u[inp] = -K(t)*y[out] + v is used. For a continuous-time system sys, K must be a periodic switching matrix or a discrete-time periodic matrix,  while for a discrete-time system sys, K must be a discrete-time periodic matrix with the same sample time. \n\n\n\n\n\n","category":"function"},{"location":"psconnect.html#PeriodicSystems.pssfeedback","page":"Basic connections and operations","title":"PeriodicSystems.pssfeedback","text":" psyscl = pssfeedback(psys, F, inp; negative = false)\n\nBuild for a given periodic system psys with input vector u and output vector y and  a periodic state feedback gain F(t) the closed-loop periodic system psyscl corresponding to the memoryless state feedback u[inp] = F(t)*x + v, where inp   are indices, a vector of indices, an index range, : or any combinations of them. Only distinct indices  can be specified. If negative = true, a negative state feedback u[inp] = -F(t)*x + v is used.\n\n\n\n\n\n","category":"function"},{"location":"psconnect.html#PeriodicSystems.pssofeedback","page":"Basic connections and operations","title":"PeriodicSystems.pssofeedback","text":" psyscl = pssofeedback(psys, F, K, (inp, out); negative = false)\n\nBuild for a given periodic system psys, with input vector u and output vector y,  a periodic state feedback gain F(t) and a periodic Kalman gain K(t) the closed-loop periodic system psyscl corresponding to the memoryless state feedback u[inp] = F(t)*xe + v and  a full state estimator with state xe and inputs [u[inp]; y[out]], where inp and out  are indices, vectors of indices, index ranges, : or any combinations of them. Only distinct indices  can be specified. If negative = true, a negative state feedback u[inp] = -F(t)*xe + v is used.\n\n\n\n\n\n","category":"function"}]
}
