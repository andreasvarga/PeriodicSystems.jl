var documenterSearchIndex = {"docs":
[{"location":"slicot.html#SLICOT-periodic-system-utilities","page":"SLICOT periodic system utilities","title":"SLICOT periodic system utilities","text":"","category":"section"},{"location":"slicot.html","page":"SLICOT periodic system utilities","title":"SLICOT periodic system utilities","text":"PeriodicSystems.SLICOTtools.mb03vd!\nPeriodicSystems.SLICOTtools.mb03vy!\nPeriodicSystems.SLICOTtools.mb03bd!","category":"page"},{"location":"slicot.html#PeriodicSystems.SLICOTtools.mb03vd!","page":"SLICOT periodic system utilities","title":"PeriodicSystems.SLICOTtools.mb03vd!","text":"mb03vd!(n::Integer, p::Integer, ilo::Integer, ihi::Integer, A::Array{Float64, 3}, tau::AbstractMatrix{Float64}) -> info::Int64\n\nReduce a product of p real general matrices A = A_1*A_2*...*A_p to upper Hessenberg form, H = H_1*H_2*...*H_p, where H_1 is upper Hessenberg, and H_2, ..., H_p are upper triangular, by using orthogonal similarity transformations on A,\n\n    Q_1' * A_1 * Q_2 = H_1,\n    Q_2' * A_2 * Q_3 = H_2,\n           ...\n    Q_p' * A_p * Q_1 = H_p.\n\nThe matrices A_1, A_2, ..., A_p are contained in the 3-dimensional array A.  The resulting H_1, H_2, ..., H_p and Q_1, Q_2, ..., Q_p overwrite  A_1, A_2, ..., A_p in A and the array tau.   \n\nSee the SLICOT documentation of MB03VD for details.\n\n\n\n\n\n","category":"function"},{"location":"slicot.html#PeriodicSystems.SLICOTtools.mb03vy!","page":"SLICOT periodic system utilities","title":"PeriodicSystems.SLICOTtools.mb03vy!","text":" mb03vy!(n::Integer, p::Integer, ilo::Integer, ihi::Integer, A::Array{Float64, 3}, tau::AbstractMatrix{Float64}) -> info::Int64\n\nGenerate the real orthogonal matrices Q_1, Q_2, ..., Q_p, which are defined as the product of ihi-ilo elementary reflectors of order n, as returned in A_1, A_2, ..., A_p by mb03vd!:\n\n Q_j = H_j(ilo) H_j(ilo+1) . . . H_j(ihi-1).\n\nThe 3-dimensional arrays A and tau contains the information on the employed elementary reflectors. The resulting Q_1, Q_2, ..., Q_p overwrite A_1, A_2, ..., A_p. \n\nSee the SLICOT documentation of MB03VY for details.\n\n\n\n\n\n","category":"function"},{"location":"slicot.html#PeriodicSystems.SLICOTtools.mb03bd!","page":"SLICOT periodic system utilities","title":"PeriodicSystems.SLICOTtools.mb03bd!","text":"mb03bd!(job::AbstractChar, defl::AbstractChar, compq::AbstractChar, qind::AbstractVector{Int64}, k::Integer, n::Integer, h::Integer, \n        ilo::Integer, ihi::Integer, s::AbstractVector{Int64}, a::Array{Float64, 3}, q::Array{Float64, 3}, alphar::AbstractVector{Float64}, \n        alphai::AbstractVector{Float64}, beta::AbstractVector{Float64}, scal::AbstractVector{Int64}, liwork::Integer, ldwork::Integer) -> (info::Int64, iwarn::Int64)\n\nFind the eigenvalues of the generalized matrix product\n\n          s[1]           s[2]                 s[k]\n  A[:,:,1]     * A[:,:,2]     * ... * A[:,:,k]\n\nwhere A[:,:,h] is upper Hessenberg and A[:,:,i], i <> h, is upper triangular, using a double-shift version of the periodic QZ method. In addition, A may be reduced to periodic Schur form: A[:,:,h] is upper quasi-triangular and all the other factors A[:,:,i] are upper triangular. Optionally, the 2-by-2 triangular matrices corresponding to 2-by-2 diagonal blocks in A[:,:,h] are so reduced that their product is a 2-by-2 diagonal matrix.\n\nIf compq = 'U' or compq = 'I', then the orthogonal factors are computed and stored in the array Q so that for s[i] = 1,\n\n                T\n    Q[:,:,i](in)   A[:,:,i](in)   Q[:,:,mod(i,k)+1](in)\n                                                        T \n=   Q[:,:,i](out)  A[:,:,i](out)  Q[:,:,mod(i,k)+1](out),\n\nand for s[i] = -1,\n\n                         T\n    Q[:,:,mod(i,k)+1](in)   A[:,:,i](in)   Q[:,:,i](in)\n                                                        T \n=   Q[:,:,mod(i,k)+1](out)  A[:,:,i](out)  Q[:,:,i](out).\n\nA partial generation of the orthogonal factors can be realized via the array qind.\n\nSee the SLICOT documentation of MB03BD for details.\n\n\n\n\n\n","category":"function"},{"location":"pslifting.html#Conversions-to-LTI-representations","page":"Conversions to LTI representations","title":"Conversions to LTI representations","text":"","category":"section"},{"location":"pslifting.html","page":"Conversions to LTI representations","title":"Conversions to LTI representations","text":"psaverage  Computation of the averaged LTI system of a periodic system.\nps2fls  Computation of a complex LTI frequency-lifted representation of a continuous-time periodic system. \nps2frls  Computation of a real LTI frequency-lifted representation of a continuous-time periodic system. ","category":"page"},{"location":"pslifting.html","page":"Conversions to LTI representations","title":"Conversions to LTI representations","text":"psaverage\nps2fls\nps2frls","category":"page"},{"location":"pslifting.html#PeriodicSystems.psaverage","page":"Conversions to LTI representations","title":"PeriodicSystems.psaverage","text":"psaverage(psysc) -> sys::DescriptorStateSpace\n\nCompute for the continuous-time periodic system psysc = (A(t),B(t),C(t),D(t))  the corresponding time averaged LTI system sys = (Am,Bm,Cm,Dm) over one period.  \n\n\n\n\n\n","category":"function"},{"location":"pslifting.html#PeriodicSystems.ps2fls","page":"Conversions to LTI representations","title":"PeriodicSystems.ps2fls","text":" ps2fls(psysc::PeriodicStateSpace, N; P) -> sys::DescriptorStateSpace\n\nBuild the frequency-lifted representation of a continuous-time periodic system.\n\nFor a continuos-time periodic system psysc = (A(t),B(t),C(t),D(t)), the (complex)  LTI state-space representation sys = (At-Nt,Bt,Ct,Dt) is built, where At, Bt, Ct and Dt  are truncated block Toeplitz matrices and Nt is a block diagonal matrix (see [1] or [2]).  N is the number of selected harmonic components in the Fourier series of system matrices  and the keyword parameter P is the number of full periods to be considered (default: P = 1). \n\nReferences\n\n[1] N. M. Wereley. Analysis and control of linear periodically time varying systems.      Ph.D. thesis, Department of Aeronautics and Astronautics, MIT, 1990.\n\n[2] S. Bittanti and P. Colaneri. Periodic Systems : Filtering and Fontrol.     Springer-Verlag London, 2009. \n\n\n\n\n\n","category":"function"},{"location":"pslifting.html#PeriodicSystems.ps2frls","page":"Conversions to LTI representations","title":"PeriodicSystems.ps2frls","text":" ps2frls(psysc::PeriodicStateSpace, N) -> sys::DescriptorStateSpace\n\nBuild the real frequency-lifted representation of a continuous-time periodic system.\n\nFor a continuos-time periodic system psysc = (A(t),B(t),C(t),D(t)), the real  LTI state-space representation sys = (At-Nt,Bt,Ct,Dt) is built, where At, Bt, Ct and Dt  are truncated block Toeplitz matrices and Nt is a block diagonal matrix.  N is the number of selected harmonic components in the Fourier series of system matrices. \n\nNote: This is an experimental implementation based on the operator representation of periodic matrices in the ApproxFun.jl package. \n\n\n\n\n\n","category":"function"},{"location":"ps.html#Building-periodic-systems","page":"Building periodic systems","title":"Building periodic systems","text":"","category":"section"},{"location":"ps.html","page":"Building periodic systems","title":"Building periodic systems","text":"PeriodicStateSpace   Periodic state space system representation.\nps  Construction of periodic state-space models.\npsmrc2d  Discretization/resampling of a multirate LTI system. ","category":"page"},{"location":"ps.html","page":"Building periodic systems","title":"Building periodic systems","text":"PeriodicStateSpace\nps\npsmrc2d","category":"page"},{"location":"ps.html#PeriodicSystems.PeriodicStateSpace","page":"Building periodic systems","title":"PeriodicSystems.PeriodicStateSpace","text":"PeriodicStateSpace(A::PM, B::PM, C::PM, D::PM) -> psys::PeriodicStateSpace{PM}\n\nConstruct a PeriodicStateSpace object from a quadruple of periodic matrix objects. \n\nThe periodic matrix objects A, B, C, D specifies the periodic matrices A(t), B(t), C(t) and D(t) of a linear periodic time-varying state space model in the continuous-time form\n\n dx(t)/dt = A(t)x(t) + B(t)u(t) ,\n y(t)     = C(t)x(t) + D(t)u(t) ,\n\nor in the discrete-time form\n\n x(t+1)  = A(t)x(t) + B(t)u(t) ,\n y(t)    = C(t)x(t) + D(t)u(t) ,\n\nwhere x(t), u(t) and y(t) are the system state vector,  system input vector and system output vector, respectively,  and t is the continuous or discrete time variable.  The system matrices satisfy A(t) = A(t+T₁), B(t) = B(t+T₂), C(t) = C(t+T₃), D(t) = D(t+T₄),   i.e., are periodic with periods T₁, T₂, T₃ and T₄, respectively.  The different periods must be commensurate (i.e., their ratios must be rational numbers with numerators and denominators up to at most 4 decimal digits).  All periodic matrix objects must have the same type PM, where PM stays for one of the supported periodic matrix types, i.e.,  PeriodicMatrix, PeriodicArray, PeriodicFunctionMatrix, PeriodicSymbolicMatrix, HarmonicArray, FourierFunctionMatrix or PeriodicTimeSeriesMatrix. \n\n\n\n\n\n","category":"type"},{"location":"ps.html#PeriodicSystems.ps","page":"Building periodic systems","title":"PeriodicSystems.ps","text":"ps([PMT::Type,] A::PM1, B::PM2, C::PM3, D::PM4) -> psys::PeriodicStateSpace\n\nConstruct a PeriodicStateSpace object from a quadruple of periodic matrix objects. \n\nThe periodic matrix objects A, B, C, D specifies the periodic matrices A(t), B(t), C(t) and D(t) of a linear periodic time-varying state space model in the continuous-time form\n\n dx(t)/dt = A(t)x(t) + B(t)u(t) ,\n y(t)     = C(t)x(t) + D(t)u(t) ,\n\nor in the discrete-time form\n\n x(t+1)  = A(t)x(t) + B(t)u(t) ,\n y(t)    = C(t)x(t) + D(t)u(t) ,\n\nwhere x(t), u(t) and y(t) are the system state vector,  system input vector and system output vector, respectively,  and t is the continuous or discrete time variable.  The system matrices satisfy A(t) = A(t+T₁), B(t) = B(t+T₂), C(t) = C(t+T₃), D(t) = D(t+T₄),   i.e., are periodic with periods T₁, T₂, T₃ and T₄, respectively.  The different periods must be commensurate (i.e., their ratios must be rational numbers with numerators and denominators up to at most 4 decimal digits).  The periodic matrix objects A, B, C, D can have different types PM1, PM2, PM3, PM4, respectively, where for a contiuous-time system  PM1, PM2, PM3, PM4 must be one of the supported continuous-time periodic matrix types, i.e.,  PeriodicFunctionMatrix, PeriodicSymbolicMatrix, HarmonicArray, FourierFunctionMatrix or PeriodicTimeSeriesMatrix, while for a discrete-time system  PM1, PM2, PM3, PM4 must be one of the supported discrete-time periodic matrix types, i.e.,  PeriodicMatrix or PeriodicArray.   Any of the objects A, B, C, D can be also specified as a real matrix or vector of appropriate size. \n\nIf PMT is not specified, the resulting psys has periodic matrices of the same type PT, such that PT is either the common type of all matrix objects or PT = PeriodicFunctionMatrix for a continuous-time system or  PT = PeriodicMatrix for a discrete-time system.  If PMT is specified, the resulting psys has periodic matrices of the same type PMT. \n\nOther convenience constructors are implemented as follows: \n\nps([PMT::Type,] A, B, C) -> psys::PeriodicStateSpace\n\nto construct a PeriodicStateSpace object for a quadruple of the form (A,B,C,0);\n\nps(D) -> psys::PeriodicStateSpace\n\nto construct a PeriodicStateSpace object for a quadruple of the form ([],[],[],D);\n\nps([PMT::Type,] A, B, C, D, period) -> psys::PeriodicStateSpace\n\nto construct a PeriodicStateSpace object with a desired period for a quadruple (A,B,C,D); all objects A, B, C, D can be also specified as real matrices or vectors of appropriate sizes. \n\nps([PMT::Type,] A, B, C, period) -> psys::PeriodicStateSpace\n\nto construct a PeriodicStateSpace object with a desired period for a quadruple (A,B,C,0); all objects A, B, C can be also specified as real matrices or vectors of appropriate sizes. \n\nps(sys::DescriptorStateSpace, period) -> psys::PeriodicStateSpace\n\nto construct a PeriodicStateSpace object with a desired period for a quadruple (sys.A,sys.B,sys.C,sys.D) (sys.E = I is assumed).\n\n\n\n\n\n","category":"function"},{"location":"ps.html#PeriodicSystems.psmrc2d","page":"Building periodic systems","title":"PeriodicSystems.psmrc2d","text":" psmrc2d(sys, Ts; ki, ko) -> psys::PeriodicStateSpace{PeriodicMatrix}\n\nPerform the multirate discretization of a linear time-invariant system.\n\nFor a continuous-time state-space system sys = (A,B,C,D), a basic sampling time Ts,  and the integer vectors ki and ko containing, respectively, the numbers of  input and output sampling subperiods, the corresponding discretized  periodic system psys = (Ap,Bp,Cp,Dp) of period T = n*Ts is determined,  where n is the least common multiple of the integers contained in ki and ko. For a continuous-time system sys  a zero-order hold based discretization method is used, such that the i-th input  is constant during intervals of length ki[i]*Ts.  An output hold device is used to provide constant intersample outputs, such that the i-th output is constant during intervals of length ko[i]*Ts.  For a discrete-time system with a defined sample time Δ,  an input and output resampling is performed using Δ as basic   sample time and the value of Ts is ignored.  If the system sample time is not defined, then the value of Ts is used as the basic sample time. \n\n\n\n\n\n","category":"function"},{"location":"pstools.html#Periodic-system-utilities","page":"Periodic system utilities","title":"Periodic system utilities","text":"","category":"section"},{"location":"pstools.html","page":"Periodic system utilities","title":"Periodic system utilities","text":"pseig   Characteristic multipliers of a periodic matrix.\npsceig   Characteristic exponents of a periodic matrix.\npschur  Periodic Schur decomposition of a product of matrices.\nphess  Periodic Hessenberg decomposition of a product of matrices.\nmonodromy  Monodromy matrix of a linear periodic time-varying system of ODE.\ntvstm  State transition matrix of a linear time-varying system of ODE.\npsreduc_reg  Fast reduction of a lifted regular pencil corresponding to a product of matrices. \ntvmeval  Time response evaluation of a continuous-time periodic matrix. \nhreval  Evaluation of a harmonic array for a numerical or symbolic time value. ","category":"page"},{"location":"pstools.html","page":"Periodic system utilities","title":"Periodic system utilities","text":"pseig\npsceig\npschur\nphess\nmonodromy\ntvstm\npsreduc_reg\ntvmeval\nhreval","category":"page"},{"location":"pstools.html#PeriodicSystems.pseig","page":"Periodic system utilities","title":"PeriodicSystems.pseig","text":" pseig(A, K = 1; lifting = false, solver, reltol, abstol, dt) -> ev\n\nCompute the characteristic multipliers of a continuous-time periodic matrix. \n\nFor the given square periodic matrix A(t) of period T,  the characteristic multipliers ev are the eigenvalues of  the monodromy matrix Ψ = Φ(T,0), where Φ(t,τ) is the state transition matrix satisfying the homogeneous linear ODE \n\ndΦ(t,τ)/dt = A(t)Φ(t,τ),  Φ(τ,τ) = I.\n\nIf lifting = false, Ψ is computed as a product of K state transition matrices  Ψ = Ψ_K*...*Ψ_1 (see monodromy with the associated keyword arguments).  The eigenvalues are computed using the periodic Schur decomposition method of [1].\n\nIf lifting = true, Ψ is (implicitly) expressed as Ψ = inv(N)*M, where M-λN is a regular pencil with N invertible and   the eigenvalues of M-λN are the same as those of the matrix product Ψ := Ψ_K*...*Ψ_1.  An efficient version of the structure exploiting fast reduction method of [2] is employed,  which embeds the determination of transition matrices into the reduction algorithm.  This option may occasionally lead to inaccurate results for large values of K.  A may be a PeriodicFunctionMatrix, or a PeriodicSymbolicMatrix, or a  HarmonicArray or a PeriodicTimeSeriesMatrix.\n\nReferences\n\n[1] A. Bojanczyk, G. Golub, and P. Van Dooren,      The periodic Schur decomposition. Algorithms and applications, Proc. SPIE 1996.\n\n[2] A. Varga & P. Van Dooren. Computing the zeros of periodic descriptor systems.     Systems and Control Letters, 50:371-381, 2003.\n\n\n\n\n\n ev = pseig(A::PeriodicMatrix; rev = true, fast = false)\n\nCompute the eigenvalues of a product of p square matrices  A(p)...*A(2)*A(1), if rev = true (default) (also called characteristic multipliers) or  of A(1)*A(2)...A(p) if rev = false, without evaluating the product.  The matrices A(1), ..., A(p) are contained in the n×n×p array A  such that the i-th matrix A(i) is contained in A[:,:,i]. If fast = false (default) then the eigenvalues are computed using an approach based on the periodic Schur decomposition [1], while if fast = true  the structure exploiting reduction [2] of an appropriate lifted pencil is employed. This later option may occasionally lead to inaccurate results for large number of matrices. \n\nReferences\n\n[1] A. Bojanczyk, G. Golub, and P. Van Dooren,      The periodic Schur decomposition. Algorithms and applications, Proc. SPIE 1996.\n\n[2] A. Varga & P. Van Dooren. Computing the zeros of periodic descriptor systems.     Systems and Control Letters, 50:371-381, 2003.\n\n\n\n\n\n ev = pseig(A::PeriodicArray; rev = true, fast = false, istart = 1)\n\nCompute the eigenvalues of a square cyclic product of p matrices  A(k-1)...*A(2)*A(1)*A(p)...*A(k), if rev = true (default) or  A(k)*A(k+1)*...A(p)*A(1)...A(k-1) if rev = false, without evaluating the product.  The keyword argument istart = k specifies the starting index (default: k = 1).  The matrices A(1), ..., A(p) are contained in the p-vector of matrices A  such that the i-th matrix  A(i), of dimensions m(i)×n(i), is contained in A[i]. If fast = false (default) then the eigenvalues are computed using an approach based on the periodic Schur decomposition [1], while if fast = true  the structure exploiting reduction [2] of an appropriate lifted pencil is employed.  This later option may occasionally lead to inaccurate results for large number of matrices. \n\nNote: The first nmin components of ev contains the core eigenvalues of the appropriate matrix product, where nmin is the minimum row dimensions of matrices A[i], for i = 1, ..., p,  while the last ncur-nmin components of ev are zero,  where ncur is the column dimension of A[k] if rev = true or  the row dimension of A[k] if rev = false. \n\nReferences\n\n[1] A. Bojanczyk, G. Golub, and P. Van Dooren,      The periodic Schur decomposition. Algorithms and applications, Proc. SPIE 1996.\n\n[2] A. Varga & P. Van Dooren. Computing the zeros of periodic descriptor systems.     Systems and Control Letters, 50:371-381, 2003.\n\n\n\n\n\n","category":"function"},{"location":"pstools.html#PeriodicSystems.psceig","page":"Periodic system utilities","title":"PeriodicSystems.psceig","text":" pcseig(A, K = 1; lifting = false, solver, reltol, abstol, dt) -> ce\n\nCompute the characteristic exponents of a periodic matrix. For a given square continuous-time periodic function matrix A(t) of period T,  the characteristic exponents ce are computed as log.(ev)/T,  where  ev are the characteristic multipliers (i.e., the eigenvalues of the monodromy matrix of A(t)).   For available options see pseig(::PeriodicFunctionMatrix).  For a given square discrete-time periodic matrix A(t) of discrete period N,   the characteristic exponents ce are computed as ev.^-N. \n\n\n\n\n\npcseig(Ahr::HarmonicArray[, N]; P, nperiod, shift, atol) -> ce\n\nCompute the characteristic exponents of a continuous-time periodic matrix in Harmonic Array representation. \n\nFor a given square continuous-time periodic function matrix Ahr(t) of period T  in a  Harmonic Array representation,  the characteristic exponents ce are computed as the eigenvalues of a truncated harmonic state operator A(N)-E(N) lying in the  fundamental strip -ω/2 <  Im(λ) ≤ ω/2, where ω = 2π/T. If Ahr(t) has the harmonic components A_0, A_1, ..., A_p, then  for N ≥ p, P = 1 and nperiod = 1, the matrices A(N) and E(N) are built as\n\n       ( A_0  A_{-1} …  A_{-p}        0    )           ( -im*ϕ_{-N}I                                 0        )\n       ( A_1   A_0             ⋱           )           (     ⋮       ⋱                                        )\n       (  ⋮         ⋱            ⋱         )           (               -im*ϕ_{-1}*I                           )\nA(N) = ( A_p             ⋱          A_{-p} ) , E(N) =  (                           -im*ϕ_{0}*I                )\n       (        ⋱           ⋱         ⋮    )           (     ⋮                                  ⋱              )\n       (  0        A_p      …         A_0  )           (     0                                   -im*ϕ_{N}I   )\n\nwith ϕ{i} := shift+i*ω. If N < p, then a truncated _full block Toeplitz matrix A(N) is built using the first N harmonic components. \n\nGenerally, for given P ≥ 1 and  nperiod ≥ 1, the block Toeplitz matrix A(N) (and also E(N)) is constructed with (2N*np+1)×(2N*np+1) blocks, with np = P*nperiod, such that each A_i is preceeded in its column by np-1 zero blocks,  each A_{-i} is preceeded in its row by np-1 zero blocks and all diagonal blocks are equal toA_0.  \n\nThe keyword argument atol (default: atol = 1.e-10) is a tolerance on the magnitude of the trailing components of the  associated eigenvectors used to validate their asymptotic (exponential) decay.  Only eigenvalues satisfying this check are returned in ce. \n\nReferences\n\n[1] J. Zhou, T. Hagiwara, and M. Araki.      Spectral characteristics and eigenvalues computation of the harmonic state operators in continuous-time periodic systems.      Systems and Control Letters, 53:141–155, 2004.\n\n\n\n\n\npcseig(A::FourierFunctionMatrix[, N]; P, atol) -> ce\n\nCompute the characteristic exponents of a continuous-time periodic matrix in Fourier Function Matrix representation. \n\nFor a given square continuous-time periodic function matrix A(t) of period T  in a  Fourier Function Matrix representation,  the characteristic exponents ce are computed as the eigenvalues of the state operator A(t)-D*I lying in the  fundamental strip -ω/2 <  Im(λ) ≤ ω/2, where ω = 2π/T. A finite dimensional truncated matrix of order n*(2*N*P+1)  is built to approximate A(t)-D*I, where n is the order of A(t),  N is the number of selected harmonic components in the Fourier representation (see FourierFunctionMatrix) and P is the period multiplication number (default: P = 1).\n\nThe keyword argument atol (default: atol = 1.e-10) is a tolerance on the magnitude of the trailing components of the  associated eigenvectors used to validate their asymptotic (exponential) decay. Only eigenvalues satisfying this check are returned in ce. \n\n\n\n\n\n","category":"function"},{"location":"pstools.html#PeriodicSystems.pschur","page":"Periodic system utilities","title":"PeriodicSystems.pschur","text":" pschur(A; rev = true, withZ = true) -> (S, Z, ev, ischur, α, γ)\n\nCompute the extended periodic Schur decomposition of a square product of matrices  A(p)*...*A(2)*A(1), if rev = true (default) or A(1)*A(2)*...*A(p) if rev = false, without evaluating the product.  The matrices A(1), ..., A(p) are contained in the p-vector of matrices A  such that the i-th matrix  A(i), of dimensions m(i)×n(i), is contained in A[i]. The resulting p-vectors S and Z contain the matrices S(1), ..., S(p) and the orthogonal matrices Z(1), ..., Z(p), respectively,  such that for rev = true\n\n       Z(2)' * A(1) * Z(1) = S(1),\n       Z(3)' * A(2) * Z(2) = S(2),\n              ...\n       Z(1)' * A(p) * Z(p) = S(p),\n\nand for rev = false\n\n       Z(1)' * A(1) * Z(2) = S(1),\n       Z(2)' * A(2) * Z(3) = S(2),\n              ...\n       Z(p)' * A(p) * Z(1) = S(p).\n\nThe resulting index ischur is determined such that m(ischur) ≤ m(i), ∀i. The resulting S(i), for i = 1, ..., p are in an extended  periodic Schur form,  with S(ischur) in a quasi-upper trapezoidal form and S(i)  upper trapezoidal for i neq ischur.  S(i) and Z(i) are contained in S[i] and Z[i], respectively.  The first nmin components of ev := α .* γ contain the core eigenvalues of the appropriate matrix product, where nmin = m(ischur), while the last nmax-nmin components of ev are zero,  where nmax is the largest row or column dimension of A(i), for i = 1, ..., p.  The eigenvalues can be alternatively expressed as α .* γ, where γ contains suitable  scaling parameters to avoid overflows or underflows in the expressions of the eigenvalues.  The performed orthogonal transformations are not accumulated if withZ = false,  in which case Z = nothing. \n\n\n\n\n\n pschur(A; sind = 1, rev = true, withZ = true) -> (S, Z, ev, ischur, α, γ)\n\nCompute the Schur decomposition of a product of square matrices  A(p)*...*A(2)*A(1), if rev = true (default) or A(1)*A(2)*...*A(p) if rev = false, without evaluating the product.  The matrices A(1), ..., A(p) are contained in the n×n×p array A  such that the i-th matrix A(i) is contained in A[:,:,i]. The resulting n×n×p arrays S and Z contain the matrices S(1), ..., S(p) and the orthogonal matrices Z(1), ..., Z(p), respectively,  such that for rev = true\n\n       Z(2)' * A(1) * Z(1) = S(1),\n       Z(3)' * A(2) * Z(2) = S(2),\n              ...\n       Z(1)' * A(p) * Z(p) = S(p),\n\nand for rev = false\n\n       Z(1)' * A(1) * Z(2) = S(1),\n       Z(2)' * A(2) * Z(3) = S(2),\n              ...\n       Z(p)' * A(p) * Z(1) = S(p).\n\nIf sind = ischur, with 1 ≤ ischur ≤ p (default ischur = 1), then  S(i), for i = 1, ..., p are in a periodic Schur form,  with S(ischur) in quasi-upper triangular (or Schur) form and S(i)  upper triangular for i neq ischur.  S(i) and Z(i) are contained in S[:,:,i] and Z[:,:,i], respectively.  The vector ev contains the eigenvalues of the appropriate matrix product.  The eigenvalues can be alternatively expressed as α .* γ, where γ contains suitable  scaling parameters to avoid overflows or underflows in the expressions of the eigenvalues.  The performed orthogonal transformations are not accumulated if withZ = false,  in which case Z = nothing. \n\n\n\n\n\n","category":"function"},{"location":"pstools.html#PeriodicSystems.phess","page":"Periodic system utilities","title":"PeriodicSystems.phess","text":" phess(A; hind = 1, rev = true, withZ = true) -> (H, Z, ihess)\n\nCompute the Hessenberg decomposition of a product of square matrices  A(p)*...*A(2)*A(1), if rev = true (default) or A(1)*A(2)*...*A(p) if rev = false, without evaluating the product.  The matrices A(1), ..., A(p) are contained in the n×n×p array A  such that the i-th matrix A(i) is contained in A[:,:,i]. The resulting n×n×p arrays H and Z contain the matrices H(1), ..., H(p) and the orthogonal matrices Z(1), ..., Z(p), respectively,  such that for rev = true\n\n       Z(2)' * A(1) * Z(1) = H(1),\n       Z(3)' * A(2) * Z(2) = H(2),\n              ...\n       Z(1)' * A(p) * Z(p) = H(p),\n\nand for rev = false\n\n       Z(1)' * A(1) * Z(2) = H(1),\n       Z(2)' * A(2) * Z(3) = H(2),\n              ...\n       Z(p)' * A(p) * Z(1) = H(p).\n\nIf hind = ihess, with 1 ≤ ihess ≤ p (default ihess = 1), then  H(i), i = 1, ..., p are in a periodic Hessenberg form,  with H(ihess) in upper Hessenberg form and H(i)  upper triangular for i neq ihess.  H(i) and Z(i) are contained in H[:,:,i] and Z[:,:,i], respectively.  The performed orthogonal transformations are not accumulated if withZ = false,  in which case Z = nothing. \n\n\n\n\n\n","category":"function"},{"location":"pstools.html#PeriodicSystems.monodromy","page":"Periodic system utilities","title":"PeriodicSystems.monodromy","text":" monodromy(A::PeriodicFunctionMatrix, K = 1; solver, reltol, abstol, dt) -> Ψ::PeriodicArray\n\nCompute the monodromy matrix for a linear ODE with periodic time-varying coefficients. \n\nFor the given square periodic function matrix A(t) of period T and subperiod T′ = T/k, where  k is the number of subperiods,   the monodromy matrix Ψ = Φ(T′,0) is computed, where Φ(t,τ) is the state transition matrix satisfying the homogeneous linear ODE \n\ndΦ(t,τ)/dt = A(t)Φ(t,τ),  Φ(τ,τ) = I.\n\nIf K > 1, then Ψ = Φ(T′,0) is determined as a product of K matrices  Ψ = Ψ_K*...*Ψ_1, where for Δ := T′/K, Ψ_i = Φ(iΔ,(i-1)Δ) is the  state transition matrix on the time interval [(i-1)Δ,iΔ]. \n\nThe state transition matrices Φ(iΔ,(i-1)Δ) are computed by integrating numerically the above homogeneous linear ODE.   The ODE solver to be employed can be  specified using the keyword argument solver, together with the required relative accuracy reltol (default: reltol = 1.e-3),  absolute accuracy abstol (default: abstol = 1.e-7) and/or  the fixed step length dt (default: dt = min(Δ, Δ*K′/100)) (see tvstm).  For large values of K, parallel computation of factors can be alternatively performed  by starting Julia with several execution threads.  The number of execution threads is controlled either by using the -t/--threads command line argument  or by using the JULIA_NUM_THREADS environment variable.  \n\n\n\n\n\n","category":"function"},{"location":"pstools.html#PeriodicSystems.tvstm","page":"Periodic system utilities","title":"PeriodicSystems.tvstm","text":" tvstm(A::PeriodicFunctionMatrix, tf, t0; solver, reltol, abstol, dt) -> Φ\n\nCompute the state transition matrix for a linear ODE with time-varying coefficients.  For the given time-dependent square matrix function A(t), initial time t0 and  final time tf, the state transition matrix Φ(tf,t0) is computed by integrating numerically the homogeneous linear ODE \n\n  dΦ(t,t0)/dt = A(t)Φ(t,t0),  Φ(t0,t0) = I\n\non the time interval [t0,tf]. The ODE solver to be employed can be  specified using the keyword argument solver (see below), together with the required relative accuracy reltol (default: reltol = 1.e-3),  absolute accuracy abstol (default: abstol = 1.e-7) and/or  the fixed step length dt (default: dt = tf-t0).  Depending on the desired relative accuracy reltol,  lower order solvers are employed for reltol >= 1.e-4,  which are generally very efficient, but less accurate. If reltol < 1.e-4, higher order solvers are employed able to cope with high accuracy demands. \n\nThe following solvers from the OrdinaryDiffEq.jl package can be selected:\n\nsolver = \"non-stiff\" - use a solver for non-stiff problems (Tsit5() or Vern9());\n\nsolver = \"stiff\" - use a solver for stiff problems (Rodas4() or KenCarp58());\n\nsolver = \"linear\" - use a special solver for linear ODEs (MagnusGL6()) with fixed time step dt;\n\nsolver = \"symplectic\" - use a symplectic Hamiltonian structure preserving solver (IRKGL16());\n\nsolver = \"\" - use the default solver, which automatically detects stiff problems (AutoTsit5(Rosenbrock23()) or AutoVern9(Rodas5())). \n\n\n\n\n\n","category":"function"},{"location":"pstools.html#PeriodicSystems.psreduc_reg","page":"Periodic system utilities","title":"PeriodicSystems.psreduc_reg","text":"psreduc_reg(A) -> (M, N)\n\nDetermine for a n×n×p array A, the matrix pair (M, N)  with N invertible and M-λN regular, such that  the eigenvalues of M-λN are the same as those of the matrix product A(p)*A(p-1)*...*A(1), where A(i) is contained in A[:,:,i].  The structure exploiting fast reduction method of [1] is employed to determine M and N.\n\n[1] A. Varga & P. Van Dooren. Computing the zeros of periodic descriptor systems.     Systems and Control Letters, 50:371-381, 2003.\n\n\n\n\n\npsreduc_reg(A) -> (M, N)\n\nDetermine for a p-dimensional vector of rectangular matrices A,  the matrix pair (M, N) with N invertible and M-λN regular, such that  the eigenvalues of M-λN are the same as those of the square  matrix product A(p)*A(p-1)*...*A(1), where A(i) is contained in A[i].  The structure exploiting fast reduction method of [1] is employed to determine M and N.\n\n[1] A. Varga & P. Van Dooren. Computing the zeros of periodic descriptor systems.     Systems and Control Letters, 50:371-381, 2003.\n\n\n\n\n\n","category":"function"},{"location":"pstools.html#PeriodicSystems.tvmeval","page":"Periodic system utilities","title":"PeriodicSystems.tvmeval","text":" tvmeval(At::PeriodicTimeSeriesMatrix, t; method = \"linear\") -> A::Vector{Matrix}\n\nEvaluate the time response of a periodic time series matrix.\n\nFor the periodic time series matrix At and the vector of time values t,  an interpolation/extrapolation based approximation   A[i] is evaluated for each time value t[i]. The keyword parameter method specifies the interpolation/extrapolation method to be used for periodic data.  The following interpolation methods from the Interpolations.jl  package can be selected: \n\nmethod = \"constant\" - use periodic B-splines of degree 0; \n\nmethod = \"linear\" - use periodic B-splines of degree 1 (periodic linear interpolation) (default);\n\nmethod = \"quadratic\" - use periodic B-splines of degree 2 (periodic quadratic interpolation); \n\nmethod = \"cubic\" - use periodic B-splines of degree 3 (periodic cubic interpolation).\n\n\n\n\n\n tvmeval(Ahr::HarmonicArray, t; ntrunc, exact = true) -> A::Vector{Matrix}\n\nEvaluate the time response of a harmonic array.\n\nFor the harmonic array Ahr representing representing a continuous-time  time periodic matrix A(t) and the vector of time values t,  A[i] = A(t[i]) is computed for each time value t[i].  If exact = true (default) an exact evaluation is computed, while for exact = false,  a linear interpolation based approximation is computed  (potentially more accurate in intersample points). The keyword argument ntrunc specifies the number of harmonics to be used for evaluation  (default: maximum possible number of harmonics). \n\n\n\n\n\n tvmeval(Asym::PeriodicSymbolicMatrix, t) -> A::Vector{Matrix}\n\nEvaluate the time response of a periodic symbolic matrix.\n\nFor the periodic symbolic matrix Asym representing a time periodic matrix A(t) and the vector of time values t,  A[i] = A(t[i]) is evaluated for each time value t[i]. \n\n\n\n\n\n tvmeval(Af::PeriodicFunctionMatrix, t) -> A::Vector{Matrix}\n\nEvaluate the time response of a periodic function matrix.\n\nFor the periodic function matrix Af representing a time periodic matrix A(t) and the vector of time values t,  A[i] = A(t[i]) is evaluated for each time value t[i]. \n\n\n\n\n\n","category":"function"},{"location":"pstools.html#PeriodicSystems.hreval","page":"Periodic system utilities","title":"PeriodicSystems.hreval","text":" hreval(Ahr::HarmonicArray, t; ntrunc, exact = true) -> A::Matrix\n\nEvaluate the harmonic array Ahr representing a continuous-time  time periodic matrix A(t) for a numerical or symbolic time value t.  For a real value t, if exact = true (default) an exact evaluation is computed, while for exact = false,  a linear interpolation based approximation is computed (potentially more accurate in intersample points). The keyword argument ntrunc specifies the number of harmonics to be used for the evaluation  (default: maximum possible number).  If t is a symbolic variable, a symbolic evaluation of A(t) is performed (see also hr2psm)\n\n\n\n\n\n","category":"function"},{"location":"pstypes.html#Constructors-for-periodic-matrices","page":"Constructors for periodic matrices","title":"Constructors for periodic matrices","text":"","category":"section"},{"location":"pstypes.html","page":"Constructors for periodic matrices","title":"Constructors for periodic matrices","text":"PeriodicMatrix   Discrete-time periodic matrix representation.\nPeriodicArray    Discrete-time periodic array representation.\nPeriodicFunctionMatrix  Continuous-time periodic function matrix representation.\nPeriodicSymbolicMatrix   Continuous-time periodic symbolic matrix representation.\nPeriodicTimeSeriesMatrix   Continuous-time periodic time series matrix representation.\nHarmonicArray   Continuous-time harmonic array representation.\nFourierFunctionMatrix   Continuous-time Fourier functin matrix representation.","category":"page"},{"location":"pstypes.html","page":"Constructors for periodic matrices","title":"Constructors for periodic matrices","text":"PeriodicMatrix\nPeriodicArray\nPeriodicFunctionMatrix\nPeriodicSymbolicMatrix\nPeriodicTimeSeriesMatrix\nHarmonicArray\nHarmonicArray(A0::MT, Acos::Union{Nothing, Vector{MT}}, Asin::Union{Nothing, Vector{MT}}, period::Real) where {T<:Real, MT<:VecOrMat{T}} \nFourierFunctionMatrix","category":"page"},{"location":"pstypes.html#PeriodicSystems.PeriodicMatrix","page":"Constructors for periodic matrices","title":"PeriodicSystems.PeriodicMatrix","text":"PeriodicMatrix(M, T) -> A::PeriodicMatrix\n\nDiscrete-time periodic matrix representation. \n\nThe discrete-time periodic matrix object A is built from a  p-vector M of real matrices, the associated time period T and  the number of subperiods specified via the keyword argument nperiod = k. \n\nM contains the cyclic component matrices M[i], i = 1,..., p,  where M[i] represents the value M(Δ(i-1)) of a time periodic matrix M(t) of period T/k, with Δ := T/(kp), the associated sample time.  It is assumed that M[k] := M[mod(k-1,p)+1] for arbitrary k.  All component matrices are allowed to have arbitrary (time-varying) dimensions. The component matrices M, the period T, the discrete period p and the sample time Δ can be accessed via A.M, A.period, A.dperiod and A.Ts, respectively. \n\n\n\n\n\n","category":"type"},{"location":"pstypes.html#PeriodicSystems.PeriodicArray","page":"Constructors for periodic matrices","title":"PeriodicSystems.PeriodicArray","text":"PeriodicArray(M, T; nperiod = k) -> A::PeriodicArray\n\nDiscrete-time periodic array representation.\n\nThe discrete-time periodic array object A is built from a m×n×p real array M, the associated time period T and the number of subperiods specified via  the keyword argument nperiod = k.  M contains the cyclic component matrices M[:,:,i], i = 1,..., p,  where M[:,:,i] represents the value M(Δ(i-1)) of a time periodic matrix M(t) of period T/k, with Δ := T/(kp), the associated sample time.  It is assumed that  M[:,:,k] := M[:,:,mod(k-1,p)+1] for arbitrary k.  The component matrices M, the period T, the discrete period p and the sample time Δ can be accessed via A.M, A.period, A.dperiod and A.Ts, respectively. \n\n\n\n\n\n","category":"type"},{"location":"pstypes.html#PeriodicSystems.PeriodicFunctionMatrix","page":"Constructors for periodic matrices","title":"PeriodicSystems.PeriodicFunctionMatrix","text":"PeriodicFunctionMatrix(f, T; nperiod = k) -> A::PeriodicFunctionMatrix\n\nContinuous-time periodic function matrix representation.\n\nThe continuous-time periodic function matrix object A is built from a  time periodic real matrix function f(t) of real time variable t,  the associated time period T and the associated number of subperiods specified via the keyword argument nperiod = k.  It is assumed that  F(t) = F(t+T/k) for any real time value t. The function f(t), the period T, the row and column dimensions  of f(t), the number of subperiods k can be accessed via A.f, A.period,  the tuple A.dims and A.nperiod, respectively. \n\n\n\n\n\n","category":"type"},{"location":"pstypes.html#PeriodicSystems.PeriodicSymbolicMatrix","page":"Constructors for periodic matrices","title":"PeriodicSystems.PeriodicSymbolicMatrix","text":"PeriodicSymbolicMatrix(F, T; nperiod = k) -> A::PeriodicSymbolicMatrix\n\nContinuous-time periodic symbolic matrix representation.\n\nThe continuous-time periodic symbolic matrix object A is built from F, a  symbolic periodic real matrix or vector of symbolic variable t,  the associated time period T and the associated number of subperiods specified via the keyword argument nperiod = k.  It is assumed that  F(t) = F(t+T/k) for any real time value t. The symbolic matrix F, the period T and the number of subperiods k  can be accessed via A.F, A.period and A.nperiod, respectively.\n\n\n\n\n\n","category":"type"},{"location":"pstypes.html#PeriodicSystems.PeriodicTimeSeriesMatrix","page":"Constructors for periodic matrices","title":"PeriodicSystems.PeriodicTimeSeriesMatrix","text":"PeriodicTimeSeriesMatrix(At, T; nperiod = k) -> A::PeriodicTimeSeriesMatrix\n\nContinuous-time periodic time series matrix representation.\n\nThe continuous-time periodic time series matrix object A of period T is built from a  p-vector At of real matrices and the associated subperiod T′ = T/k, where k ≥ 1 is the number of subperiods (default: k = 1).  At contains the cyclic component matrices At[i], i = 1,..., p,  where At[i] represents the value A(Δ(i-1)) of a time periodic matrix A(t) of period T′, with Δ := T′/p, the associated sampling time. It is assumed that At[i] := At[mod(i-1,p)+1] for arbitrary i.  All component matrices must have the same dimensions. The component matrices At, the period T and the number of subperiods k can be accessed via A.values, A.period, and A.nperiod, respectively. \n\n\n\n\n\n","category":"type"},{"location":"pstypes.html#PeriodicSystems.HarmonicArray","page":"Constructors for periodic matrices","title":"PeriodicSystems.HarmonicArray","text":" HarmonicArray(Ahr, T; nperiod = k) -> A::HarmonicArray\n\nContinuous-time harmonic array representation.\n\nThe harmonic array object A of period T is built using the harmonic representation of a periodic matrix Ahr(t) of subperiod T′ = T/k in the form\n\n                 p\n Ahr(t) = A_0 +  ∑ ( Ac_i*cos(i*t*2*π/T′)+As_i*sin(i*2*π*t/T′) ) ,\n                i=1\n\nwhere k ≥ 1 is the number of subperiods (default: k = 1).                    The m×n×(p+1) complex array Ahr contains the harmonic components as follows: Ahr[:,:,1] contains the constant term A_0 (the mean value) and the real and imaginary parts of Ahr[:,:,i+1]   for i = 1, ..., p contain the coefficient matrices Ac_i and As_i, respectively.  The complex matrix Ahr containing the harmonic components, the period T and the  number of subperiods k can be accessed via A.values, A.period and A.nperiod, respectively.\n\n\n\n\n\n HarmonicArray(A0, Ac, As, T) -> A::HarmonicArray\n\nConstruct a harmonic array representation from the harmonic components.\n\nThe harmonic array object A is built for  the harmonic representation Ahr(t) of a periodic matrix of period T in the form\n\n                 p\n Ahr(t) = A_0 +  ∑ ( Ac_i*cos(i*t*2*π/T)+As_i*sin(i*2*π*t/T) ) ,\n                i=1\n\nwhere the constant term A_0 is contained in the real matrix A0, and Ac and As are vectors of real matrices such that the i-th (cosinus) coefficient matrix  Ac_i is contained in Ac[i] and the i-th (sinus) coefficient matrix  As_i is contained in As[i]. p is the maximum of length of the vectors of matrices Ac and As.  If the length of Ac or As is less than p, then zero trailing matrices are assumed in the respective matrix.  All component matrices must have the same dimensions. The complex matrix containing the harmonic components and the period T  can be accessed via A.values and A.period, respectively.\n\n\n\n\n\n","category":"type"},{"location":"pstypes.html#PeriodicSystems.HarmonicArray-Union{Tuple{MT}, Tuple{T}, Tuple{MT, Union{Nothing, Vector{MT}}, Union{Nothing, Vector{MT}}, Real}} where {T<:Real, MT<:VecOrMat{T}}","page":"Constructors for periodic matrices","title":"PeriodicSystems.HarmonicArray","text":" HarmonicArray(A0, Ac, As, T) -> A::HarmonicArray\n\nConstruct a harmonic array representation from the harmonic components.\n\nThe harmonic array object A is built for  the harmonic representation Ahr(t) of a periodic matrix of period T in the form\n\n                 p\n Ahr(t) = A_0 +  ∑ ( Ac_i*cos(i*t*2*π/T)+As_i*sin(i*2*π*t/T) ) ,\n                i=1\n\nwhere the constant term A_0 is contained in the real matrix A0, and Ac and As are vectors of real matrices such that the i-th (cosinus) coefficient matrix  Ac_i is contained in Ac[i] and the i-th (sinus) coefficient matrix  As_i is contained in As[i]. p is the maximum of length of the vectors of matrices Ac and As.  If the length of Ac or As is less than p, then zero trailing matrices are assumed in the respective matrix.  All component matrices must have the same dimensions. The complex matrix containing the harmonic components and the period T  can be accessed via A.values and A.period, respectively.\n\n\n\n\n\n","category":"method"},{"location":"pstypes.html#PeriodicSystems.FourierFunctionMatrix","page":"Constructors for periodic matrices","title":"PeriodicSystems.FourierFunctionMatrix","text":" FourierFunctionMatrix(Afun, T) -> A::FourierFunctionMatrix\n\nContinuous-time Fourier function matrix representation.\n\nThe Fourier function matrix object A of period T is built using the Fourier series representation of a periodic matrix Afun(t) of subperiod T′ = T/k,  where each entry of Afun(t) has the form\n\n         p\n  a_0 +  ∑ ( ac_i*cos(i*t*2*π/T′)+as_i*sin(i*2*π*t/T′) ) ,\n        i=1\n\nwhere k ≥ 1 is the number of subperiods (default: k = 1).    The matrix Afun containing the Fourier representation, the period T and the  number of subperiods k can be accessed via A.M, A.period and A.nperiod, respectively.\n\n\n\n\n\n","category":"type"},{"location":"psconv.html#Periodic-matrix-conversions","page":"Periodic matrix conversions","title":"Periodic matrix conversions","text":"","category":"section"},{"location":"psconv.html","page":"Periodic matrix conversions","title":"Periodic matrix conversions","text":"ts2hr   Conversion of  a periodic time series matrix to a harmonic array approximation.\npfm2hr  Conversion of  a periodic function matrix to a harmonic array representation. \nts2pfm  Conversion of  an interpolated periodic time series matrix to a periodic function matrix.\nhr2psm  Conversion of  a harmonic array representation to a periodic symbolic matrix.\npsm2hr  Conversion of  a periodic symbolic matrix into a harmonic array representation.\npm2pa   Conversion of  a discrete-time periodic matrix object to a periodic array object.\nffm2hr  Conversion of  a Fourier function matrix to a harmonic array representation. \nhr2bt   Building a block Toeplitz matrix approximation of a harmonic (Fourier) array representation. \nhr2btupd  Building an updated block Toeplitz matrix approximation of a harmonic (Fourier) array representation. ","category":"page"},{"location":"psconv.html","page":"Periodic matrix conversions","title":"Periodic matrix conversions","text":"ts2hr\npfm2hr\nts2pfm\nhr2psm\npsm2hr\npm2pa\nffm2hr\nhr2bt\nhr2btupd","category":"page"},{"location":"psconv.html#PeriodicSystems.ts2hr","page":"Periodic matrix conversions","title":"PeriodicSystems.ts2hr","text":" ts2hr(A::PeriodicTimeSeriesMatrix; atol = 0, rtol = √ϵ, n, squeeze = true) -> Ahr::HarmonicArray\n\nCompute the harmonic (Fourier) approximation of a periodic matrix specified by a time series matrix.  The periodic matrix A(t) is specified as a continuous-time periodic time series matrix A,  with m matrices contained in the vector of matrices A.values, where A.values[k]  is the value of A(t) at time moment (k-1)T/m, with T = A.period being the period.  The resulting harmonic approximation Ahr(t) of A(t) has the form\n\n                 p\n Ahr(t) = A_0 +  ∑ ( Ac_i*cos(i*t*2*π/T)+As_i*sin(i*2*π*t/T) ) \n                i=1\n\nwhere A_0 is the constant term (the mean value), Ac_i and As_i are the   coefficient matrices of the i-th cosinus and sinus terms, respectively.  The order of the approximation p is determined using the maximum order specified by n  (default: n = (m-1)/2) and the absolute and relative tolerances atol and rtol, as follows: p is the minimum between n, (m-1)/2 and the maximum index k  such that Ac_k and/or As_k are nonzero. The tolerance used to assess nonzero elements is tol = max(atol, rtol*maxnorm), where  maxnorm is the maximum norm of the matrices contained in A.values. The default values of tolerances are atol = 0 and rtol = √ϵ, where ϵ is the working machine precision.\n\nThe resulting harmonic approximation Ahr(t) is returned in the harmonic array object Ahr  (see HarmonicArray). \n\n\n\n\n\n","category":"function"},{"location":"psconv.html#PeriodicSystems.pfm2hr","page":"Periodic matrix conversions","title":"PeriodicSystems.pfm2hr","text":" pfm2hr(A::PeriodicFunctionMatrix; nsample, NyquistFreq) -> Ahr::HarmonicArray\n\nConvert a periodic function matrix into a harmonic array representation.  If A(t) is a periodic function matrix of period T, then the harmonic array representation Ahr is determined by applying the fast Fourier transform to the sampled arrays A(iΔ), i = 0, ..., k, where Δ = T/k is the sampling period and k is the number of samples specified by the keyword argument nsample = k (default: k = 128). If the Nyquist frequency f is specified via the keyword argument NyquistFreq = f, then k is chosen k = 2*f*T to avoid signal aliasing.     \n\n\n\n\n\n","category":"function"},{"location":"psconv.html#PeriodicSystems.ts2pfm","page":"Periodic matrix conversions","title":"PeriodicSystems.ts2pfm","text":" ts2pfm(At::PeriodicTimeSeriesMatrix; method = \"linear\") -> A::PeriodicFunctionMatrix\n\nCompute the periodic function matrix corresponding to an interpolated periodic time series matrix.  For the given periodic time series matrix At, a periodic function matrix A(t) is defined as the  mapping A(t) = t -> etpf(t), where etpf(t) is a periodic interpolation/extrapolation object,   as provided in the Interpolations.jl  package.  The keyword parameter method specifies the interpolation/extrapolation method to be used as follows:\n\nmethod = \"constant\" - use periodic B-splines of degree 0 (periodic constant interpolation);\n\nmethod = \"linear\" - use periodic B-splines of degree 1 (periodic linear interpolation) (default);\n\nmethod = \"quadratic\" - use periodic B-splines of degree 2 (periodic quadratic interpolation); \n\nmethod = \"cubic\" - use periodic B-splines of degree 3 (periodic cubic interpolation). \n\n\n\n\n\n","category":"function"},{"location":"psconv.html#PeriodicSystems.hr2psm","page":"Periodic matrix conversions","title":"PeriodicSystems.hr2psm","text":" hr2psm(Ahr::HarmonicArray, nrange) -> A::Matrix{Num}\n\nConvert a range of harmonic components nrange of the harmonic array Ahr to a symbolic matrix A.  The default range is nrange = 0:n, where n is the order of the maximum harmonics.  \n\n\n\n\n\n","category":"function"},{"location":"psconv.html#PeriodicSystems.psm2hr","page":"Periodic matrix conversions","title":"PeriodicSystems.psm2hr","text":" psm2hr(A::PeriodicSymbolicMatrix; nsample, NyquistFreq) -> Ahr::HarmonicArray\n\nConvert a periodic symbolic matrix into a harmonic array representation.  If A(t) is a periodic symbolic matrix of period T, then the harmonic array representation Ahr is determined by applying the fast Fourier transform to the sampled arrays A(iΔ), i = 0, ..., k, where Δ = T/k is the sampling period and k is the number of samples specified by the keyword argument nsample = k (default: k = 128). If the Nyquist frequency f is specified via the keyword argument NyquistFreq = f, then k is chosen k = 2*f*T to avoid signal aliasing.     \n\n\n\n\n\n","category":"function"},{"location":"psconv.html#PeriodicSystems.pm2pa","page":"Periodic matrix conversions","title":"PeriodicSystems.pm2pa","text":" pm2pa(At::PeriodicMatrix) -> A::PeriodicArray\n\nConvert a discrete-time periodic matrix object into a discrete-time periodic array object.\n\nThe discrete-time periodic matrix object At contains a   p-vector At of real matrices At[i], i = 1,..., p,  the associated time period T and the number of subperiods k. The resulting discrete-time periodic array object A of period T and number of subperiods k  is built from a m×n×p real array A, such that A[:,:,i]  contains At[i], for i = 1,..., p.  For non-constant dimensions, the resulting m and n are the maximum row and column dimensions, respectively, and the resulting component matrices A[:,:,i] contain At[i], appropriately padded with zero entries. \n\n\n\n\n\n","category":"function"},{"location":"psconv.html#PeriodicSystems.ffm2hr","page":"Periodic matrix conversions","title":"PeriodicSystems.ffm2hr","text":" ffm2hr(A::FourierFunctionMatrix; atol = 0, rtol = √ϵ, squeeze = true) -> Ahr::HarmonicArray\n\nCompute the harmonic (Fourier) representation of a Fourier periodic matrix object. \n\nThe Fourier function matrix object A of period T is built using the Fourier series representation of a periodic matrix Afun(t) of subperiod T′ = T/k,  where each entry of Afun(t) has the form\n\n         p\n  a_0 +  ∑ ( ac_i*cos(i*t*2*π/T′)+as_i*sin(i*2*π*t/T′) ) ,\n        i=1\n\nwhere k ≥ 1 is the number of subperiods (default: k = 1).    The resulting harmonic approximation Ahr(t) of Afun(t) has the form\n\nThe harmonic array object A of period T is built using the harmonic representation of a periodic matrix Ahr(t) of subperiod T′′ = T/k′ in the form                      p′      Ahr(t) = A0 +  ∑ ( Acicos(it2π/T′′)+As_isin(i2πt/T′′) ) ,                     i=1 \n\nwhere k′ ≥ 1 is the number of subperiods.                                         p      Ahr(t) = A0 +  ∑ ( Acicos(it2π/T)+Asisin(i2πt/T) )                      i=1  p′ is the maximum index j, such that `Acjand/orAsjare nonzero. The tolerance used to assess nonzero elements istol = max(atol, rtol*maxnorm), wheremaxnormis the maximum absolute value of the coefficientsaciandas_iinAfun(t). The default values of tolerances areatol = 0andrtol = √ϵ, whereϵis the working machine precision. The resulting harmonic approximationAhr(t)is returned in the harmonic array objectAhr(see [HarmonicArray`](@ref)). \n\n\n\n\n\n","category":"function"},{"location":"psconv.html#PeriodicSystems.hr2bt","page":"Periodic matrix conversions","title":"PeriodicSystems.hr2bt","text":" hr2bt(Ahr::HarmonicArray, N; P, nperiod]) -> Abt::Matrix\n\nBuild the block Toeplitz matrix of a harmonic (Fourier) array representation of a periodic matrix. \n\nThe harmonic representation object Ahr of period T of a periodic matrix Ahr(t)  of subperiod T′ = T/k is in the form\n\n                 p\n Ahr(t) = A_0 +  ∑ ( Ac_i*cos(i*t*2*π/T′)+As_i*sin(i*2*π*t/T′) ) ,\n                i=1\n\nwhere k ≥ 1 is the number of subperiods. Ahr(t) can be equivalently expressed in the Fourier series representation form                 p      Ahr(t) =   ∑ A_iexp(imiωht) ,                i=-p\n\nwhere ωh = 2π/T′, A_i = (Ac_i-im*As_i)/2 and  A_{-i} = (Ac_i+im*As_i)/2.  N is the number of selected harmonic components (or Fourier modes) used for approximation.  The keyword parameter P is the number of full periods to be considered (default: P = 1) and nperiod is the number of subperiods to be considered, such that 1 ≤ nperiod ≤ k (default: nperiod = k). \n\nFor a given number N ≥ p, if the number of period is P = 1 and the number of subperiods is nperiod = 1,  then the banded block Toeplitz matrix Abt with (2N+1)×(2N+1) blocks is constructed\n\n       ( A_0  A_{-1} …  A_{-p}        0    )\n       ( A_1   A_0             ⋱           )\n       (  ⋮         ⋱            ⋱         )\n Abt = ( A_p             ⋱          A_{-p} )\n       (        ⋱           ⋱         ⋮    )\n       (  0        A_p      …         A_0  )\n\nIf N < p, then a truncated full block Toeplitz matrix is built using the first N harmonic components. \n\nGenerally, for given P ≥ 1 and  nperiod ≥ 1, the block Toeplitz matrix Abt is constructed with (2N*np+1)×(2N*np+1) blocks, with np = P*nperiod, such that each A_i is preceeded in its column by np-1 zero blocks,  each A_{-i} is preceeded in its row by np-1 zero blocks and all diagonal blocks are equal toA_0.   \n\n\n\n\n\n","category":"function"},{"location":"psconv.html#PeriodicSystems.hr2btupd","page":"Periodic matrix conversions","title":"PeriodicSystems.hr2btupd","text":" hr2btupd(Ahr::HarmonicArray, N; P, nperiod, shift]) -> Ab::Matrix\n\nBuild the updated block Toeplitz matrix of a harmonic (Fourier) array representation of a periodic matrix. \n\nIf BT is the block Toeplitz matrix of the harmonic array representation of the n × n periodic matrix Ahr of subperiod T′  (see HarmonicArray) as constructed with hr2bt, then the updated matrix Ab = BT-NT is constructed,  with NT a block-diagonal matrix with n × n diagonal blocks. The k-th diagonal block of NT is the diagonal matrix im*(μ + k*ωh)*I, where μ is a shift specified via  the keyword parameter shift = μ (default: μ = 0)  and ωh is the base frequency computed as ωh = 2π*nperiod/(P*T′).  The value of shift must satisfy 0 ≤ μ ≤ ωh/2. \n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"Home","title":"Home","text":"CurrentModule = PeriodicSystems\nDocTestSetup = quote\n    using PeriodicSystems\nend","category":"page"},{"location":"index.html#PeriodicSystems.jl","page":"Home","title":"PeriodicSystems.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"(Image: DocBuild) (Image: Code on Github.)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"PeriodicSystems.jl is intended to be a collection of Julia functions for numerical computations related to periodic system representations in the continuous-time form","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":" dx(t)/dt = A(t)x(t) + B(t)u(t) ,\n y(t)     = C(t)x(t) + D(t)u(t) ,","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"or in the discrete-time form","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":" x(t+1)  = A(t)x(t) + B(t)u(t) ,\n y(t)    = C(t)x(t) + D(t)u(t) ,","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"where x(t), u(t) and y(t) are the system state vector, system input vector and system output vector, respectively, and t is the continuous or discrete time variable. The system matrices satisfy A(t) = A(t+T), B(t) = B(t+T), C(t) = C(t+T), D(t) = D(t+T),  i.e., are periodic with period T. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Many control applications are formulated as genuine periodic control problems as for example, satellite attitude control, helicopter forward flight control, orbital stabilization of underactuated systems, etc. Besides that, periodic systems represent a general framework to analyze and design multi-rate sampled-data systems. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The targeted functionality of this package is described in [1] and will cover both continuous-time and discrete-time periodic systems. The following categories of functions are planned:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Building periodic system state-space models","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"PeriodicStateSpace   Periodic state space system representation.\nps  Construction of periodic state-space models.\npsmrc2d  Discretization/resampling of a multirate LTI system. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Basic operations on periodic system models","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Discretization of continuous-time periodic systems","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"psc2d  Discretization of a continuous-time periodic system. ","category":"page"},{"location":"index.html#Conversions-to-LTI-representations","page":"Home","title":"Conversions to LTI representations","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"psaverage  Computation of the averaged LTI system of a periodic system.\nps2fls  Computation of a complex LTI frequency-lifted representation of a continuous-time periodic system. \nps2frls  Computation of a real LTI frequency-lifted representation of a continuous-time periodic system. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Solving periodic matrix equations","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Simplification of periodic system models","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Periodic system analysis","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Periodic output and state feedback controller design ","category":"page"},{"location":"index.html#[Release-Notes](https://github.com/andreasvarga/PeriodicSystems.jl/blob/master/ReleaseNotes.md)","page":"Home","title":"Release Notes","text":"","category":"section"},{"location":"index.html#Main-developer","page":"Home","title":"Main developer","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Andreas Varga","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"License: MIT (expat)","category":"page"},{"location":"index.html#References","page":"Home","title":"References","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"[1] A. Varga. A Periodic Systems Toolbox for Matlab. Proc. of IFAC 2005 World Congress, Prague, Czech Republic, 2005.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"[2] S. Bittanti and P. Colaneri. Periodic Systems - Filtering and Control, Springer Verlag, 2009.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"[3]  A. Varga, MatrixPencils.jl: Matrix pencil manipulation using Julia. Zenodo: https://doi.org/10.5281/zenodo.3894503.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"[4]  A. Varga, MatrixEquations.jl: Solution of Lyapunov, Sylvester and Riccati matrix equations using Julia. Zenodo: https://doi.org/10.5281/zenodo.3556867.","category":"page"},{"location":"makeindex.html#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"makeindex.html","page":"Index","title":"Index","text":"Pages = [ \"pstypes.md\", \"ps.md\", \"psconversions.md\", \"pslifting.md\", \"pstools.md\", \"psconv.md\", \"slicot.md\" ]\nModule = [\"PeriodicSystems\"]\nOrder = [:type, :function]","category":"page"},{"location":"psconversions.html#Discretization-of-continuous-time-periodic-systems","page":"Discretization of continuous-time periodic systems","title":"Discretization of continuous-time periodic systems","text":"","category":"section"},{"location":"psconversions.html","page":"Discretization of continuous-time periodic systems","title":"Discretization of continuous-time periodic systems","text":"psc2d  Discretization of a continuous-time periodic system. ","category":"page"},{"location":"psconversions.html","page":"Discretization of continuous-time periodic systems","title":"Discretization of continuous-time periodic systems","text":"psc2d","category":"page"},{"location":"psconversions.html#PeriodicSystems.psc2d","page":"Discretization of continuous-time periodic systems","title":"PeriodicSystems.psc2d","text":" psc2d(psysc, Ts; solver, reltol, abstol, dt) -> psys::PeriodicStateSpace{PeriodicMatrix}\n\nCompute for the continuous-time periodic system psysc = (A(t),B(t),C(t),D(t)) of period T and  for a sampling time Ts, the corresponding discretized periodic system psys = (Ad,Bd,Cd,Dd) using a zero-order hold based discretization method. \n\nThe discretization is performed by determining the monodromy matrix as a product of  K = T/Ts state transition matrices of the extended state-space matrix [A(t) B(t); 0 0]  by integrating numerically the corresponding homogeneous linear ODE.   The ODE solver to be employed can be  specified using the keyword argument solver, together with the required relative accuracy reltol (default: reltol = 1.e-3),  absolute accuracy abstol (default: abstol = 1.e-7) and/or  the fixed step length dt (default: dt = Ts/10) (see tvstm).  For large values of K, parallel computation of factors can be alternatively performed  by starting Julia with several execution threads.  The number of execution threads is controlled either by using the -t/--threads command line argument  or by using the JULIA_NUM_THREADS environment variable.  \n\n\n\n\n\n","category":"function"}]
}
