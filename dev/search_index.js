var documenterSearchIndex = {"docs":
[{"location":"makeindex.html#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"makeindex.html","page":"Index","title":"Index","text":"Pages = [ \"pstypes.md\", \"ps.md\", \"psconversions.md\", \"pslifting.md\", \"psanalysis.md\", \"pslyap.md\", \"psric.md\", \"pschur.md\", \"pstools.md\", \"psconv.md\", \"slicot.md\" ]\nModule = [\"PeriodicSystems\"]\nOrder = [:type, :function]","category":"page"},{"location":"psanalysis.html#Analysis-of-periodic-systems","page":"Analysis of periodic systems","title":"Analysis of periodic systems","text":"","category":"section"},{"location":"psanalysis.html","page":"Analysis of periodic systems","title":"Analysis of periodic systems","text":"pspole  Computation of the poles of a periodic system.\npszero  Computation of the zeros of a periodic system.\nisstable  Assessment of stability of a periodic system.","category":"page"},{"location":"psanalysis.html","page":"Analysis of periodic systems","title":"Analysis of periodic systems","text":"pspole\npszero\nisstable","category":"page"},{"location":"pschur.html#Periodic-Schur-decompositions","page":"Periodic Schur decompositions","title":"Periodic Schur decompositions","text":"","category":"section"},{"location":"pschur.html","page":"Periodic Schur decompositions","title":"Periodic Schur decompositions","text":"phess  Periodic Hessenberg decomposition of a product of matrices.\nphess!  Periodic Hessenberg decomposition of a product of matrices (in place computation).\npschur  Periodic Schur decompositions of products or quotient products of matrices. \npschur!  Periodic Schur decompositions of products of matrices (in place computation). \npsordschur!  Reordering of periodic Schur decompositions of products or quotient products of matrices.\npsordschur1!  Reordering of periodic Schur decompositions of products or quotient products of square matrices.\npgschur  Generalized real periodic Schur decomposition of a formal product of matrices.\npgschur!  Generalized real periodic Schur decompositions of formal products of matrices (in place computation).\npgordschur!  Reordering of generalized real periodic Schur decompositions a formal products of matrices.","category":"page"},{"location":"pschur.html","page":"Periodic Schur decompositions","title":"Periodic Schur decompositions","text":"phess\nphess!\npschur\npschur!\npsordschur!\npsordschur1!\npgschur\npgschur!\npgordschur!","category":"page"},{"location":"pschur.html#PeriodicSystems.phess","page":"Periodic Schur decompositions","title":"PeriodicSystems.phess","text":" phess(A::Array{Float64,3}; hind = 1, rev = true, withZ = true) -> (H, Z, ihess)\n phess1(A::Array{Float64,3}; hind = 1, rev = true, withZ = true) -> (H, Z, ihess)\n\nCompute the Hessenberg decomposition of a product of square matrices  A(p)*...*A(2)*A(1), if rev = true (default) or A(1)*A(2)*...*A(p) if rev = false, without evaluating the product.  The matrices A(1), ..., A(p) are contained in the n×n×p array A  such that the i-th matrix A(i) is contained in A[:,:,i]. The resulting n×n×p arrays H and Z contain the matrices H(1), ..., H(p) and the orthogonal matrices Z(1), ..., Z(p), respectively,  such that for rev = true\n\n       Z(2)' * A(1) * Z(1) = H(1),\n       Z(3)' * A(2) * Z(2) = H(2),\n              ...\n       Z(1)' * A(p) * Z(p) = H(p),\n\nand for rev = false\n\n       Z(1)' * A(1) * Z(2) = H(1),\n       Z(2)' * A(2) * Z(3) = H(2),\n              ...\n       Z(p)' * A(p) * Z(1) = H(p).\n\nIf hind = ihess, with 1 ≤ ihess ≤ p (default ihess = 1), then  H(i), i = 1, ..., p are in a periodic Hessenberg form,  with H(ihess) in upper Hessenberg form and H(i)  upper triangular for i neq ihess.  H(i) and Z(i) are contained in H[:,:,i] and Z[:,:,i], respectively.  The performed orthogonal transformations are not accumulated if withZ = false,  in which case Z = nothing. \n\nThe function phess is based on a wrapper for the SLICOT subroutine MB03VW    (see PeriodicSystems.SLICOTtools.mb03vw!).\n\nThe function phess1 is based on wrappers for the SLICOT subroutines MB03VD   (see PeriodicSystems.SLICOTtools.mb03vd!) and MB03VY  (see PeriodicSystems.SLICOTtools.mb03vy!).\n\n\n\n\n\n","category":"function"},{"location":"pschur.html#PeriodicSystems.phess!","page":"Periodic Schur decompositions","title":"PeriodicSystems.phess!","text":" phess!(A::Array{Float64,3}, ilh::Tuple(Int,Int) = (1, size(A,1)); kwargs...) -> (H, Z, ihess)\n\nSame as phess(A; kwargs...) but uses the input matrix A as workspace and specifies a range ilh = (ilo, ihi), such that all matrices A(j), j = 1, ..., p, are already in periodic Hessenberg forms in rows and columns 1:ilo-1 and ihi+1:n, where n is the first dimension of A.\n\n\n\n\n\n","category":"function"},{"location":"pschur.html#PeriodicSystems.pschur","page":"Periodic Schur decompositions","title":"PeriodicSystems.pschur","text":" pschur(A::Array{Float64,3}; rev = true, withZ = true) -> (S, Z, ev, ischur, α, γ)\n pschur1(A::Array{Float64,3}; rev = true, withZ = true) -> (S, Z, ev, ischur, α, γ)\n pschur2(A::Array{Float64,3}; rev = true, withZ = true) -> (S, Z, ev, ischur, α, γ)\n\nCompute the Schur decomposition of a product of square matrices  A(p)*...*A(2)*A(1), if rev = true (default) or A(1)*A(2)*...*A(p) if rev = false, without evaluating the product.  The matrices A(1), ..., A(p) are contained in the n×n×p array A  such that the i-th matrix A(i) is contained in A[:,:,i]. The resulting n×n×p arrays S and Z contain the matrices S(1), ..., S(p) and the orthogonal matrices Z(1), ..., Z(p), respectively,  such that for rev = true\n\n       Z(2)' * A(1) * Z(1) = S(1),\n       Z(3)' * A(2) * Z(2) = S(2),\n              ...\n       Z(1)' * A(p) * Z(p) = S(p),\n\nand for rev = false\n\n       Z(1)' * A(1) * Z(2) = S(1),\n       Z(2)' * A(2) * Z(3) = S(2),\n              ...\n       Z(p)' * A(p) * Z(1) = S(p).\n\nIf sind = ischur, with 1 ≤ ischur ≤ p (default ischur = 1), then  S(i), for i = 1, ..., p are in a periodic Schur form,  with S(ischur) in quasi-upper triangular (or Schur) form and S(i)  upper triangular for i neq ischur.  S(i) and Z(i) are contained in S[:,:,i] and Z[:,:,i], respectively.  The vector ev contains the eigenvalues of the appropriate matrix product.  The eigenvalues can be alternatively expressed as α .* γ, where γ contains suitable  scaling parameters to avoid overflows or underflows in the expressions of the eigenvalues.  The performed orthogonal transformations are not accumulated if withZ = false,  in which case Z = nothing. \n\nThe function pschur is based on wrappers for the SLICOT subroutines MB03VW   (see PeriodicSystems.SLICOTtools.mb03vw!) and MB03BD  (see PeriodicSystems.SLICOTtools.mb03bd!),  based on algorithms proposed in [1] and [2].\n\nThe function pschur1 is based on wrappers for the SLICOT subroutines MB03VD  (see PeriodicSystems.SLICOTtools.mb03vd!),  MB03VY  (see PeriodicSystems.SLICOTtools.mb03vy!)  and MB03BD  (see PeriodicSystems.SLICOTtools.mb03bd!),  based on algorithms proposed in [1] and [2].\n\nThe function pschur2 is based on wrappers for the SLICOT subroutines MB03VD  (see PeriodicSystems.SLICOTtools.mb03vd!),  MB03VY  (see PeriodicSystems.SLICOTtools.mb03vy!) and MB03VW  (see PeriodicSystems.SLICOTtools.mb03vw!),  based on the algorithm proposed in [1]. Known issue: MB03VW may fails for larger periods. \n\nREFERENCES\n\n[1] Bojanczyk, A., Golub, G. H. and Van Dooren, P.     The periodic Schur decomposition: algorithms and applications.     In F.T. Luk (editor), Advanced Signal Processing Algorithms,     Architectures, and Implementations III, Proc. SPIE Conference,     vol. 1770, pp. 31-42, 1992.\n\n[2] Kressner, D.     An efficient and reliable implementation of the periodic QZ     algorithm. IFAC Workshop on Periodic Control Systems (PSYCO     2001), Como (Italy), August 27-28 2001. Periodic Control     Systems 2001 (IFAC Proceedings Volumes), Pergamon.\n\n\n\n\n\n pschur(A::Vector{Matrix{T}}; rev = true, withZ = true) -> (S, Z, ev, ischur, α, γ)\n pschur1(A::Vector{Matrix{T}}; rev = true, withZ = true) -> (S, Z, ev, ischur, α, γ)\n\nCompute the extended periodic Schur decomposition of a square product of matrices  A(p)*...*A(2)*A(1), if rev = true (default) or A(1)*A(2)*...*A(p) if rev = false, without evaluating the product.  The matrices A(1), ..., A(p) are contained in the p-vector of matrices A  such that the i-th matrix  A(i), of dimensions m(i)×n(i), is contained in A[i]. The resulting p-vectors S and Z contain the matrices S(1), ..., S(p) and the orthogonal matrices Z(1), ..., Z(p), respectively,  such that for rev = true\n\n       Z(2)' * A(1) * Z(1) = S(1),\n       Z(3)' * A(2) * Z(2) = S(2),\n              ...\n       Z(1)' * A(p) * Z(p) = S(p),\n\nand for rev = false\n\n       Z(1)' * A(1) * Z(2) = S(1),\n       Z(2)' * A(2) * Z(3) = S(2),\n              ...\n       Z(p)' * A(p) * Z(1) = S(p).\n\nThe resulting index ischur is determined such that m(ischur) ≤ m(i), ∀i. The resulting S(i), for i = 1, ..., p are in an extended  periodic Schur form,  with S(ischur) in a quasi-upper trapezoidal form and S(i)  upper trapezoidal for i neq ischur.  S(i) and Z(i) are contained in S[i] and Z[i], respectively.  The first nmin components of ev := α .* γ contain the core eigenvalues of the appropriate matrix product, where nmin = m(ischur), while the last nmax-nmin components of ev are zero,  where nmax is the largest row or column dimension of A(i), for i = 1, ..., p.  The eigenvalues can be alternatively expressed as α .* γ, where γ contains suitable  scaling parameters to avoid overflows or underflows in the expressions of the eigenvalues.  The performed orthogonal transformations are not accumulated if withZ = false,  in which case Z = nothing. \n\nThe function pschur is based on wrappers for the SLICOT subroutines MB03VW (see PeriodicSystems.SLICOTtools.mb03vw!)  and MB03BD (see PeriodicSystems.SLICOTtools.mb03bd!),  based on algorithms proposed in [1] and [2].\n\nThe function pschur1 is based on wrappers for the SLICOT subroutines MB03VD (see PeriodicSystems.SLICOTtools.mb03vd!),  MB03VY (see PeriodicSystems.SLICOTtools.mb03vy!),  and MB03BD (see PeriodicSystems.SLICOTtools.mb03bd!),  based on algorithms proposed in [1] and [2].\n\nREFERENCES\n\n[1] Bojanczyk, A., Golub, G. H. and Van Dooren, P.     The periodic Schur decomposition: algorithms and applications.     In F.T. Luk (editor), Advanced Signal Processing Algorithms,     Architectures, and Implementations III, Proc. SPIE Conference,     vol. 1770, pp. 31-42, 1992.\n\n[2] Kressner, D.     An efficient and reliable implementation of the periodic QZ     algorithm. IFAC Workshop on Periodic Control Systems (PSYCO     2001), Como (Italy), August 27-28 2001. Periodic Control     Systems 2001 (IFAC Proceedings Volumes), Pergamon.\n\n\n\n\n\n pschur(A::AbstractArray{T,3}, E::AbstractArray{T,3}; rev = true, withZ = true) -> (S, T, Q, Z, ev, ischur, α, γ)\n\nCompute the periodic Schur decomposition of a square formal quotient product of matrices  inv(E(p))*A(p)*...*inv(E(2))*A(2)*inv(E(1))*A(1), if rev = true (default) or  A(1)*inv(E(1))*A(2)*inv(E(2))*...*A(p)*inv(E(p)) if rev = false, without evaluating the product and the inverses.  The matrices A(1), ..., A(p) are contained in the n×n×p-array A  such that the i-th matrix  A(i) is contained in A[:,:,i]. The square matrices E(1), ..., E(p) are contained in the n×n×p-array E  such that the i-th matrix  E(i) is contained in E[:,:,i].\n\nThe resulting n×n×p-arrays S, T, Q and Z contain, respectively,  the matrices S(1), ..., S(p) with S(ischur) in a quasi-upper trapezoidal form and  S(i) upper trapezoidal for i neq ischur, the upper triangular matrices T(1), ..., T(p),  the orthogonal matrices Q(1), ..., Q(p), and Z(1), ..., Z(p),  such that for rev = true\n\n       Q(1)' * A(1) * Z(1) = S(1),  Q(1)' * E(1) * Z(2) = T(1), \n       Q(2)' * A(2) * Z(2) = S(2),  Q(2)' * E(2) * Z(3) = T(2),\n              ...\n       Q(p)' * A(p) * Z(p) = S(p),  Q(p)' * E(p) * Z(1) = T(p),\n\nand for rev = false\n\n       Q(1)' * A(1) * Z(1) = S(1),  Q(2)' * E(1) * Z(1) = T(1), \n       Q(2)' * A(2) * Z(2) = S(2),  Q(3)' * E(2) * Z(2) = T(2),\n              ...\n       Q(p)' * A(p) * Z(p) = S(p),  Q(1)' * E(p) * Z(p) = T(p),\n\nThe complex vector ev contains the eigenvalues of the appropriate matrix product, and can be alternatively expressed as ev := α .* γ, where γ contains suitable  scaling parameters to avoid overflows or underflows in the expressions of the eigenvalues.  The performed orthogonal transformations are not accumulated if withZ = false,  in which case  Q = nothing and Z = nothing. \n\nThe function pschur is based on wrappers for the SLICOT subroutines MB03VW (see PeriodicSystems.SLICOTtools.mb03vw!)  and MB03BD (see PeriodicSystems.SLICOTtools.mb03bd!),  based on algorithms proposed in [1] and [2].\n\nREFERENCES\n\n[1] Bojanczyk, A., Golub, G. H. and Van Dooren, P.     The periodic Schur decomposition: algorithms and applications.     In F.T. Luk (editor), Advanced Signal Processing Algorithms,     Architectures, and Implementations III, Proc. SPIE Conference,     vol. 1770, pp. 31-42, 1992.\n\n[2] Kressner, D.     An efficient and reliable implementation of the periodic QZ     algorithm. IFAC Workshop on Periodic Control Systems (PSYCO     2001), Como (Italy), August 27-28 2001. Periodic Control     Systems 2001 (IFAC Proceedings Volumes), Pergamon.\n\n\n\n\n\n pschur(A::Vector{Matrix{T}}, E::Vector{Matrix{T}}; rev = true, withZ = true) -> (S, T, Q, Z, ev, ischur, α, γ)\n\nCompute the extended periodic Schur decomposition of a square formal product of matrices  inv(E(p))*A(p)*...*inv(E(2))*A(2)*inv(E(1))*A(1), if rev = true (default) or  A(1)*inv(E(1))*A(2)*inv(E(2))*...*A(p)*inv(E(p)) if rev = false, without evaluating the product and the inverses.  The matrices A(1), ..., A(p) are contained in the p-vector of matrices A  such that the i-th matrix  A(i), of dimensions m(i)×n(i), is contained in A[i]. The square matrices E(1), ..., E(p) are contained in the p-vector of matrices E  such that the i-th matrix  E(i), of dimensions m(i)×m(i) if rev = true or n(i)×n(i) if rev = false,  is contained in E[i].\n\nThe resulting index ischur is determined such that m(ischur) ≤ m(i), ∀i. The resulting p-vectors S, T, Q and Z contain, respectively,  the matrices S(1), ..., S(p) with S(ischur) in a quasi-upper trapezoidal form and  S(i) upper trapezoidal for i neq ischur, the upper triangular matrices T(1), ..., T(p),  the orthogonal matrices Q(1), ..., Q(p), and Z(1), ..., Z(p),  such that for rev = true\n\n       Q(1)' * A(1) * Z(1) = S(1),  Q(1)' * E(1) * Z(2) = T(1), \n       Q(2)' * A(2) * Z(2) = S(2),  Q(2)' * E(2) * Z(3) = T(2),\n              ...\n       Q(p)' * A(p) * Z(p) = S(p),  Q(p)' * E(p) * Z(1) = T(p),\n\nand for rev = false\n\n       Q(1)' * A(1) * Z(1) = S(1),  Q(2)' * E(1) * Z(1) = T(1), \n       Q(2)' * A(2) * Z(2) = S(2),  Q(3)' * E(2) * Z(2) = T(2),\n              ...\n       Q(p)' * A(p) * Z(p) = S(p),  Q(1)' * E(p) * Z(p) = T(p),\n\nThe first nmin components of ev := α .* γ contain the core eigenvalues of the appropriate matrix product, where nmin = m(ischur), while the last nmax-nmin components of ev are zero,  where nmax is the largest row or column dimension of A(i), for i = 1, ..., p.  The eigenvalues can be alternatively expressed as α .* γ, where γ contains suitable  scaling parameters to avoid overflows or underflows in the expressions of the eigenvalues.  The performed orthogonal transformations are not accumulated if withZ = false,  in which case  Q = nothing and Z = nothing. \n\nThe function pschur is based on wrappers for the SLICOT subroutines MB03VW (see PeriodicSystems.SLICOTtools.mb03vw!)  and MB03BD (see PeriodicSystems.SLICOTtools.mb03bd!),  based on algorithms proposed in [1] and [2].\n\nREFERENCES\n\n[1] Bojanczyk, A., Golub, G. H. and Van Dooren, P.     The periodic Schur decomposition: algorithms and applications.     In F.T. Luk (editor), Advanced Signal Processing Algorithms,     Architectures, and Implementations III, Proc. SPIE Conference,     vol. 1770, pp. 31-42, 1992.\n\n[2] Kressner, D.     An efficient and reliable implementation of the periodic QZ     algorithm. IFAC Workshop on Periodic Control Systems (PSYCO     2001), Como (Italy), August 27-28 2001. Periodic Control     Systems 2001 (IFAC Proceedings Volumes), Pergamon.\n\n\n\n\n\n","category":"function"},{"location":"pschur.html#PeriodicSystems.pschur!","page":"Periodic Schur decompositions","title":"PeriodicSystems.pschur!","text":" pschur!(A::Array{Float64,3}, ilh::Tuple(Int,Int) = (1, size(A,1)); kwargs...) -> (S, Z, ihess)\n\nSame as pschur(A; kwargs...) but uses the input matrix A as workspace and specifies a range ilh = (ilo, ihi), such that all matrices A(j), j = 1, ..., p, are already in periodic Schur forms in rows and columns 1:ilo-1 and ihi+1:n, where n is the first dimension of A.\n\n\n\n\n\n","category":"function"},{"location":"pschur.html#PeriodicSystems.psordschur!","page":"Periodic Schur decompositions","title":"PeriodicSystems.psordschur!","text":" psordschur!(S::Vector{Matrix{Float64}}, Z::Vector{Matrix{Float64}}, select; rev, schurindex)\n\nReorder the core eigenvalues of the product Π = S[p]*...*S[2]*S[1], if rev = true (default) or Π = S[1]*S[2]*...*S[p] if rev = false, where Π is in real Schur form, such that the selected eigenvalues in the logical array select are moved into the leading positions.  The p-vectors S and Z contain the matrices S[1], ..., S[p] in an extended periodic Schur form, with the leading square block of  S[schurindex] in real Schur form, and the corresponding orthogonal transformation matrices Z[1], ..., Z[p], respectively.  S and Z are overwritten by the updated matrices.  A conjugate pair of eigenvalues must be either both included or both excluded via select.  The dimension of select must be equal to the number of core eigenvalues (i.e., the minimum dimension of matrices in the vector S).  \n\n\n\n\n\n psordschur!(S::Array{Float64,3}, Z::Array{Float64,3}, select::Union{Vector{Bool},BitVector}; rev, schurindex)\n\nReorder the eigenvalues of the product Π = S[:,:,p]*...*S[:,:,2]*S[:,:,1], if rev = true (default) or Π = S[:,:,1]*S[:,:,2]*...*S[:,:,p] if rev = false, where Π is in real Schur form, such that the selected eigenvalues in the logical array select are moved into the leading positions.  The 3-dimensional arrays S and Z contain the matrices S[:,:,1], ..., S[:,:,p] in a periodic Schur form, with S[:,:,schurindex] in real Schur form,  and the corresponding orthogonal transformation matrices Z[:,:,1], ..., Z[:,:,p], respectively.  S and Z are overwritten by the updated matrices.  A conjugate pair of eigenvalues must be either both included or both excluded via select.    \n\n\n\n\n\n","category":"function"},{"location":"pschur.html#PeriodicSystems.psordschur1!","page":"Periodic Schur decompositions","title":"PeriodicSystems.psordschur1!","text":" psordschur1!(S::Vector{Matrix{Float64}}, Z::Vector{Matrix{Float64}}, select; rev, schurindex)\n\nReorder the eigenvalues of the product Π = S[p]*...*S[2]*S[1], if rev = true (default) or Π = S[1]*S[2]*...*S[p] if rev = false, where Π is in real Schur form, such that the selected eigenvalues in the logical array select are moved into the leading positions.  The p-vectors S and Z contain, respectively, the square matrices S[1], ..., S[p] in a periodic Schur form, with S[schurindex in real Schur form,  and the corresponding orthogonal transformation matrices Z[1], ..., Z[p], respectively.  S and Z are overwritten by the updated matrices.  A conjugate pair of eigenvalues must be either both included or both excluded via select.    \n\n\n\n\n\n","category":"function"},{"location":"pschur.html#PeriodicSystems.pgschur","page":"Periodic Schur decompositions","title":"PeriodicSystems.pgschur","text":" pgschur(A::Vector{Matrix}, s::Union{Vector{Bool},BitVector}; rev = true, withQ = true) -> (S, Z, ev, ischur, α, γ)\n\nCompute the generalized real periodic Schur decomposition of a formal product of square matrices  A(p)^s(p)*...A(2)^s(2)*A(1)^s(1), if rev = true (default), or  A(1)^s(1)*A(2)^s(2)*...*A(p)^s(p), if rev = false, where 's(j) = ±1'.  The matrices A(1), A(2), ..., A(p) are contained in the p-dimensional array A  such that the i-th matrix  A(i) is contained in A[i]. \n\nThe resulting p-dimensional array S contains the matrices S(1), ..., S(p)  such that the i-th matrix S(i) is contained in S[i].  The component matrix S[ischur] is in a quasi-upper triangular form, while S[i] is upper triangular for i neq ischur.  If withZ = true (default), the resulting p-dimensional array Z contains the orthogonal transformation  matrices Z(1), ..., Z(p) such that the i-th matrix Z(i) is contained in Z[i].  The performed orthogonal transformations are not accumulated if withZ = false,  in which case Z = nothing. \n\nThe resulting matrices satisfy for rev = true\n\n       Z(mod(j,p)+1)' * A(j) * Z(j) = S(j),  if S[j] = true, \n       Z(j)' * A(j) * Z(mod(j,p)+1) = S(j),  if S[j] = false,\n\nand for rev = false\n\n       Z(j)' * A(j) * Z(mod(j,p)+1) = S(j),  if S[j] = true, \n       Z(mod(j,p)+1)' * A(j) * Z(j) = S(j),  if S[j] = false.\n\nThe vector ev contains the eigenvalues of the appropriate matrix product.  The eigenvalues can be alternatively expressed as α .* γ, where γ contains suitable  scaling parameters to avoid overflows or underflows in the expressions of the eigenvalues. \n\nThe function pgschur is based on wrappers for the SLICOT subroutines MB03VW   (see PeriodicSystems.SLICOTtools.mb03vw!) and MB03BD  (see PeriodicSystems.SLICOTtools.mb03bd!),  based on algorithms proposed in [1] and [2].\n\nREFERENCES\n\n[1] Bojanczyk, A., Golub, G. H. and Van Dooren, P.     The periodic Schur decomposition: algorithms and applications.     In F.T. Luk (editor), Advanced Signal Processing Algorithms,     Architectures, and Implementations III, Proc. SPIE Conference,     vol. 1770, pp. 31-42, 1992.\n\n[2] Kressner, D.     An efficient and reliable implementation of the periodic QZ     algorithm. IFAC Workshop on Periodic Control Systems (PSYCO     2001), Como (Italy), August 27-28 2001. Periodic Control     Systems 2001 (IFAC Proceedings Volumes), Pergamon.\n\n\n\n\n\n pgschur(A::Array{Float64,3}, s::Union{Vector{Bool},BitVector}; rev = true, withQ = true) -> (S, Z, ev, ischur, α, γ)\n\nCompute the generalized real periodic Schur decomposition of a formal product of square matrices  A(p)^s(p)*...A(2)^s(2)*A(1)^s(1), if rev = true (default), or  A(1)^s(1)*A(2)^s(2)*...*A(p)^s(p), if rev = false, where 's(j) = ±1'.  The matrices A(1), A(2), ..., A(p) are contained in the n×n×p array A  such that the i-th matrix  A(i) is contained in A[:,:,i]. \n\nThe resulting n×n×p array S contains the matrices S(1), ..., S(p)  such that S(ischur) is in a quasi-upper triangular form,  S(i) is upper triangular for i neq ischur.  If withZ = true (default), the resulting n×n×p array Z contains the orthogonal transformation  matrices Z(1), ..., Z(p). The performed orthogonal transformations are not accumulated if withZ = false,  in which case Z = nothing. \n\nThe resulting matrices satisfy for rev = true\n\n       Z(mod(j,p)+1)' * A(j) * Z(j) = S(j),  if S[j] = true, \n       Z(j)' * A(j) * Z(mod(j,p)+1) = S(j),  if S[j] = false,\n\nand for rev = false\n\n       Z(j)' * A(j) * Z(mod(j,p)+1) = S(j),  if S[j] = true, \n       Z(mod(j,p)+1)' * A(j) * Z(j) = S(j),  if S[j] = false.\n\nS(i) and Z(i) are contained in S[:,:,i] and Z[:,:,i], respectively.  The vector ev contains the eigenvalues of the appropriate matrix product.  The eigenvalues can be alternatively expressed as α .* γ, where γ contains suitable  scaling parameters to avoid overflows or underflows in the expressions of the eigenvalues. \n\nThe function pgschur is based on wrappers for the SLICOT subroutines MB03VW   (see PeriodicSystems.SLICOTtools.mb03vw!) and MB03BD  (see PeriodicSystems.SLICOTtools.mb03bd!),  based on algorithms proposed in [1] and [2].\n\nREFERENCES\n\n[1] Bojanczyk, A., Golub, G. H. and Van Dooren, P.     The periodic Schur decomposition: algorithms and applications.     In F.T. Luk (editor), Advanced Signal Processing Algorithms,     Architectures, and Implementations III, Proc. SPIE Conference,     vol. 1770, pp. 31-42, 1992.\n\n[2] Kressner, D.     An efficient and reliable implementation of the periodic QZ     algorithm. IFAC Workshop on Periodic Control Systems (PSYCO     2001), Como (Italy), August 27-28 2001. Periodic Control     Systems 2001 (IFAC Proceedings Volumes), Pergamon.\n\n\n\n\n\n","category":"function"},{"location":"pschur.html#PeriodicSystems.pgschur!","page":"Periodic Schur decompositions","title":"PeriodicSystems.pgschur!","text":"pgschur!(A::Array{Float64,3}, S::Union{Vector{Bool},BitVector}; kwargs...)\n\nSame as pgschur but uses the input matrix A as workspace.\n\n\n\n\n\n","category":"function"},{"location":"pschur.html#PeriodicSystems.pgordschur!","page":"Periodic Schur decompositions","title":"PeriodicSystems.pgordschur!","text":" pgordschur!(S::Array{Float64,3}, s::Union{Vector{Bool},BitVector}, Z::Array{Float64,3}, select::Union{Vector{Bool},BitVector}; rev, schurindex)\n\nReorder the eigenvalues of the product Π = S[:,:,p]^s[p]*...*S[:,:,2]^s[2]*S[:,:,1]^s[1], if rev = true (default) or  Π = S[:,:,1]^s[1]*S[:,:,2]^s[2]*...*S[:,:,p]^s[p] if rev = false, with 's[j] = ±1', where Π is in a real Schur form,  such that the selected eigenvalues in the logical array select are moved into the leading positions.  The 3-dimensional arrays S and Z contain the matrices S[:,:,1], ..., S[:,:,p] in a generalized periodic Schur form,  with S[:,:,schurindex] in a quasi-upper triangular (real Schur) form,  and the corresponding orthogonal transformation matrices Z[:,:,1], ..., Z[:,:,p], respectively.   S and Z are overwritten by the updated matrices.  A conjugate pair of eigenvalues must be either both included or both excluded via select.    \n\n\n\n\n\n pgordschur!(S::Vector{Matrix{Float64}}, s::Union{Vector{Bool},BitVector}, Z::Vector{Matrix{Float64}}, select::Union{Vector{Bool},BitVector}; rev, schurindex)\n\nReorder the eigenvalues of the product Π = S[p]^s[p]*...*S[2]^s[2]*S[1]^s[1], if rev = true (default) or  Π = S[1]^s[1]*S[2]^s[2]*...*S[p]^s[p] if rev = false, with 's[j] = ±1', where Π is in a real Schur form,  such that the selected eigenvalues in the logical array select are moved into the leading positions.  The p-vectors S and Z contain the matrices S[1], ..., S[p] in a generalized periodic Schur form,  with S[schurindex] in a quasi-upper triangular (real Schur) form,  and the corresponding orthogonal transformation matrices Z[1], ..., Z[p], respectively.   S and Z are overwritten by the updated matrices.  A conjugate pair of eigenvalues must be either both included or both excluded via select.    \n\n\n\n\n\n","category":"function"},{"location":"psric.html#Periodic-Riccati-equation-solvers","page":"Periodic Riccati equation solvers","title":"Periodic Riccati equation solvers","text":"","category":"section"},{"location":"psric.html","page":"Periodic Riccati equation solvers","title":"Periodic Riccati equation solvers","text":"pcric Solution of periodic Riccati differential equations. \nprcric Solution of control-related reverse-time periodic Riccati differential equation. \npfcric  Solution of filtering-related forward-time periodic Riccati differential equation.\npgcric Computation of periodic generators for periodic Riccati differential equations.","category":"page"},{"location":"psric.html","page":"Periodic Riccati equation solvers","title":"Periodic Riccati equation solvers","text":"pcric\nprcric\npfcric\npgcric","category":"page"},{"location":"pstools.html#Periodic-system-utilities","page":"Periodic system utilities","title":"Periodic system utilities","text":"","category":"section"},{"location":"pstools.html","page":"Periodic system utilities","title":"Periodic system utilities","text":"pseig   Characteristic multipliers of a periodic matrix.\npsceig   Characteristic exponents of a periodic matrix.\npsceighr   Characteristic exponents of a periodic matrix in Harmonic Array representation.\npsceigfr   Characteristic exponents of a periodic matrix in Fourier Function Matrix representation.\nmonodromy  Monodromy matrix of a linear periodic time-varying system of ODE.\ntvstm  State transition matrix of a linear time-varying system of ODE.\npsreduc_reg  Fast reduction of a lifted regular pencil corresponding to a product of matrices. \ntvmeval  Time response evaluation of a continuous-time periodic matrix. \nhreval  Evaluation of a harmonic array for a numerical or symbolic time value. \nhrchop  Removal of the negligible trailing terms of a harmonic representation. \nhrtrunc  Truncation of a harmonic representation.  \npmaverage  Evaluation of the time averaged matrix of a continuous-time periodic matrix. \npslyapd  Solution of periodic discrete-time Lyapunov equations using periodic Schur decomposition. \npslyapdkr  Solution of periodic discrete-time Lyapunov equations using Kronecker product expansions. ","category":"page"},{"location":"pstools.html","page":"Periodic system utilities","title":"Periodic system utilities","text":"pseig\npsceig\npsceighr\npsceigfr\nmonodromy\ntvstm\npsreduc_reg\ntvmeval\nhreval\nhrchop\nhrtrunc\npmaverage\npslyapd\npslyapdkr","category":"page"},{"location":"slicot.html#SLICOT-periodic-system-utilities","page":"SLICOT periodic system utilities","title":"SLICOT periodic system utilities","text":"","category":"section"},{"location":"slicot.html","page":"SLICOT periodic system utilities","title":"SLICOT periodic system utilities","text":"PeriodicSystems.SLICOTtools.mb03vd!\nPeriodicSystems.SLICOTtools.mb03vy!\nPeriodicSystems.SLICOTtools.mb03wd!\nPeriodicSystems.SLICOTtools.mb03vw!\nPeriodicSystems.SLICOTtools.mb03bd!\nPeriodicSystems.SLICOTtools.mb03kd!","category":"page"},{"location":"slicot.html#PeriodicSystems.SLICOTtools.mb03vd!","page":"SLICOT periodic system utilities","title":"PeriodicSystems.SLICOTtools.mb03vd!","text":"mb03vd!(n::Integer, p::Integer, ilo::Integer, ihi::Integer, A::Array{Float64, 3}, tau::AbstractMatrix{Float64}) -> info::Int64\n\nReduce a product of p real general matrices A = A_1*A_2*...*A_p to upper Hessenberg form, H = H_1*H_2*...*H_p, where H_1 is upper Hessenberg, and H_2, ..., H_p are upper triangular, by using orthogonal similarity transformations on A,\n\n    Q_1' * A_1 * Q_2 = H_1,\n    Q_2' * A_2 * Q_3 = H_2,\n           ...\n    Q_p' * A_p * Q_1 = H_p.\n\nThe matrices A_1, A_2, ..., A_p are contained in the 3-dimensional array A.  The resulting H_1, H_2, ..., H_p and Q_1, Q_2, ..., Q_p overwrite  A_1, A_2, ..., A_p in A and the array tau.   \n\nSee the SLICOT documentation of MB03VD for details.\n\n\n\n\n\n","category":"function"},{"location":"slicot.html#PeriodicSystems.SLICOTtools.mb03vy!","page":"SLICOT periodic system utilities","title":"PeriodicSystems.SLICOTtools.mb03vy!","text":" mb03vy!(n::Integer, p::Integer, ilo::Integer, ihi::Integer, A::Array{Float64, 3}, tau::AbstractMatrix{Float64}) -> info::Int64\n\nGenerate the real orthogonal matrices Q_1, Q_2, ..., Q_p, which are defined as the product of ihi-ilo elementary reflectors of order n, as returned in A_1, A_2, ..., A_p by mb03vd!:\n\n Q_j = H_j(ilo) H_j(ilo+1) . . . H_j(ihi-1).\n\nThe 3-dimensional arrays A and tau contains the information on the employed elementary reflectors. The resulting Q_1, Q_2, ..., Q_p overwrite A_1, A_2, ..., A_p. \n\nSee the SLICOT documentation of MB03VY for details.\n\n\n\n\n\n","category":"function"},{"location":"slicot.html#PeriodicSystems.SLICOTtools.mb03wd!","page":"SLICOT periodic system utilities","title":"PeriodicSystems.SLICOTtools.mb03wd!","text":"mb03wd!(job::AbstractChar, compz::AbstractChar, n::Integer, p::Integer, \n        ilo::Integer, ihi::Integer, iloz::Integer, ihiz::Integer,  h::Array{Float64, 3}, z::Array{Float64, 3}, \n        wr::AbstractVector{Float64}, wi::AbstractVector{Float64}, ldwork::Integer) -> info::Int64\n\nCompute the Schur decomposition and the eigenvalues of a product of matrices, H = H_1H_2...*H_p, with H_1 an upper Hessenberg matrix and H_2, ..., H_p upper triangular matrices, without evaluating the product. Specifically, the matrices Z_i are computed, such that\n\n    `Z_1' * H_1 * Z_2 = T_1,`\n    `Z_2' * H_2 * Z_3 = T_2,`\n           `...`\n    `Z_p' * H_p * Z_1 = T_p,`\n\nwhere T_1 is in real Schur form, and T_2, ..., T_p are upper triangular.\n\nThe routine works primarily with the Hessenberg and triangular submatrices in rows and columns ILO to IHI, but optionally applies the transformations to all the rows and columns of the matrices H_i, i = 1,...,p. The transformations can be optionally accumulated.\n\nSee the SLICOT documentation of MB03WD for details.\n\n\n\n\n\n","category":"function"},{"location":"slicot.html#PeriodicSystems.SLICOTtools.mb03vw!","page":"SLICOT periodic system utilities","title":"PeriodicSystems.SLICOTtools.mb03vw!","text":"mb03vw!(compq::AbstractChar, triu::AbstractChar, qind::AbstractVector{Int64}, k::Integer, n::Integer, h::Integer, \n        ilo::Integer, ihi::Integer, s::AbstractVector{Int64}, a::Array{Float64, 3}, q::Array{Float64, 3}, \n        liwork::Integer, ldwork::Integer) -> info::Int64\n\nReduce the generalized matrix product\n\n          s[1]           s[2]                 s[k]\n  A[:,:,1]     * A[:,:,2]     * ... * A[:,:,k]\n\nto upper Hessenberg-triangular form, where A is N-by-N-by-K and S is the signature array with values 1 or -1. The H-th matrix of A is reduced to upper Hessenberg form while the other matrices are triangularized. \n\nIf compq = 'U' or compq = 'I', then the orthogonal factors are computed and stored in the array Q so that for s[i] = 1,\n\n                T\n    Q[:,:,i](in)   A[:,:,i](in)   Q[:,:,mod(i,k)+1](in)\n                                                        T \n=   Q[:,:,i](out)  A[:,:,i](out)  Q[:,:,mod(i,k)+1](out),\n\nand for s[i] = -1,\n\n                         T\n    Q[:,:,mod(i,k)+1](in)   A[:,:,i](in)   Q[:,:,i](in)\n                                                        T \n=   Q[:,:,mod(i,k)+1](out)  A[:,:,i](out)  Q[:,:,i](out).\n\nA partial generation of the orthogonal factors can be realized via the array qind.\n\nIf triu = 'N' only matrices with negative signature are reduced to upper triangular form in the first stage of the algorithm.  If triu = 'A' all possible n-1 matrices with negative signature are reduced. \n\nSee the SLICOT documentation of MB03VW for details.\n\n\n\n\n\n","category":"function"},{"location":"slicot.html#PeriodicSystems.SLICOTtools.mb03bd!","page":"SLICOT periodic system utilities","title":"PeriodicSystems.SLICOTtools.mb03bd!","text":"mb03bd!(job::AbstractChar, defl::AbstractChar, compq::AbstractChar, qind::AbstractVector{Int64}, k::Integer, n::Integer, h::Integer, \n        ilo::Integer, ihi::Integer, s::AbstractVector{Int64}, a::Array{Float64, 3}, q::Array{Float64, 3}, alphar::AbstractVector{Float64}, \n        alphai::AbstractVector{Float64}, beta::AbstractVector{Float64}, scal::AbstractVector{Int64}, liwork::Integer, ldwork::Integer) -> (info::Int64, iwarn::Int64)\n\nFind the eigenvalues of the generalized matrix product\n\n          s[1]           s[2]                 s[k]\n  A[:,:,1]     * A[:,:,2]     * ... * A[:,:,k]\n\nwhere A[:,:,h] is upper Hessenberg and A[:,:,i], i <> h, is upper triangular, using a double-shift version of the periodic QZ method. In addition, A may be reduced to periodic Schur form: A[:,:,h] is upper quasi-triangular and all the other factors A[:,:,i] are upper triangular. Optionally, the 2-by-2 triangular matrices corresponding to 2-by-2 diagonal blocks in A[:,:,h] are so reduced that their product is a 2-by-2 diagonal matrix.\n\nIf compq = 'U' or compq = 'I', then the orthogonal factors are computed and stored in the array Q so that for s[i] = 1,\n\n                T\n    Q[:,:,i](in)   A[:,:,i](in)   Q[:,:,mod(i,k)+1](in)\n                                                        T \n=   Q[:,:,i](out)  A[:,:,i](out)  Q[:,:,mod(i,k)+1](out),\n\nand for s[i] = -1,\n\n                         T\n    Q[:,:,mod(i,k)+1](in)   A[:,:,i](in)   Q[:,:,i](in)\n                                                        T \n=   Q[:,:,mod(i,k)+1](out)  A[:,:,i](out)  Q[:,:,i](out).\n\nA partial generation of the orthogonal factors can be realized via the array qind.\n\nSee the SLICOT documentation of MB03BD for details.\n\n\n\n\n\n","category":"function"},{"location":"slicot.html#PeriodicSystems.SLICOTtools.mb03kd!","page":"SLICOT periodic system utilities","title":"PeriodicSystems.SLICOTtools.mb03kd!","text":"mb03kd!(compq::AbstractChar, strong::AbstractChar, k::Integer, nc::Integer, kschur::Integer, n::AbstractVector{Int64}, ni::AbstractVector{Int64}, \n        s::AbstractVector{Int64}, select::AbstractVector{BlasInt}, t::AbstractVector{Float64}, ldt::AbstractVector{Int64}, ixt::AbstractVector{Int64}, \n        q::AbstractVector{Float64}, ldq::AbstractVector{Int64}, ixq::AbstractVector{Int64}, tol::Float64, ldwork::Integer) -> (m::Int64, info::Int64)\n\nReorder the diagonal blocks of the formal matrix product\n\n T22_k^s[k] * T22_k-1^s[k-1] * ... * T22_1^s[1],                (1)\n\nof length k, in the generalized periodic Schur form,\n\n          [  T11_i  T12_i  T13_i  ]\n    T_i = [    0    T22_i  T23_i  ],    i = 1, ..., k,          (2)\n          [    0      0    T33_i  ]\n\nwhere\n\nthe submatrices T11_i are ni(i+1)-by-ni(i), if s[i] = 1, or ni(i)-by-ni(i+1), if s[i] = -1, and contain dimension-induced infinite eigenvalues,\nthe submatrices T22_i are nc-by-nc and contain core eigenvalues, which are generically neither zero nor infinite,\nthe submatrices T33_i contain dimension-induced zero eigenvalues,\n\nsuch that the m selected eigenvalues pointed to by the integer vector select end up in the leading part of the matrix sequence T22_i.\n\nGiven that n[i] = n[i+1] for all i where s[i] = -1, the T11_i are void and the first m columns of the updated orthogonal transformation matrix sequence Q_1, ..., Q_k span a periodic deflating subspace corresponding to the same eigenvalues.\n\nIf compq = 'U' or compq = 'I', then the orthogonal factors are computed and stored in the array Q so that for s[i] = 1,\n\n           T\n    Q_i(in)  T_i(in) Q_(mod(i,k)+1)(in)\n                                          T \n=   Q_i(out) T_i(out)  Q_(mod(i,k)+1)(out),\n\nand for s[i] = -1,\n\n                      T\n    Q_(mod(i,k)+1)(in)   T_i(in)   Q_i(in)\n                                           T \n=   Q_(mod(i,k)+1)(out)  T_i(out)  Q_i(out).\n\nSee the SLICOT documentation of MB03KD for details.\n\n\n\n\n\n","category":"function"},{"location":"psconversions.html#Discretization-of-continuous-time-periodic-systems","page":"Discretization of continuous-time periodic systems","title":"Discretization of continuous-time periodic systems","text":"","category":"section"},{"location":"psconversions.html","page":"Discretization of continuous-time periodic systems","title":"Discretization of continuous-time periodic systems","text":"psc2d  Discretization of a continuous-time periodic system. ","category":"page"},{"location":"psconversions.html","page":"Discretization of continuous-time periodic systems","title":"Discretization of continuous-time periodic systems","text":"psc2d","category":"page"},{"location":"pslyap.html#Periodic-Lyapunov-equation-solvers","page":"Periodic Lyapunov equation solvers","title":"Periodic Lyapunov equation solvers","text":"","category":"section"},{"location":"pslyap.html","page":"Periodic Lyapunov equation solvers","title":"Periodic Lyapunov equation solvers","text":"pclyap Solution of periodic Lyapunov differential equations. \nprclyap Solution of reverse-time periodic Lyapunov differential equation equations. \npfclyap  Solution of forward-time periodic Lyapunov differential equation equations.\npgclyap Computation of periodic generators for periodic Lyapunov differential equations.\npdlyap Solution of periodic discrete-time Lyapunov equations. \nprlyap Solution of reverse-time periodic discrete-time Lyapunov equations. \npflyap  Solution of forward-time periodic discrete-time Lyapunov equations.","category":"page"},{"location":"pslyap.html","page":"Periodic Lyapunov equation solvers","title":"Periodic Lyapunov equation solvers","text":"pclyap\nprclyap\npfclyap\npgclyap\npdlyap\nprlyap\npflyap","category":"page"},{"location":"pslifting.html#Conversions-to-LTI-representations","page":"Conversions to LTI representations","title":"Conversions to LTI representations","text":"","category":"section"},{"location":"pslifting.html","page":"Conversions to LTI representations","title":"Conversions to LTI representations","text":"psaverage  Computation of the averaged LTI system of a continuous-time periodic system.\npsteval  Computation of the time evaluated LTI system of a continuous-time periodic system.\nps2fls  Computation of a complex frequency-lifted LTI representation of a continuous-time periodic system. \nps2frls  Computation of a real frequency-lifted LTI representation of a continuous-time periodic system. \nps2ls  Computation of a time-lifted LTI representation of a discrete-time periodic system. ","category":"page"},{"location":"pslifting.html","page":"Conversions to LTI representations","title":"Conversions to LTI representations","text":"psaverage\npsteval\nps2fls\nps2frls\nps2ls","category":"page"},{"location":"ps.html#Building-periodic-systems","page":"Building periodic systems","title":"Building periodic systems","text":"","category":"section"},{"location":"ps.html","page":"Building periodic systems","title":"Building periodic systems","text":"PeriodicStateSpace   Periodic state space system representation.\nps  Construction of periodic state-space models.\npsmrc2d  Discretization/resampling of a multirate LTI system. ","category":"page"},{"location":"ps.html","page":"Building periodic systems","title":"Building periodic systems","text":"PeriodicStateSpace\nps\npsmrc2d","category":"page"},{"location":"pstypes.html#Constructors-for-periodic-matrices","page":"Constructors for periodic matrices","title":"Constructors for periodic matrices","text":"","category":"section"},{"location":"pstypes.html","page":"Constructors for periodic matrices","title":"Constructors for periodic matrices","text":"PeriodicMatrix   Discrete-time periodic matrix representation.\nPeriodicArray    Discrete-time periodic array representation.\nPeriodicFunctionMatrix  Continuous-time periodic function matrix representation.\nPeriodicSymbolicMatrix   Continuous-time periodic symbolic matrix representation.\nPeriodicTimeSeriesMatrix   Continuous-time periodic time series matrix representation.\nHarmonicArray   Continuous-time harmonic array representation.\nFourierFunctionMatrix   Continuous-time Fourier functin matrix representation.","category":"page"},{"location":"pstypes.html","page":"Constructors for periodic matrices","title":"Constructors for periodic matrices","text":"PeriodicMatrix\nPeriodicArray\nPeriodicFunctionMatrix\nPeriodicSymbolicMatrix\nPeriodicTimeSeriesMatrix\nHarmonicArray\nHarmonicArray(A0::MT, Acos::Union{Nothing, Vector{MT}}, Asin::Union{Nothing, Vector{MT}}, period::Real) where {T<:Real, MT<:VecOrMat{T}} \nFourierFunctionMatrix","category":"page"},{"location":"psconv.html#Periodic-matrix-conversions","page":"Periodic matrix conversions","title":"Periodic matrix conversions","text":"","category":"section"},{"location":"psconv.html","page":"Periodic matrix conversions","title":"Periodic matrix conversions","text":"ts2hr   Conversion of  a periodic time series matrix to a harmonic array approximation.\npfm2hr  Conversion of  a periodic function matrix to a harmonic array representation. \nts2pfm  Conversion of  an interpolated periodic time series matrix to a periodic function matrix.\nhr2psm  Conversion of  a harmonic array representation to a periodic symbolic matrix.\npsm2hr  Conversion of  a periodic symbolic matrix into a harmonic array representation.\npm2pa   Conversion of  a discrete-time periodic matrix object to a periodic array object.\nffm2hr  Conversion of  a Fourier function matrix to a harmonic array representation. \nhr2bt   Building a block Toeplitz matrix approximation of a harmonic (Fourier) array representation. \nhr2btupd  Building an updated block Toeplitz matrix approximation of a harmonic (Fourier) array representation. ","category":"page"},{"location":"psconv.html","page":"Periodic matrix conversions","title":"Periodic matrix conversions","text":"ts2hr\npfm2hr\nts2pfm\nhr2psm\npsm2hr\npm2pa\nffm2hr\nhr2bt\nhr2btupd","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"CurrentModule = PeriodicSystems\nDocTestSetup = quote\n    using PeriodicSystems\nend","category":"page"},{"location":"index.html#PeriodicSystems.jl","page":"Home","title":"PeriodicSystems.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"(Image: DocBuild) (Image: Code on Github.)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"PeriodicSystems.jl is intended to be a collection of Julia functions for numerical computations related to periodic system representations in the continuous-time form","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":" dx(t)/dt = A(t)x(t) + B(t)u(t) ,\n y(t)     = C(t)x(t) + D(t)u(t) ,","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"or in the discrete-time form","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":" x(t+1)  = A(t)x(t) + B(t)u(t) ,\n y(t)    = C(t)x(t) + D(t)u(t) ,","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"where x(t), u(t) and y(t) are the system state vector, system input vector and system output vector, respectively, and t is the continuous or discrete time variable. The system matrices satisfy A(t) = A(t+T), B(t) = B(t+T), C(t) = C(t+T), D(t) = D(t+T),  i.e., are periodic with period T. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Many control applications are formulated as genuine periodic control problems as for example, satellite attitude control, helicopter forward flight control, orbital stabilization of underactuated systems, etc. Besides that, periodic systems represent a general framework to analyze and design multi-rate sampled-data systems. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The targeted functionality of this package is described in [1] and will cover both continuous-time and discrete-time periodic systems. The following categories of functions are implemented or planned:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Building periodic system state-space models","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"PeriodicStateSpace   Periodic state space system representation.\nps  Construction of periodic state-space models.\npsmrc2d  Discretization/resampling of a multirate LTI system. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Basic operations on periodic system models","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Discretization of continuous-time periodic systems","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"psc2d  Discretization of a continuous-time periodic system. ","category":"page"},{"location":"index.html#Conversions-to-LTI-representations","page":"Home","title":"Conversions to LTI representations","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"psaverage  Computation of the averaged LTI system of a continuous-time periodic system.\npsteval  Computation of the time evaluated LTI system of a continuous-time periodic system.\nps2fls  Computation of a complex frequency-lifted LTI representation of a continuous-time periodic system. \nps2frls  Computation of a real frequency-lifted LTI representation of a continuous-time periodic system. \nps2ls  Computation of a time-lifted LTI representation of a discrete-time periodic system. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Periodic system analysis","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"pspole  Computation of the poles of a periodic system.\npszero  Computation of the zeros of a periodic system.\nisstable  Assessment of stability of a periodic system.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Solving periodic Lyapunov equations","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"pclyap Solution of periodic Lyapunov differential equations. \nprclyap Solution of reverse-time periodic Lyapunov differential equations. \npfclyap  Solution of forward-time periodic Lyapunov differential equations.\npgclyap Computation of periodic generators for periodic Lyapunov differential equations.\npdlyap Solution of periodic discrete-time Lyapunov equations. \nprlyap Solution of reverse-time periodic discrete-time Lyapunov equations. \npflyap  Solution of forward-time periodic discrete-time Lyapunov equations.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Solving periodic Riccati equations","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"pcric Solution of periodic Riccati differential equations. \nprcric Solution of control-related reverse-time periodic Riccati differential equation. \npfcric  Solution of filtering-related forward-time periodic Riccati differential equation.\npgcric Computation of periodic generators for periodic Riccati differential equations.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Simplification of periodic system models","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Periodic output and state feedback controller design ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Periodic Schur decompositions","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"phess  Periodic Hessenberg decomposition of a product of matrices.\npschur  Periodic Schur decompositions of products or quotient products of matrices. \npsordschur!  Reordering of periodic Schur decompositions of products or quotient products of matrices.\npsordschur1!  Reordering of periodic Schur decompositions of products or quotient products of square matrices.\npgschur  Generalized real periodic Schur decomposition of a formal product of matrices.\npgschur  Generalized real periodic Schur decomposition of a formal product of matrices.\npgschur!  Generalized real periodic Schur decompositions of formal products of matrices (in place computation).\npgschur  Generalized real periodic Schur decompositions of formal products of matrices.\npgordschur!  Reordering of generalized real periodic Schur decompositions a formal products of matrices.","category":"page"},{"location":"index.html#[Release-Notes](https://github.com/andreasvarga/PeriodicSystems.jl/blob/master/ReleaseNotes.md)","page":"Home","title":"Release Notes","text":"","category":"section"},{"location":"index.html#Main-developer","page":"Home","title":"Main developer","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Andreas Varga","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"License: MIT (expat)","category":"page"},{"location":"index.html#References","page":"Home","title":"References","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"[1] A. Varga. A Periodic Systems Toolbox for Matlab. Proc. of IFAC 2005 World Congress, Prague, Czech Republic, 2005.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"[2] S. Bittanti and P. Colaneri. Periodic Systems - Filtering and Control, Springer Verlag, 2009.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"[3]  A. Varga, MatrixPencils.jl: Matrix pencil manipulation using Julia. Zenodo: https://doi.org/10.5281/zenodo.3894503.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"[4]  A. Varga, MatrixEquations.jl: Solution of Lyapunov, Sylvester and Riccati matrix equations using Julia. Zenodo: https://doi.org/10.5281/zenodo.3556867.","category":"page"}]
}
