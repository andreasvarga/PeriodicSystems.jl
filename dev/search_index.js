var documenterSearchIndex = {"docs":
[{"location":"pstools.html#Periodic-system-utilities","page":"Periodic system utilities","title":"Periodic system utilities","text":"","category":"section"},{"location":"pstools.html","page":"Periodic system utilities","title":"Periodic system utilities","text":"pseig   Characteristic multipliers of a periodic matrix.\npsceig   Characteristic exponents of a periodic matrix.\npschur  Periodic Schur decomposition of a product of matrices.\nphess  Periodic Hessenberg decomposition of a product of matrices.\nmonodromy  Monodromy matrix of a linear periodic time-varying system of ODE.\ntvstm  State transition matrix of a linear time-varying system of ODE.\npsreduc_reg  Fast reduction of a lifted regular pencil corresponding to a product of matrices. \ntvmeval  Time response evaluation of a continuous-time periodic matrix. \nhreval  Evaluattion of a harmonic array for a numerical or symbolic time value. ","category":"page"},{"location":"pstools.html","page":"Periodic system utilities","title":"Periodic system utilities","text":"pseig\npsceig\npschur\nphess\nmonodromy\ntvstm\npsreduc_reg\ntvmeval\nhreval","category":"page"},{"location":"pstools.html#PeriodicSystems.pseig","page":"Periodic system utilities","title":"PeriodicSystems.pseig","text":" pseig(A, K = 1; lifting = false, solver, reltol, abstol, dt) -> ev\n\nCompute the characteristic multipliers of a periodic matrix.  For the given square continuous-time periodic matrix A(t) of period T,  the characteristic multipliers ev are the eigenvalues of  the monodromy matrix Ψ = Φ(T,0), where Φ(t,τ) is the state transition matrix satisfying the homogeneous linear ODE \n\ndΦ(t,τ)/dt = A(t)Φ(t,τ),  Φ(τ,τ) = I.\n\nIf lifting = false, Ψ is computed as a product of K state transition matrices  Ψ = Ψ_K*...*Ψ_1 (see monodromy with the associated keyword arguments).  The eigenvalues are computed using the periodic Schur decomposition method of [1].\n\nIf lifting = false, Ψ is determined as Ψ = inv(N)*M, where M-λN is a regular pencil with N invertible and   the eigenvalues of M-λN are the same as those of the matrix product Ψ := Ψ_K*...*Ψ_1.  An efficient version of the structure exploiting fast reduction method of [2] is employed,  which embeds the determination of transition matrices into the reduction algorithms.  This option may occasionally lead to inaccurate results for large values of K.  A may be a periodic function matrix object, or a periodic symbolic matrix object, or a  harmonic representation object or a periodic time series matrix object.\n\nReferences\n\n[1] A. Bojanczyk, G. Golub, and P. Van Dooren,      The periodic Schur decomposition. Algorithms and applications, Proc. SPIE 1996.\n\n[2] A. Varga & P. Van Dooren. Computing the zeros of periodic descriptor systems.     Systems and Control Letters, 50:371-381, 2003.\n\n\n\n\n\n ev = pseig(A; rev = true, fast = false)\n\nCompute the eigenvalues of a product of p square matrices  A(p)...*A(2)*A(1), if rev = true (default) (also called characteristic multipliers) or  of A(1)*A(2)...A(p) if rev = false, without evaluating the product.  The matrices A(1), ..., A(p) are contained in the n×n×p array A  such that the i-th matrix A(i) is contained in A[:,:,i]. Alternatively, A can be a PeriodicArray object.  If fast = false (default) then the eigenvalues are computed using an approach based on the periodic Schur decomposition [1], while if fast = true  the structure exploiting reduction [2] of an appropriate lifted pencil is employed. This later option may occasionally lead to inaccurate results for large number of matrices. \n\nReferences\n\n[1] A. Bojanczyk, G. Golub, and P. Van Dooren,      The periodic Schur decomposition. Algorithms and applications, Proc. SPIE 1996.\n\n[2] A. Varga & P. Van Dooren. Computing the zeros of periodic descriptor systems.     Systems and Control Letters, 50:371-381, 2003.\n\n\n\n\n\n ev = pseig(A; rev = true, fast = false, istart = 1)\n\nCompute the eigenvalues of a square cyclic product of p matrices  A(k-1)...*A(2)*A(1)*A(p)...*A(k), if rev = true (default) or  A(k)*A(k+1)*...A(p)*A(1)...A(k-1) if rev = false, without evaluating the product.  The matrices A(1), ..., A(p) are contained in the p-vector of matrices A  such that the i-th matrix  A(i), of dimensions m(i)×n(i), is contained in A[i]. Alternatively, A can be PeriodicMatrix object.  istart = k specifies the starting index (default: k = 1).  If fast = false (default) then the eigenvalues are computed using an approach based on the periodic Schur decomposition [1], while if fast = true  the structure exploiting reduction [2] of an appropriate lifted pencil is employed.  This later option may occasionally lead to inaccurate results for large number of matrices. \n\nNote: The first nmin components of ev contains the core eigenvalues of the appropriate matrix product, where nmin is the minimum row dimensions of matrices A[i], for i = 1, ..., p,  while the last ncur-nmin components of ev are zero,  where ncur is the column dimension of A[k] if rev = true or  the row dimension of A[k] if rev = false. \n\nReferences\n\n[1] A. Bojanczyk, G. Golub, and P. Van Dooren,      The periodic Schur decomposition. Algorithms and applications, Proc. SPIE 1996.\n\n[2] A. Varga & P. Van Dooren. Computing the zeros of periodic descriptor systems.     Systems and Control Letters, 50:371-381, 2003.\n\n\n\n\n\n","category":"function"},{"location":"pstools.html#PeriodicSystems.psceig","page":"Periodic system utilities","title":"PeriodicSystems.psceig","text":" pcseig(A, K = 1; lifting = false, solver, reltol, abstol, dt) -> ce\n\nCompute the characteristic exponents of a periodic matrix. For a given square continuous-time periodic function matrix A(t) of period T,  the characteristic exponents ce are log(ev)/T, where  ev are the characteristic multipliers (i.e., the eigenvalues of the monodromy matrix of A(t)).   For available options see pseig(::PeriodicFunctionMatrix).  For a given square discrete-time periodic matrix A(t) of discrete period N,   the characteristic exponents ce are ev.^-N. \n\n\n\n\n\n","category":"function"},{"location":"pstools.html#PeriodicSystems.pschur","page":"Periodic system utilities","title":"PeriodicSystems.pschur","text":" pschur(A; rev = true, withZ = true) -> (S, Z, ev, ischur, α, γ)\n\nCompute the extended periodic Schur decomposition of a square product of matrices  A(p)*...*A(2)*A(1), if rev = true (default) or A(1)*A(2)*...*A(p) if rev = false, without evaluating the product.  The matrices A(1), ..., A(p) are contained in the p-vector of matrices A  such that the i-th matrix  A(i), of dimensions m(i)×n(i), is contained in A[i]. The resulting p-vectors S and Z contain the matrices S(1), ..., S(p) and the orthogonal matrices Z(1), ..., Z(p), respectively,  such that for rev = true\n\n       Z(2)' * A(1) * Z(1) = S(1),\n       Z(3)' * A(2) * Z(2) = S(2),\n              ...\n       Z(1)' * A(p) * Z(p) = S(p),\n\nand for rev = false\n\n       Z(1)' * A(1) * Z(2) = S(1),\n       Z(2)' * A(2) * Z(3) = S(2),\n              ...\n       Z(p)' * A(p) * Z(1) = S(p).\n\nThe resulting index ischur is determined such that m(ischur) ≤ m(i), ∀i. The resulting S(i), for i = 1, ..., p are in an extended  periodic Schur form,  with S(ischur) in a quasi-upper trapezoidal form and S(i)  upper trapezoidal for i neq ischur.  S(i) and Z(i) are contained in S[i] and Z[i], respectively.  The first nmin components of ev := α .* γ contain the core eigenvalues of the appropriate matrix product, where nmin = m(ischur), while the last nmax-nmin components of ev are zero,  where nmax is the largest row or column dimension of A(i), for i = 1, ..., p.  The eigenvalues can be alternatively expressed as α .* γ, where γ contains suitable  scaling parameters to avoid overflows or underflows in the expressions of the eigenvalues.  The performed orthogonal transformations are not accumulated if withZ = false,  in which case Z = nothing. \n\n\n\n\n\n pschur(A; sind = 1, rev = true, withZ = true) -> (S, Z, ev, ischur, α, γ)\n\nCompute the Schur decomposition of a product of square matrices  A(p)*...*A(2)*A(1), if rev = true (default) or A(1)*A(2)*...*A(p) if rev = false, without evaluating the product.  The matrices A(1), ..., A(p) are contained in the n×n×p array A  such that the i-th matrix A(i) is contained in A[:,:,i]. The resulting n×n×p arrays S and Z contain the matrices S(1), ..., S(p) and the orthogonal matrices Z(1), ..., Z(p), respectively,  such that for rev = true\n\n       Z(2)' * A(1) * Z(1) = S(1),\n       Z(3)' * A(2) * Z(2) = S(2),\n              ...\n       Z(1)' * A(p) * Z(p) = S(p),\n\nand for rev = false\n\n       Z(1)' * A(1) * Z(2) = S(1),\n       Z(2)' * A(2) * Z(3) = S(2),\n              ...\n       Z(p)' * A(p) * Z(1) = S(p).\n\nIf sind = ischur, with 1 ≤ ischur ≤ p (default ischur = 1), then  S(i), for i = 1, ..., p are in a periodic Schur form,  with S(ischur) in quasi-upper triangular (or Schur) form and S(i)  upper triangular for i neq ischur.  S(i) and Z(i) are contained in S[:,:,i] and Z[:,:,i], respectively.  The vector ev contains the eigenvalues of the appropriate matrix product.  The eigenvalues can be alternatively expressed as α .* γ, where γ contains suitable  scaling parameters to avoid overflows or underflows in the expressions of the eigenvalues.  The performed orthogonal transformations are not accumulated if withZ = false,  in which case Z = nothing. \n\n\n\n\n\n","category":"function"},{"location":"pstools.html#PeriodicSystems.phess","page":"Periodic system utilities","title":"PeriodicSystems.phess","text":" phess(A; hind = 1, rev = true, withZ = true) -> (H, Z, ihess)\n\nCompute the Hessenberg decomposition of a product of square matrices  A(p)*...*A(2)*A(1), if rev = true (default) or A(1)*A(2)*...*A(p) if rev = false, without evaluating the product.  The matrices A(1), ..., A(p) are contained in the n×n×p array A  such that the i-th matrix A(i) is contained in A[:,:,i]. The resulting n×n×p arrays H and Z contain the matrices H(1), ..., H(p) and the orthogonal matrices Z(1), ..., Z(p), respectively,  such that for rev = true\n\n       Z(2)' * A(1) * Z(1) = H(1),\n       Z(3)' * A(2) * Z(2) = H(2),\n              ...\n       Z(1)' * A(p) * Z(p) = H(p),\n\nand for rev = false\n\n       Z(1)' * A(1) * Z(2) = H(1),\n       Z(2)' * A(2) * Z(3) = H(2),\n              ...\n       Z(p)' * A(p) * Z(1) = H(p).\n\nIf hind = ihess, with 1 ≤ ihess ≤ p (default ihess = 1), then  H(i), i = 1, ..., p are in a periodic Hessenberg form,  with H(ihess) in upper Hessenberg form and H(i)  upper triangular for i neq ihess.  H(i) and Z(i) are contained in H[:,:,i] and Z[:,:,i], respectively.  The performed orthogonal transformations are not accumulated if withZ = false,  in which case Z = nothing. \n\n\n\n\n\n","category":"function"},{"location":"pstools.html#PeriodicSystems.monodromy","page":"Periodic system utilities","title":"PeriodicSystems.monodromy","text":" monodromy(At, K = 1; solver, reltol, abstol, dt) -> Ψ\n\nCompute the monodromy matrix for a linear ODE with periodic time-varying coefficients. \n\nFor the given square periodic function matrix At of period T,  the monodromy matrix Ψ = Φ(T,0) is computed, where Φ(t,τ) is the state transition matrix satisfying the homogeneous linear ODE \n\ndΦ(t,τ)/dt = A(t)Φ(t,τ),  Φ(τ,τ) = I.\n\nIf K > 1, then Ψ = Φ(T,0) is determined as a product of K matrices  Ψ = Ψ_K*...*Ψ_1, where for Δ := T/K, Ψ_i = Φ(iΔ,(i-1)Δ) is the  state transition matrix on the time interval [(i-1)Δ,iΔ].  The resulting Ψ is a periodic array object. \n\nThe state transition matrices Φ(iΔ,(i-1)Δ) are computed by integrating numerically the above homogeneous linear ODE.   The ODE solver to be employed can be  specified using the keyword argument solver, together with the required relative accuracy reltol (default: reltol = 1.e-3),  absolute accuracy abstol (default: abstol = 1.e-7) and/or  the fixed step length dt (default: dt = tf-t0) (see tvstm).  For large values of K, parallel computation of factors can be alternatively performed  by starting Julia with several execution threads.  The number of execution threads is controlled either by using the -t/--threads command line argument  or by using the JULIA_NUM_THREADS environment variable.  \n\n\n\n\n\n","category":"function"},{"location":"pstools.html#PeriodicSystems.tvstm","page":"Periodic system utilities","title":"PeriodicSystems.tvstm","text":" Φ = tvstm(At::Function, tf, t0; solver, reltol, abstol, dt)\n\nCompute the state transition matrix for a linear ODE with time-varying coefficients.  For the given time-dependent square matrix function At, initial time t0 and  final time tf, the state transition matrix Φ(tf,t0) is computed by integrating numerically the homogeneous linear ODE \n\n  dΦ(t,t0)/dt = A(t)Φ(t,t0),  Φ(t0,t0) = I\n\non the time interval [t0,tf]. The ODE solver to be employed can be  specified using the keyword argument solver (see below), together with the required relative accuracy reltol (default: reltol = 1.e-3),  absolute accuracy abstol (default: abstol = 1.e-7) and/or  the fixed step length dt (default: dt = tf-t0).  Depending on the desired relative accuracy reltol,  lower order solvers are employed for reltol >= 1.e-4,  which are generally very efficient, but less accurate. If reltol < 1.e-4, higher order solvers are employed able to cope with high accuracy demands. \n\nThe following solvers from the OrdinaryDiffEq.jl package can be selected:\n\nsolver = \"non-stiff\" - use a solver for non-stiff problems (Tsit5() or Vern9());\n\nsolver = \"stiff\" - use a solver for stiff problems (Rodas4() or KenCarp58());\n\nsolver = \"linear\" - use a special solver for linear ODEs (MagnusGL6()) with fixed time step dt;\n\nsolver = \"symplectic\" - use a symplectic Hamiltonian structure preserving solver (IRKGL16());\n\nsolver = \"\" - use the default solver, which automatically detects stiff problems (AutoTsit5(Rosenbrock23()) or AutoVern9(Rodas5())). \n\n\n\n\n\n","category":"function"},{"location":"pstools.html#PeriodicSystems.psreduc_reg","page":"Periodic system utilities","title":"PeriodicSystems.psreduc_reg","text":"psreduc_reg(A) -> (M, N)\n\nDetermine for a n×n×p array A, the matrix pair (M, N)  with N invertible and M-λN regular, such that  the eigenvalues of M-λN are the same as those of the matrix product A(p)*A(p-1)*...*A(1), where A(i) is contained in A[:,:,i].  The structure exploiting fast reduction method of [1] is employed.\n\n[1] A. Varga & P. Van Dooren. Computing the zeros of periodic descriptor systems.     Systems and Control Letters, 50:371-381, 2003.\n\n\n\n\n\npsreduc_reg(A) -> (M, N)\n\nDetermine for a p-dimensional vector of rectangular matrices A,  the matrix pair (M, N) with N invertible and M-λN regular, such that  the eigenvalues of M-λN are the same as those of the square  matrix product A(p)*A(p-1)*...*A(1), where A(i) is contained in A[i].  The structure exploiting fast reduction method of [1] is employed.\n\n[1] A. Varga & P. Van Dooren. Computing the zeros of periodic descriptor systems.     Systems and Control Letters, 50:371-381, 2003.\n\n\n\n\n\n","category":"function"},{"location":"pstools.html#PeriodicSystems.tvmeval","page":"Periodic system utilities","title":"PeriodicSystems.tvmeval","text":" tvmeval(At::PeriodicTimeSeriesMatrix, t; method = \"linear\") -> A::Vector{Matrix}\n\nTime response evaluation of a periodic time series matrix. For the periodic time series matrix At and the vector of time values t,  an interpolation/extrapolation based approximation   A[i] is evaluated for each time value t[i]. The keyword parameter method specifies the interpolation/extrapolation method to be used as follows:\n\nmethod = \"constant\" - use periodic B-splines of degree 0 \n\nmethod = \"linear\" - use periodic B-splines of degree 1 (periodic linear interpolation) \n\nmethod = \"quadratic\" - use periodic B-splines of degree 2 (periodic quadratic interpolation) \n\nmethod = \"cubic\" - use periodic B-splines of degree 3 (periodic cubic interpolation) \n\n\n\n\n\n tvmeval(Ahr::HarmonicArray, t; ntrunc, exact = true) -> A::Vector{Matrix}\n\nTime response evaluation of a harmonic array. For the harmonic array Ahr representing a time periodic matrix A(t) and the vector of time values t,  a exact evaluation or linear interpolation based approximation    A[i] = A(t[i]) is evaluated for each time value t[i].  If exact = true (defualt) an exact evaluation is computed, while for exact = false,  a linear interpolation based approximation is computed (potentially more accurate in intersample points). The keyword argument ntrunc specifies the number of harmonics to be used for evaluation  (default: maximum possible number). \n\n\n\n\n\n tvmeval(Asym::PeriodicSymbolicMatrix, t) -> A::Vector{Matrix}\n\nTime response evaluation of a periodic symbolic matrix. For the periodic symbolic matrix Asym representing a time periodic matrix A(t) and the vector of time values t,  A[i] = A(t[i]) is evaluated for each time value t[i]. \n\n\n\n\n\n tvmeval(Af::PeriodicFunctionMatrix, t) -> A::Vector{Matrix}\n\nTime response evaluation of a periodic function matrix. For the periodic function matrix Af representing a time periodic matrix A(t) and the vector of time values t,  A[i] = A(t[i]) is evaluated for each time value t[i]. \n\n\n\n\n\n","category":"function"},{"location":"pstools.html#PeriodicSystems.hreval","page":"Periodic system utilities","title":"PeriodicSystems.hreval","text":" hreval(Ahr::HarmonicArray, t; ntrunc, exact = true) -> A::Matrix\n\nEvaluate the harmonic array Ahr representing a continuous-time  time periodic matrix A(t) for a numerical or symbolic time value t.  For real t, if exact = true (defualt) an exact evaluation is computed, while for exact = false,  a linear interpolation based approximation is computed (potentially more accurate in intersample points). The keyword argument ntrunc specifies the number of harmonics to be used for the evaluation  (default: maximum possible number). \n\n\n\n\n\n","category":"function"},{"location":"pstypes.html#Periodic-matrix-data-types","page":"Periodic matrix data types","title":"Periodic matrix data types","text":"","category":"section"},{"location":"pstypes.html","page":"Periodic matrix data types","title":"Periodic matrix data types","text":"PeriodicMatrix   Discrete-time periodic matrix representation.\nPeriodicArray    Discrete-time periodic array representation.\nPeriodicFunctionMatrix  Continuous-time periodic function matrix representation.\nPeriodicSymbolicMatrix   Continuous-time periodic symbolic matrix representation.\nPeriodicTimeSeriesMatrix   Continuous-time periodic time series matrix representation.\nHarmonicArray   Continuous-time harmonic array representation.","category":"page"},{"location":"pstypes.html","page":"Periodic matrix data types","title":"Periodic matrix data types","text":"PeriodicMatrix\nPeriodicArray\nPeriodicFunctionMatrix\nPeriodicSymbolicMatrix\nPeriodicTimeSeriesMatrix\nHarmonicArray\nHarmonicArray(A0::MT, Acos::Union{Vector{Any}, Vector{MT}}, Asin::Union{Vector{Any}, Vector{MT}}, period::Real) where {T<:Real, MT<:VecOrMat{T}} ","category":"page"},{"location":"pstypes.html#PeriodicSystems.PeriodicMatrix","page":"Periodic matrix data types","title":"PeriodicSystems.PeriodicMatrix","text":"PeriodicMatrix(M, T) -> A::PeriodicMatrix\n\nDiscrete-time periodic matrix representation. \n\nThe discrete-time periodic matrix object A is built from a  p-vector M of real matrices and the associated time period T.  M contains the cyclic component matrices M[i], i = 1,..., p,  where M[i] represents the value M(Δ(i-1)) of a time periodic matrix M(t) of period T, with Δ := T/p, the associated sampling time. It is assumed that M[k] := M[mod(k-1,p)+1] for arbitrary k.  All component matrices are allowed to have arbitrary (time-varying) dimensions. The component matrices M, the period T and the discrete period p can be accessed via A.M, A.period and A.dperiod, respectively. \n\n\n\n\n\n","category":"type"},{"location":"pstypes.html#PeriodicSystems.PeriodicArray","page":"Periodic matrix data types","title":"PeriodicSystems.PeriodicArray","text":"PeriodicArray(M, T) -> A::PeriodicArray\n\nDiscrete-time periodic array representation.\n\nThe discrete-time periodic array object A is built from a m×n×p real array M and the associated time period T.  M contains the cyclic component matrices M[:,:,i], i = 1,..., p,  where M[:,:,i] represents the value M(Δ(i-1)) of a time periodic matrix M(t) of period T, with Δ := T/p, the associated sampling time. It is assumed that  M[:,:,k] := M[:,:,mod(k-1,p)+1] for arbitrary k.  The component matrices M, the period T and the discrete period p can be accessed via A.M, A.period and A.dperiod, respectively. \n\n\n\n\n\n","category":"type"},{"location":"pstypes.html#PeriodicSystems.PeriodicFunctionMatrix","page":"Periodic matrix data types","title":"PeriodicSystems.PeriodicFunctionMatrix","text":"PeriodicFunctionMatrix(f, T) -> A::PeriodicFunctionMatrix\n\nContinuous-time periodic function matrix representation.\n\nThe continuous-time periodic function matrix object A is built from a  time periodic real matrix function f(t) of real time variable t  and the associated time period T.  It is assumed that  f(t) = f(t+T) for any real time value t.  The function f(t), the period T, and the row and column dimensions  of f(t) can be accessed via A.f, A.period and the tuple A.dims, respectively.\n\n\n\n\n\n","category":"type"},{"location":"pstypes.html#PeriodicSystems.PeriodicSymbolicMatrix","page":"Periodic matrix data types","title":"PeriodicSystems.PeriodicSymbolicMatrix","text":"PeriodicSymbolicMatrix(F, T) -> A::PeriodicSymbolicMatrix\n\nContinuous-time periodic symbolic matrix representation.\n\nThe continuous-time periodic symbolic matrix object A is built from F, a  symbolic periodic real matrix or vector of symbolic variable t, and the associated time period T.  It is assumed that  F(t) = F(t+T) for any real time value t. The symbolic matrix F and the period T can be accessed via A.F and A.period, respectively.\n\n\n\n\n\n","category":"type"},{"location":"pstypes.html#PeriodicSystems.PeriodicTimeSeriesMatrix","page":"Periodic matrix data types","title":"PeriodicSystems.PeriodicTimeSeriesMatrix","text":"PeriodicTimeSeriesMatrix(At, T) -> A::PeriodicTimeSeriesMatrix\n\nContinuous-time periodic time series matrix representation.\n\nThe continuous-time periodic time series matrix object A is built from a  p-vector At of real matrices and the associated time period T.  At contains the cyclic component matrices At[i], i = 1,..., p,  where At[i] represents the value A(Δ(i-1)) of a time periodic matrix A(t) of period T, with Δ := T/p, the associated sampling time. It is assumed that At[k] := At[mod(k-1,p)+1] for arbitrary k.  All component matrices must have the same dimensions. The component matrices At and the period T  can be accessed via A.values and A.period, respectively. \n\n\n\n\n\n","category":"type"},{"location":"pstypes.html#PeriodicSystems.HarmonicArray","page":"Periodic matrix data types","title":"PeriodicSystems.HarmonicArray","text":" HarmonicArray(Ahr, T) -> A::HarmonicArray\n\nContinuous-time harmonic array representation.\n\nThe harmonic array object A is built for  the harmonic representation of a periodic matrix Ahr(t) of period T in the form\n\n                 p\n Ahr(t) = A_0 +  ∑ ( Ac_i*cos(i*t*2*π/T)+As_i*sin(i*2*π*t/T) ) .\n                i=1\n\nThe m×n×(p+1) complex array Ahr contains the harmonic components as follows: Ahr[:,:,1] contains the constant term A_0 (the mean value) and the real and imaginary parts of Ahr[:,:,i+1]   for i = 1, ..., p contain the coefficient matrices Ac_i and As_i, respectively.  The complex matrix Ahr containing the harmonic components and the period T  can be accessed via A.values and A.period, respectively.\n\n\n\n\n\n","category":"type"},{"location":"pstypes.html#PeriodicSystems.HarmonicArray-Union{Tuple{MT}, Tuple{T}, Tuple{MT, Union{Vector{Any}, Vector{MT}}, Union{Vector{Any}, Vector{MT}}, Real}} where {T<:Real, MT<:VecOrMat{T}}","page":"Periodic matrix data types","title":"PeriodicSystems.HarmonicArray","text":" HarmonicArray(A0, Ac, As, T) -> A::HarmonicArray\n\nConstruct a harmonic array representation from the harmonic components.\n\nThe harmonic array object A is built for  the harmonic representation Ahr(t) of a periodic matrix of period T in the form\n\n                 p\n Ahr(t) = A_0 +  ∑ ( Ac_i*cos(i*t*2*π/T)+As_i*sin(i*2*π*t/T) ) ,\n                i=1\n\nwhere the constant term A_0 is contained in the real matrix A0, and Ac and As are vectors of real matrices such that the i-th (cosinus) coefficient matrix  Ac_i is contained in Ac[i] and the i-th (sinus) coefficient matrix  As_i is contained in As[i]. p is the maximum of length of the vectors of matrices Ac and As.  If the length of Ac or As is less than p, then zero trailing matrices are assumed in the respective matrix.  All component matrices must have the same dimensions. The complex matrix containing the harmonic components and the period T  can be accessed via A.values and A.period, respectively.\n\n\n\n\n\n","category":"method"},{"location":"psconv.html#Periodic-matrix-conversions","page":"Periodic matrix conversions","title":"Periodic matrix conversions","text":"","category":"section"},{"location":"psconv.html","page":"Periodic matrix conversions","title":"Periodic matrix conversions","text":"ts2hr  Harmonic approximation of a periodic time series matrix.\nts2pfm  Periodic function matrix of an interpolated periodic time series matrix.\nhr2psm  Periodic symbolic matrix of a harmonic representation.","category":"page"},{"location":"psconv.html","page":"Periodic matrix conversions","title":"Periodic matrix conversions","text":"ts2hr\nts2pfm\nhr2psm","category":"page"},{"location":"psconv.html#PeriodicSystems.ts2hr","page":"Periodic matrix conversions","title":"PeriodicSystems.ts2hr","text":" ts2hr(A::PeriodicTimeSeriesMatrix; atol = 0, rtol = √ϵ, n) -> Ahr::HarmonicArray\n\nCompute the harmonic (Fourier) approximation of a periodic matrix specified by a time series.  The periodic matrix A(t) is specified as a continuous-time periodic time series matrix A,  with m matrices contained in the vector of matrices A.values, where A.values[k]  is the value of A(t) at time moment (k-1)T/m, with T = A.period being the period.  The resulting harmonic approximation Ahr(t) of A(t) has the form\n\n                 p\n Ahr(t) = A_0 +  ∑ ( Ac_i*cos(i*t*2*π/T)+As_i*sin(i*2*π*t/T) ) \n                i=1\n\nwhere A_0 is the constant term (the mean value), Ac_i and As_i are the   coefficient matrices of the i-th cosinus and sinus terms, respectively.  The order of the approximation p is determined using the maximum order specified by n  (default: n = (m-1)/2) and the absolute and relative tolerances atol and rtol, as follows: p is the minimum between n, (m-1)/2 and the maximum index k  such that Ac_k and/or As_k are nonzero. The tolerance used to assess nonzero elements is tol = max(atol, rtol*maxnorm), where  maxnorm is the maximum norm of the matrices contained in A.values. The default values of tolerances are atol = 0 and rtol = √ϵ, where ϵ is the working machine precision.\n\nThe resulting harmonic approximation Ahr(t) is returned in the harmonic array object Ahr  (see HarmonicArray). \n\n\n\n\n\n","category":"function"},{"location":"psconv.html#PeriodicSystems.ts2pfm","page":"Periodic matrix conversions","title":"PeriodicSystems.ts2pfm","text":" ts2pfm(At::PeriodicTimeSeriesMatrix; method = \"linear\") -> A::PeriodicFunctionMatrix\n\nCompute the periodic function matrix corresponding to an interpolated periodic time series matrix.  For the given periodic time series matrix At, a periodic function matrix A(t) is defined as the  mapping A(t) = t -> etpf(t), where etpf(t) is a periodic interpolation/extrapolation object,   as provided in the Interpolation.jl package. The keyword parameter method specifies the interpolation/extrapolation method to be used as follows:\n\nmethod = \"constant\" - use periodic B-splines of degree 0 \n\nmethod = \"linear\" - use periodic B-splines of degree 1 (periodic linear interpolation; default)\n\nmethod = \"quadratic\" - use periodic B-splines of degree 2 (periodic quadratic interpolation) \n\nmethod = \"cubic\" - use periodic B-splines of degree 3 (periodic cubic interpolation) \n\n\n\n\n\n","category":"function"},{"location":"psconv.html#PeriodicSystems.hr2psm","page":"Periodic matrix conversions","title":"PeriodicSystems.hr2psm","text":"hr2psm(Ahr::HarmonicArray, nrange) -> A::Matrix\n\nConvert a range of harmonic components nrange of the harmonic array Ahr to a symbolic matrix A.  The default range is nrange = 0:n, where n is the order of the maximum harmonics.  \n\n\n\n\n\n","category":"function"},{"location":"index.html","page":"Home","title":"Home","text":"CurrentModule = PeriodicSystems\nDocTestSetup = quote\n    using PeriodicSystems\nend","category":"page"},{"location":"index.html#PeriodicSystems.jl","page":"Home","title":"PeriodicSystems.jl","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"(Image: DocBuild) (Image: Code on Github.)","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"PeriodicSystems.jl is intended to be a collection of Julia functions for numerical computations related to periodic system representations in the continuous-time form","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":" dx(t)/dt = A(t)x(t) + B(t)u(t) ,\n y(t)     = C(t)x(t) + D(t)u(t) ,","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"or in the discrete-time form","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":" x(t+1)  = A(t)x(t) + B(t)u(t) ,\n y(t)(t) = C(t)x(t) + D(t)u(t) ,","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"where x(t), u(t) and y(t) are the system state vector, system input vector and system output vector, respectively, and t is the continuous or discrete time variable. The system matrices satisfy A(t) = A(t+T), B(t) = B(t+T), C(t) = C(t+T), D(t) = D(t+T),  i.e., are periodic with period T. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Many control applications are formulated as genuine periodic control problems as for example, satellite attitude control, helicopter forward flight control, orbital stabilization of underactuated systems, etc. Besides that, periodic systems represent a general framework to analyze and design multi-rate sampled-data systems. ","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"The targeted functionality of this package is described in [1] and will cover both continuous-time and discrete-time periodic systems. The following categories of functions are planned:","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Building periodic system state-space models","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Basic operations on periodic system models","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Basic conversions on periodic system models","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Solving periodic matrix equations","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Simplification of periodic system models","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Periodic system analysis","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"Periodic output and state feedback controller design ","category":"page"},{"location":"index.html#[Release-Notes](https://github.com/andreasvarga/PeriodicSystems.jl/blob/master/ReleaseNotes.md)","page":"Home","title":"Release Notes","text":"","category":"section"},{"location":"index.html#Main-developer","page":"Home","title":"Main developer","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"Andreas Varga","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"License: MIT (expat)","category":"page"},{"location":"index.html#References","page":"Home","title":"References","text":"","category":"section"},{"location":"index.html","page":"Home","title":"Home","text":"[1] A. Varga. A Periodic Systems Toolbox for Matlab. Proc. of IFAC 2005 World Congress, Prague, Czech Republic, 2005.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"[2] S. Bittanti and P. Colaneri. Periodic Systems - Filtering and Control, Springer Verlag, 2009.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"[3]  A. Varga, MatrixPencils.jl: Matrix pencil manipulation using Julia. Zenodo: https://doi.org/10.5281/zenodo.3894503.","category":"page"},{"location":"index.html","page":"Home","title":"Home","text":"[4]  A. Varga, MatrixEquations.jl: Solution of Lyapunov, Sylvester and Riccati matrix equations using Julia. Zenodo: https://doi.org/10.5281/zenodo.3556867.","category":"page"},{"location":"makeindex.html#Index","page":"Index","title":"Index","text":"","category":"section"},{"location":"makeindex.html","page":"Index","title":"Index","text":"Pages = [ \"pstypes.md\", \"pstools.md\", \"psconv.md\", \"slicot.md\" ]\nModule = [\"PeriodicSystems\"]\nOrder = [:type, :function]","category":"page"},{"location":"slicot.html#SLICOT-periodic-system-utilities","page":"SLICOT periodic system utilities","title":"SLICOT periodic system utilities","text":"","category":"section"},{"location":"slicot.html","page":"SLICOT periodic system utilities","title":"SLICOT periodic system utilities","text":"PeriodicSystems.SLICOTtools.mb03vd!\nPeriodicSystems.SLICOTtools.mb03vy!\nPeriodicSystems.SLICOTtools.mb03bd!","category":"page"},{"location":"slicot.html#PeriodicSystems.SLICOTtools.mb03vd!","page":"SLICOT periodic system utilities","title":"PeriodicSystems.SLICOTtools.mb03vd!","text":"mb03vd!(n::Integer, p::Integer, ilo::Integer, ihi::Integer, A::Array{Float64, 3}, tau::AbstractMatrix{Float64}) -> info::Int64\n\nReduce a product of p real general matrices A = A_1*A_2*...*A_p to upper Hessenberg form, H = H_1*H_2*...*H_p, where H_1 is upper Hessenberg, and H_2, ..., H_p are upper triangular, by using orthogonal similarity transformations on A,\n\n    Q_1' * A_1 * Q_2 = H_1,\n    Q_2' * A_2 * Q_3 = H_2,\n           ...\n    Q_p' * A_p * Q_1 = H_p.\n\nH_1, H_2, ..., H_p overwrite A_1, A_2, ..., A_p. \n\nSee the SLICOT documentation of MB03VD for details.\n\n\n\n\n\n","category":"function"},{"location":"slicot.html#PeriodicSystems.SLICOTtools.mb03vy!","page":"SLICOT periodic system utilities","title":"PeriodicSystems.SLICOTtools.mb03vy!","text":" mb03vy!(n::Integer, p::Integer, ilo::Integer, ihi::Integer, A::Array{Float64, 3}, tau::AbstractMatrix{Float64}) -> info::Int64\n\nGenerate the real orthogonal matrices Q_1, Q_2, ..., Q_p, which are defined as the product of ihi-ilo elementary reflectors of order n, as returned in A_1, A_2, ..., A_p by mb03vd!:\n\n Q_j = H_j(ilo) H_j(ilo+1) . . . H_j(ihi-1).\n\nQ_1, Q_2, ..., Q_p overwrite A_1, A_2, ..., A_p. \n\nSee the SLICOT documentation of MB03VY for details.\n\n\n\n\n\n","category":"function"},{"location":"slicot.html#PeriodicSystems.SLICOTtools.mb03bd!","page":"SLICOT periodic system utilities","title":"PeriodicSystems.SLICOTtools.mb03bd!","text":"mb03bd!(job::AbstractChar, defl::AbstractChar, compq::AbstractChar, qind::AbstractVector{Int64}, k::Integer, n::Integer, h::Integer, \n        ilo::Integer, ihi::Integer, s::AbstractVector{Int64}, a::Array{Float64, 3}, q::Array{Float64, 3}, alphar::AbstractVector{Float64}, \n        alphai::AbstractVector{Float64}, beta::AbstractVector{Float64}, scal::AbstractVector{Int64}, liwork::Integer, ldwork::Integer) -> (info::Int64, iwarn::Int64)\n\nFind the eigenvalues of the generalized matrix product\n\n          s[1]           s[2]                 s[k]\n  A[:,:,1]     * A[:,:,2]     * ... * A[:,:,k]\n\nwhere A[:,:,h] is upper Hessenberg and A[:,:,i], i <> h, is upper triangular, using a double-shift version of the periodic QZ method. In addition, A may be reduced to periodic Schur form: A[:,:,h] is upper quasi-triangular and all the other factors A[:,:,i] are upper triangular. Optionally, the 2-by-2 triangular matrices corresponding to 2-by-2 diagonal blocks in A[:,:,h] are so reduced that their product is a 2-by-2 diagonal matrix.\n\nIf compq = 'U' or compq = 'I', then the orthogonal factors are computed and stored in the array Q so that for s[i] = 1,\n\n                T\n    Q[:,:,i](in)   A[:,:,i](in)   Q[:,:,mod(i,k)+1](in)\n                                                        T \n=   Q[:,:,i](out)  A[:,:,i](out)  Q[:,:,mod(i,k)+1](out),\n\nand for s[i] = -1,\n\n                         T\n    Q[:,:,mod(i,k)+1](in)   A[:,:,i](in)   Q[:,:,i](in)\n                                                        T \n=   Q[:,:,mod(i,k)+1](out)  A[:,:,i](out)  Q[:,:,i](out).\n\nA partial generation of the orthogonal factors can be realized via the array qind.\n\nSee the SLICOT documentation of MB03BD for details.\n\n\n\n\n\n","category":"function"}]
}
